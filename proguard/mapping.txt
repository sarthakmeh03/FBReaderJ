android.support.v13.dreams.BasicDream -> android.support.v13.dreams.BasicDream:
    android.view.View mView -> a
    boolean mPlugged -> b
    android.content.BroadcastReceiver mPowerIntentReceiver -> c
    void onStart() -> onStart
    void onPause() -> onPause
    void onStop() -> onStop
    void setContentView(android.view.View) -> setContentView
    void onDraw(android.graphics.Canvas) -> a
    void onUserInteraction() -> onUserInteraction
    boolean access$000(android.support.v13.dreams.BasicDream) -> a
    boolean access$002(android.support.v13.dreams.BasicDream,boolean) -> a
android.support.v13.dreams.BasicDream$1 -> android.support.v13.dreams.a:
    android.support.v13.dreams.BasicDream this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
android.support.v13.dreams.BasicDream$BasicDreamView -> android.support.v13.dreams.b:
    android.support.v13.dreams.BasicDream this$0 -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDraw(android.graphics.Canvas) -> onDraw
android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    void bumpBackStackNesting(int) -> a
    void run() -> run
    void popFromBackStack(boolean) -> a
    java.lang.String getName() -> a
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> N
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    int mFragmentId -> u
    int mContainerId -> v
    java.lang.String mTag -> w
    boolean mHidden -> x
    boolean mDetached -> y
    boolean mRetainInstance -> z
    boolean mRetaining -> A
    boolean mHasMenu -> B
    boolean mMenuVisible -> C
    boolean mCalled -> D
    int mNextAnim -> E
    android.view.ViewGroup mContainer -> F
    android.view.View mView -> G
    android.view.View mInnerView -> H
    boolean mDeferStart -> I
    boolean mUserVisibleHint -> J
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> K
    boolean mLoadersStarted -> L
    boolean mCheckedForLoaderManager -> M
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState() -> a
    void setIndex(int) -> a
    boolean isInBackStack() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> c
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> a
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> b
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> c
    void onStart() -> d
    void onResume() -> e
    void onSaveInstanceState(android.os.Bundle) -> d
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> f
    void onStop() -> g
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> h
    void onDestroy() -> i
    void initState() -> j
    void onDetach() -> k
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> l
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void performStart() -> m
    void performStop() -> n
    void performReallyStop() -> o
    void performDestroyView() -> p
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.Fragment$InstantiationException:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.FragmentActivity:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    boolean mCreated -> c
    boolean mResumed -> d
    boolean mStopped -> e
    boolean mReallyStopped -> f
    boolean mRetaining -> g
    boolean mOptionsMenuInvalidated -> h
    boolean mCheckedForLoaderManager -> i
    boolean mLoadersStarted -> j
    android.support.v4.util.SparseArrayCompat mAllLoaderManagers -> k
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> l
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragmentIndex(int) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(int,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.f:
    android.support.v4.app.FragmentActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.g:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.h:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    android.support.v4.util.SparseArrayCompat loaders -> e
android.support.v4.app.FragmentManager -> android.support.v4.app.i:
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.j:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.k:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    boolean mNeedMenuInvalidate -> p
    boolean mStateSaved -> q
    boolean mDestroyed -> r
    java.lang.String mNoTransactionsBecause -> s
    boolean mHavePendingDeferredStart -> t
    android.os.Bundle mStateBundle -> u
    android.util.SparseArray mStateArray -> v
    java.lang.Runnable mExecCommit -> w
    android.view.animation.Interpolator DECELERATE_QUINT -> x
    android.view.animation.Interpolator DECELERATE_CUBIC -> y
    android.view.animation.Interpolator ACCELERATE_QUINT -> z
    android.view.animation.Interpolator ACCELERATE_CUBIC -> A
    boolean executePendingTransactions() -> a
    boolean popBackStackImmediate() -> b
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> c
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> r
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> d
    void reportBackStackChanged() -> e
    void addBackStackState(android.support.v4.app.BackStackRecord) -> a
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> f
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> g
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity) -> a
    void noteStateNotSaved() -> h
    void dispatchCreate() -> i
    void dispatchActivityCreated() -> j
    void dispatchStart() -> k
    void dispatchResume() -> l
    void dispatchPause() -> m
    void dispatchStop() -> n
    void dispatchReallyStop() -> o
    void dispatchDestroy() -> p
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> q
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.l:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.m:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.n:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.o:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTransaction -> android.support.v4.app.p:
android.support.v4.app.LoaderManager -> android.support.v4.app.q:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.r:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.s:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    android.support.v4.app.FragmentActivity mActivity -> d
    boolean mStarted -> e
    boolean mRetaining -> f
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.t:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.u:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.NotificationCompat -> android.support.v4.app.v:
    android.support.v4.app.NotificationCompat$NotificationCompatImpl IMPL -> a
    android.support.v4.app.NotificationCompat$NotificationCompatImpl access$000() -> a
android.support.v4.app.NotificationCompat$Action -> android.support.v4.app.w:
    int icon -> a
    java.lang.CharSequence title -> b
    android.app.PendingIntent actionIntent -> c
android.support.v4.app.NotificationCompat$BigPictureStyle -> android.support.v4.app.x:
    android.graphics.Bitmap mPicture -> a
android.support.v4.app.NotificationCompat$BigTextStyle -> android.support.v4.app.y:
    java.lang.CharSequence mBigText -> a
android.support.v4.app.NotificationCompat$Builder -> android.support.v4.app.z:
    android.content.Context mContext -> a
    java.lang.CharSequence mContentTitle -> b
    java.lang.CharSequence mContentText -> c
    android.app.PendingIntent mContentIntent -> d
    android.app.PendingIntent mFullScreenIntent -> e
    android.widget.RemoteViews mTickerView -> f
    android.graphics.Bitmap mLargeIcon -> g
    java.lang.CharSequence mContentInfo -> h
    int mNumber -> i
    int mPriority -> j
    boolean mUseChronometer -> k
    android.support.v4.app.NotificationCompat$Style mStyle -> l
    java.lang.CharSequence mSubText -> m
    int mProgressMax -> n
    int mProgress -> o
    boolean mProgressIndeterminate -> p
    java.util.ArrayList mActions -> q
    android.app.Notification mNotification -> r
    android.support.v4.app.NotificationCompat$Builder setSmallIcon(int) -> a
    android.support.v4.app.NotificationCompat$Builder setContentTitle(java.lang.CharSequence) -> a
    android.support.v4.app.NotificationCompat$Builder setProgress(int,int,boolean) -> a
    android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent) -> a
    android.support.v4.app.NotificationCompat$Builder setOngoing(boolean) -> a
    android.support.v4.app.NotificationCompat$Builder setAutoCancel(boolean) -> b
    void setFlag(int,boolean) -> a
    android.app.Notification build() -> a
android.support.v4.app.NotificationCompat$InboxStyle -> android.support.v4.app.aa:
    java.util.ArrayList mTexts -> a
android.support.v4.app.NotificationCompat$NotificationCompatImpl -> android.support.v4.app.ab:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplBase -> android.support.v4.app.ac:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplHoneycomb -> android.support.v4.app.ad:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplIceCreamSandwich -> android.support.v4.app.ae:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplJellybean -> android.support.v4.app.af:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$Style -> android.support.v4.app.ag:
    java.lang.CharSequence mBigContentTitle -> b
    java.lang.CharSequence mSummaryText -> c
    boolean mSummaryTextSet -> d
android.support.v4.app.NotificationCompatHoneycomb -> android.support.v4.app.ah:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap) -> a
android.support.v4.app.NotificationCompatIceCreamSandwich -> android.support.v4.app.ai:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean) -> a
android.support.v4.app.NotificationCompatJellybean -> android.support.v4.app.aj:
    android.app.Notification$Builder b -> a
    void addAction(int,java.lang.CharSequence,android.app.PendingIntent) -> a
    void addBigTextStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.lang.CharSequence) -> a
    void addBigPictureStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,android.graphics.Bitmap) -> a
    void addInboxStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.util.ArrayList) -> a
    android.app.Notification build() -> a
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.SuperNotCalledException:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    java.lang.Object get(int) -> a
    java.lang.Object get(int,java.lang.Object) -> a
    void delete(int) -> b
    void remove(int) -> c
    void removeAt(int) -> d
    void gc() -> c
    void put(int,java.lang.Object) -> b
    int size() -> a
    int keyAt(int) -> e
    java.lang.Object valueAt(int) -> f
    void clear() -> b
    int binarySearch(int[],int,int,int) -> a
    int idealByteArraySize(int) -> g
    int idealIntArraySize(int) -> h
android.support.v4.view.KeyEventCompat -> android.support.v4.view.a:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.b:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.c:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.d:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.e:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> a
android.support.v4.view.MotionEventCompat -> android.support.v4.view.f:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionIndex(android.view.MotionEvent) -> a
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.g:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.h:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.i:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.j:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.PagerAdapter -> android.support.v4.view.k:
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.l:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.m:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.n:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.o:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.p:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.ViewCompat -> android.support.v4.view.q:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.r:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    long getFrameTime() -> a
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.s:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.t:
    long getFrameTime() -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.u:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.v:
    void postInvalidateOnAnimation(android.view.View) -> b
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.w:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.x:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.y:
    long getFrameTime() -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.z:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.aa:
    void postInvalidateOnAnimation(android.view.View) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    java.util.Comparator COMPARATOR -> b
    android.view.animation.Interpolator sInterpolator -> c
    java.util.ArrayList mItems -> d
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> e
    android.graphics.Rect mTempRect -> f
    android.support.v4.view.PagerAdapter mAdapter -> g
    int mCurItem -> h
    int mRestoredCurItem -> i
    android.os.Parcelable mRestoredAdapterState -> j
    java.lang.ClassLoader mRestoredClassLoader -> k
    android.widget.Scroller mScroller -> l
    int mPageMargin -> m
    android.graphics.drawable.Drawable mMarginDrawable -> n
    int mTopPageBounds -> o
    int mBottomPageBounds -> p
    float mFirstOffset -> q
    float mLastOffset -> r
    int mChildWidthMeasureSpec -> s
    int mChildHeightMeasureSpec -> t
    boolean mInLayout -> u
    boolean mScrollingCacheEnabled -> v
    boolean mPopulatePending -> w
    int mOffscreenPageLimit -> x
    boolean mIsBeingDragged -> y
    boolean mIsUnableToDrag -> z
    int mDefaultGutterSize -> A
    int mGutterSize -> B
    int mTouchSlop -> C
    float mInitialMotionX -> D
    float mLastMotionX -> E
    float mLastMotionY -> F
    int mActivePointerId -> G
    android.view.VelocityTracker mVelocityTracker -> H
    int mMinimumVelocity -> I
    int mMaximumVelocity -> J
    int mFlingDistance -> K
    int mCloseEnough -> L
    boolean mFakeDragging -> M
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> N
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> O
    boolean mFirstLayout -> P
    boolean mNeedCalculatePageOffsets -> Q
    boolean mCalledSuper -> R
    int mDecorChildCount -> S
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> T
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> U
    int mScrollState -> V
    void setScrollState(int) -> d
    void setCurrentItem(int,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void populate() -> a
    void populate(int) -> a
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> e
    void onPageScrolled(int,float,int) -> a
    void completeScroll() -> e
    boolean isGutterDrag(float,float) -> a
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> f
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> g
    void setScrollingCacheEnabled(boolean) -> a
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> b
    boolean pageRight() -> c
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$300() -> d
android.support.v4.view.ViewPager$1 -> android.support.v4.view.ab:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.ac:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ad:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.ae:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ViewPager$LayoutParams:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.af:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.ag:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.d.a:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.d.b:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.d.c:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.d.d:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.d.e:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
biz.source_code.base64Coder.Base64Coder -> a.a.a.a:
    java.lang.String systemLineSeparator -> a
    char[] map1 -> b
    byte[] map2 -> c
    byte[] decode(java.lang.String) -> a
    byte[] decode(char[]) -> a
    byte[] decode(char[],int,int) -> a
com.bugsense.trace.BugSense -> com.a.a.a:
    java.util.concurrent.ExecutorService executor -> a
    java.util.concurrent.ExecutorService getExecutor() -> a
    void showUpgradeNotification(android.content.Context,java.lang.String) -> a
com.bugsense.trace.BugSenseHandler -> com.a.a.b:
    boolean I_WANT_TO_DEBUG -> a
    android.content.SharedPreferences preferences -> e
    android.content.SharedPreferences$Editor editor -> f
    com.bugsense.trace.ExceptionCallback exceptionCallback -> g
    boolean isSessionActive -> h
    java.lang.String locTicker -> b
    java.lang.String locTitle -> c
    java.lang.String locText -> d
    java.util.HashMap crashExtraData -> i
    void initAndStartSession(android.content.Context,java.lang.String) -> a
    com.bugsense.trace.ExceptionCallback getCallback() -> a
    void startSession(android.content.Context) -> a
    void flush(android.content.Context) -> b
    void installHandler() -> e
    java.util.HashMap getCrashExtraData() -> b
    void addCrashExtraMap(java.util.HashMap) -> a
    android.content.SharedPreferences access$002(android.content.SharedPreferences) -> a
    android.content.SharedPreferences$Editor access$102(android.content.SharedPreferences$Editor) -> a
    android.content.SharedPreferences access$000() -> c
    android.content.SharedPreferences$Editor access$100() -> d
com.bugsense.trace.BugSenseHandler$1 -> com.a.a.c:
    android.content.Context val$context -> a
    void run() -> run
com.bugsense.trace.CrashMechanism -> com.a.a.d:
    com.bugsense.trace.CrashMechanism instance -> a
    com.bugsense.trace.CrashMechanism getInstance() -> a
    void sendSavedCrashes() -> b
    java.lang.String createJSONFromCrash(java.lang.String,int,int,int,java.lang.String[],java.lang.String,java.util.Map,java.util.Map,int,long,java.util.Map) -> a
    void transmitCrashASync(java.lang.String,int) -> a
    boolean transmitCrashSync(java.lang.String,int) -> b
    void saveFixNotification(java.lang.String) -> a
    void saveCrash(java.lang.String,int) -> c
    java.lang.String getBreadcrumbsLine(java.util.ArrayList) -> a
    java.lang.String getClass(java.lang.String) -> b
com.bugsense.trace.CrashMechanism$1 -> com.a.a.e:
    com.bugsense.trace.CrashMechanism this$0 -> a
    void run() -> run
com.bugsense.trace.CrashMechanism$1$1 -> com.a.a.f:
    com.bugsense.trace.CrashMechanism$1 this$1 -> a
    boolean accept(java.io.File,java.lang.String) -> accept
com.bugsense.trace.CrashMechanism$1$2 -> com.a.a.g:
    com.bugsense.trace.CrashMechanism$1 this$1 -> a
    boolean accept(java.io.File,java.lang.String) -> accept
com.bugsense.trace.CrashMechanism$2 -> com.a.a.h:
    java.lang.String val$jsonCrashData -> a
    int val$type -> b
    void run() -> run
com.bugsense.trace.CrashMechanism$3 -> com.a.a.i:
    java.lang.String val$line -> a
    void run() -> run
com.bugsense.trace.CrashMechanism$4 -> com.a.a.j:
    int val$type -> a
    java.lang.String val$jsonCrashData -> b
    void run() -> run
com.bugsense.trace.CryptoHttpClient -> com.a.a.k:
    int KEY -> a
    org.apache.http.conn.ClientConnectionManager createClientConnectionManager() -> createClientConnectionManager
    org.apache.http.conn.ssl.SSLSocketFactory newSslSocketFactory() -> a
com.bugsense.trace.DefaultExceptionHandler -> com.a.a.l:
    java.lang.Thread$UncaughtExceptionHandler defaultExceptionHandler -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
com.bugsense.trace.EventsMechanism -> com.a.a.m:
    com.bugsense.trace.EventsMechanism instance -> a
    com.bugsense.trace.EventsMechanism getInstance() -> a
    void sendSavedEvents() -> b
    boolean transmitEventSync(java.lang.String) -> a
com.bugsense.trace.EventsMechanism$1 -> com.a.a.n:
    com.bugsense.trace.EventsMechanism this$0 -> a
    void run() -> run
com.bugsense.trace.EventsMechanism$1$1 -> com.a.a.o:
    com.bugsense.trace.EventsMechanism$1 this$1 -> a
    boolean accept(java.io.File,java.lang.String) -> accept
com.bugsense.trace.ExceptionCallback -> com.a.a.p:
    void lastBreath(java.lang.Exception) -> a
com.bugsense.trace.G -> com.a.a.q:
    java.lang.String FILES_PATH -> a
    java.lang.String APP_VERSION -> b
    java.lang.String APP_VERSIONCODE -> c
    java.lang.String APP_PACKAGE -> d
    java.lang.String URL -> e
    java.lang.String ANALYTICS_URL -> f
    java.lang.String TAG -> g
    java.lang.String ANDROID_VERSION -> h
    java.lang.String PHONE_MODEL -> i
    java.lang.String PHONE_BRAND -> j
    java.lang.String API_KEY -> k
    boolean HAS_ROOT -> l
    java.lang.String LOCALE -> m
    java.lang.String UID -> n
    java.util.ArrayList breadcrumbs -> o
    java.lang.String APPS_RUNNING -> p
    boolean SEND_LOG -> q
    java.lang.String LOG_FILTER -> r
    int LOG_LINES -> s
    long TIMESTAMP -> t
    boolean proxyEnabled -> u
    int IS_WIFI_ON -> v
    int IS_MOBILENET_ON -> w
    int IS_GPS_ON -> x
    java.lang.String[] SCREEN_PROPS -> y
    boolean sendOnlyWiFi -> z
    java.lang.String userIdentifier -> A
com.bugsense.trace.PingsMechanism -> com.a.a.r:
    com.bugsense.trace.PingsMechanism instance -> a
    com.bugsense.trace.PingsMechanism getInstance() -> a
    void sendSavedPings() -> b
    java.lang.String getFlatLine(int,java.lang.String,java.lang.String,java.lang.String) -> a
    void transmitPingASync(int) -> a
    void transmitPingASync(java.lang.String,int) -> a
    boolean transmitPingSync(java.lang.String) -> a
    void savePing(int,java.lang.String) -> a
    void savePing(int,java.lang.String,java.lang.String,java.lang.String) -> b
com.bugsense.trace.PingsMechanism$1 -> com.a.a.s:
    com.bugsense.trace.PingsMechanism this$0 -> a
    void run() -> run
com.bugsense.trace.PingsMechanism$1$1 -> com.a.a.t:
    com.bugsense.trace.PingsMechanism$1 this$1 -> a
    boolean accept(java.io.File,java.lang.String) -> accept
com.bugsense.trace.PingsMechanism$1$2 -> com.a.a.u:
    com.bugsense.trace.PingsMechanism$1 this$1 -> a
    boolean accept(java.io.File,java.lang.String) -> accept
com.bugsense.trace.PingsMechanism$1$3 -> com.a.a.v:
    com.bugsense.trace.PingsMechanism$1 this$1 -> a
    boolean accept(java.io.File,java.lang.String) -> accept
com.bugsense.trace.PingsMechanism$2 -> com.a.a.w:
    java.lang.String val$jsonCrashData -> a
    int val$type -> b
    void run() -> run
com.bugsense.trace.PingsMechanism$3 -> com.a.a.x:
    int val$type -> a
    java.lang.String val$tag -> b
    void run() -> run
com.bugsense.trace.PingsMechanism$4 -> com.a.a.y:
    int val$type -> a
    java.lang.String val$tag -> b
    java.lang.String val$cpu -> c
    java.lang.String val$mem -> d
    void run() -> run
com.bugsense.trace.Utils -> com.a.a.z:
    char[] DIGITS -> b
    java.lang.Runtime rt -> a
    boolean checkForRoot() -> a
    java.lang.String getTime() -> b
    java.lang.String exceedLimitString(java.lang.String) -> a
    java.lang.String readLogs() -> c
    java.lang.String readFile(java.lang.String) -> b
    int CheckNetworkConnection(android.content.Context,java.lang.String) -> a
    int isWifiOn(android.content.Context) -> a
    int isMobileNetworkOn(android.content.Context) -> b
    int isGPSOn(android.content.Context) -> c
    java.lang.String[] ScreenProperties(android.content.Context) -> d
    void setProperties(android.content.Context) -> e
    java.lang.String manageUid(android.content.Context) -> f
    boolean saveUid(java.io.File,java.lang.String) -> a
    boolean hasStorage(boolean) -> a
    java.lang.String generateUid() -> f
    char[] encodeHex(byte[]) -> a
    java.lang.String getMem() -> d
    java.lang.String getCPU() -> e
    java.lang.String getAppsRunning(android.content.Context) -> g
com.google.analytics.tracking.android.AdHitIdGenerator -> com.google.analytics.tracking.android.a:
    boolean adMobSdkInstalled -> a
    int getAdHitId() -> a
com.google.analytics.tracking.android.AdMobInfo -> com.google.analytics.tracking.android.b:
    com.google.analytics.tracking.android.AdMobInfo INSTANCE -> a
    int adHitId -> b
    java.util.Random random -> c
    com.google.analytics.tracking.android.AdMobInfo getInstance() -> a
    int generateAdHitId() -> b
com.google.analytics.tracking.android.Analytics -> com.google.analytics.tracking.android.c:
    void setDebug(boolean) -> a
    com.google.analytics.tracking.android.Tracker getTracker(java.lang.String) -> a
com.google.analytics.tracking.android.Analytics$AppOptOutCallback -> com.google.analytics.tracking.android.d:
    void reportAppOptOut(boolean) -> a
com.google.analytics.tracking.android.AnalyticsClient -> com.google.analytics.tracking.android.e:
    void sendHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void clearHits() -> a
    void connect() -> b
    void disconnect() -> c
com.google.analytics.tracking.android.AnalyticsGmsCoreClient -> com.google.analytics.tracking.android.f:
    android.content.ServiceConnection connection -> a
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectedListener onConnectedListener -> b
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectionFailedListener onConnectionFailedListener -> c
    android.content.Context context -> d
    com.google.android.gms.analytics.internal.IAnalyticsService service -> e
    void connect() -> b
    void disconnect() -> c
    void sendHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void clearHits() -> a
    com.google.android.gms.analytics.internal.IAnalyticsService getService() -> f
    void checkConnected() -> d
    boolean isConnected() -> e
    void onServiceBound() -> g
    void onConnectionSuccess() -> h
    com.google.android.gms.analytics.internal.IAnalyticsService access$002(com.google.analytics.tracking.android.AnalyticsGmsCoreClient,com.google.android.gms.analytics.internal.IAnalyticsService) -> a
    void access$100(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> a
    android.content.Context access$200(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> b
    android.content.ServiceConnection access$302(com.google.analytics.tracking.android.AnalyticsGmsCoreClient,android.content.ServiceConnection) -> a
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectionFailedListener access$400(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> c
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectedListener access$500(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> d
com.google.analytics.tracking.android.AnalyticsGmsCoreClient$AnalyticsServiceConnection -> com.google.analytics.tracking.android.g:
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectedListener -> com.google.analytics.tracking.android.h:
    void onConnected() -> a
    void onDisconnected() -> b
com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectionFailedListener -> com.google.analytics.tracking.android.i:
    void onConnectionFailed(int,android.content.Intent) -> a
com.google.analytics.tracking.android.AnalyticsReceiver -> com.google.analytics.tracking.android.AnalyticsReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.analytics.tracking.android.AnalyticsStore -> com.google.analytics.tracking.android.j:
    void putHit(java.util.Map,long,java.lang.String,java.util.Collection) -> a
    void clearHits() -> a
    void dispatch() -> b
com.google.analytics.tracking.android.AnalyticsStoreStateListener -> com.google.analytics.tracking.android.k:
    void reportStoreIsEmpty(boolean) -> a
com.google.analytics.tracking.android.AnalyticsThread -> com.google.analytics.tracking.android.l:
    void sendHit(java.util.Map) -> a
    void dispatch() -> a
    void setAppOptOut(boolean) -> a
    void requestAppOptOut(com.google.analytics.tracking.android.Analytics$AppOptOutCallback) -> a
    void requestClientId(com.google.analytics.tracking.android.AnalyticsThread$ClientIdCallback) -> a
    java.util.concurrent.LinkedBlockingQueue getQueue() -> b
    java.lang.Thread getThread() -> c
com.google.analytics.tracking.android.AnalyticsThread$ClientIdCallback -> com.google.analytics.tracking.android.m:
    void reportClientId(java.lang.String) -> a
com.google.analytics.tracking.android.Clock -> com.google.analytics.tracking.android.n:
    long currentTimeMillis() -> a
com.google.analytics.tracking.android.Dispatcher -> com.google.analytics.tracking.android.o:
    int dispatchHits(java.util.List) -> a
    boolean okToDispatch() -> a
com.google.analytics.tracking.android.EasyTracker -> com.google.analytics.tracking.android.p:
    com.google.analytics.tracking.android.EasyTracker instance -> a
    boolean gaEnabled -> b
    java.lang.String gaTrackingId -> c
    java.lang.String gaAppName -> d
    java.lang.String gaAppVersion -> e
    int gaDispatchPeriod -> f
    boolean gaDebug -> g
    java.lang.Double gaSampleRate -> h
    boolean gaAnonymizeIp -> i
    boolean gaReportUncaughtExceptions -> j
    java.lang.Thread$UncaughtExceptionHandler handler -> k
    boolean autoActivityTracking -> l
    int activitiesActive -> m
    long gaSessionTimeout -> n
    long lastOnStopTime -> o
    android.content.Context gaContext -> p
    java.util.Map activityNameMap -> q
    com.google.analytics.tracking.android.Tracker tracker -> r
    com.google.analytics.tracking.android.ParameterLoader parameterFetcher -> s
    com.google.analytics.tracking.android.Analytics ga -> t
    com.google.analytics.tracking.android.ServiceManager serviceManager -> u
    com.google.analytics.tracking.android.Clock clock -> v
    java.util.Timer timer -> w
    java.util.TimerTask timerTask -> x
    boolean inForeground -> y
    com.google.analytics.tracking.android.EasyTracker getInstance() -> a
    com.google.analytics.tracking.android.Tracker getTracker() -> b
    boolean checkForNewSession() -> c
    void loadParameters() -> d
    void setContext(android.content.Context) -> a
    void setContext(android.content.Context,com.google.analytics.tracking.android.ParameterLoader,com.google.analytics.tracking.android.Analytics,com.google.analytics.tracking.android.ServiceManager) -> a
    void activityStart(android.app.Activity) -> a
    void activityStop(android.app.Activity) -> b
    void clearExistingTimer() -> e
    java.lang.String getActivityName(android.app.Activity) -> c
    boolean access$102(com.google.analytics.tracking.android.EasyTracker,boolean) -> a
com.google.analytics.tracking.android.EasyTracker$1 -> com.google.analytics.tracking.android.q:
    com.google.analytics.tracking.android.EasyTracker this$0 -> a
    long currentTimeMillis() -> a
com.google.analytics.tracking.android.EasyTracker$NoopTracker -> com.google.analytics.tracking.android.r:
    double sampleRate -> b
    boolean anonymizeIp -> c
    com.google.analytics.tracking.android.EasyTracker this$0 -> a
    void setStartSession(boolean) -> a
    void setAppName(java.lang.String) -> a
    void setAppVersion(java.lang.String) -> b
    void trackView(java.lang.String) -> c
    void trackEvent(java.lang.String,java.lang.String,java.lang.String,java.lang.Long) -> a
    void trackException(java.lang.String,boolean) -> a
    void setAnonymizeIp(boolean) -> b
    void setSampleRate(double) -> a
com.google.analytics.tracking.android.EasyTracker$NotInForegroundTimerTask -> com.google.analytics.tracking.android.s:
    com.google.analytics.tracking.android.EasyTracker this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.ExceptionParser -> com.google.analytics.tracking.android.t:
    java.lang.String getDescription(java.lang.String,java.lang.Throwable) -> a
com.google.analytics.tracking.android.ExceptionReporter -> com.google.analytics.tracking.android.u:
    java.lang.Thread$UncaughtExceptionHandler originalHandler -> a
    com.google.analytics.tracking.android.Tracker tracker -> b
    com.google.analytics.tracking.android.ServiceManager serviceManager -> c
    com.google.analytics.tracking.android.ExceptionParser exceptionParser -> d
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
com.google.analytics.tracking.android.FutureApis -> com.google.analytics.tracking.android.v:
    int version() -> a
    boolean setOwnerOnlyReadWrite(java.lang.String) -> a
com.google.analytics.tracking.android.GAServiceManager -> com.google.analytics.tracking.android.w:
    java.lang.Object MSG_OBJECT -> a
    android.content.Context ctx -> b
    com.google.analytics.tracking.android.AnalyticsStore store -> c
    com.google.analytics.tracking.android.AnalyticsThread thread -> d
    int dispatchPeriodInSeconds -> e
    boolean pendingDispatch -> f
    com.google.analytics.tracking.android.AnalyticsStoreStateListener listener -> g
    android.os.Handler handler -> h
    boolean powerSaveMode -> i
    com.google.analytics.tracking.android.GAServiceManager instance -> j
    com.google.analytics.tracking.android.GAServiceManager getInstance() -> a
    void initializeHandler() -> e
    void initialize(android.content.Context,com.google.analytics.tracking.android.AnalyticsThread) -> a
    com.google.analytics.tracking.android.AnalyticsStore getStore() -> b
    void dispatch() -> c
    void setDispatchPeriod(int) -> a
    void updatePowerSaveMode(boolean) -> a
    java.lang.Object access$000() -> d
    int access$100(com.google.analytics.tracking.android.GAServiceManager) -> a
    boolean access$200(com.google.analytics.tracking.android.GAServiceManager) -> b
    android.os.Handler access$300(com.google.analytics.tracking.android.GAServiceManager) -> c
com.google.analytics.tracking.android.GAServiceManager$1 -> com.google.analytics.tracking.android.x:
    com.google.analytics.tracking.android.GAServiceManager this$0 -> a
    void reportStoreIsEmpty(boolean) -> a
com.google.analytics.tracking.android.GAServiceManager$2 -> com.google.analytics.tracking.android.y:
    com.google.analytics.tracking.android.GAServiceManager this$0 -> a
    boolean handleMessage(android.os.Message) -> handleMessage
com.google.analytics.tracking.android.GAServiceProxy -> com.google.analytics.tracking.android.z:
    long lastRequestTime -> a
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState state -> b
    com.google.analytics.tracking.android.AnalyticsClient client -> c
    com.google.analytics.tracking.android.AnalyticsStore store -> d
    com.google.analytics.tracking.android.AnalyticsStore testStore -> e
    com.google.analytics.tracking.android.AnalyticsThread thread -> f
    android.content.Context ctx -> g
    java.util.Queue queue -> h
    int connectTries -> i
    java.util.Timer reConnectTimer -> j
    java.util.Timer failedConnectTimer -> k
    java.util.Timer disconnectCheckTimer -> l
    boolean pendingDispatch -> m
    boolean pendingClearHits -> n
    com.google.analytics.tracking.android.Clock clock -> o
    long idleTimeout -> p
    void putHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void dispatch() -> c
    void clearHits() -> d
    java.util.Timer cancelTimer(java.util.Timer) -> a
    void clearAllTimers() -> f
    void createService() -> e
    void sendQueue() -> g
    void dispatchToStore() -> h
    void useStore() -> i
    void connectToService() -> j
    void disconnectFromService() -> k
    void onConnected() -> a
    void onDisconnected() -> b
    void onConnectionFailed(int,android.content.Intent) -> a
    void fireReconnectAttempt() -> l
    void access$000(com.google.analytics.tracking.android.GAServiceProxy) -> a
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState access$400(com.google.analytics.tracking.android.GAServiceProxy) -> b
    void access$500(com.google.analytics.tracking.android.GAServiceProxy) -> c
    void access$600(com.google.analytics.tracking.android.GAServiceProxy) -> d
    java.util.Queue access$700(com.google.analytics.tracking.android.GAServiceProxy) -> e
    long access$800(com.google.analytics.tracking.android.GAServiceProxy) -> f
    long access$900(com.google.analytics.tracking.android.GAServiceProxy) -> g
    com.google.analytics.tracking.android.Clock access$1000(com.google.analytics.tracking.android.GAServiceProxy) -> h
    void access$1100(com.google.analytics.tracking.android.GAServiceProxy) -> i
    java.util.Timer access$1200(com.google.analytics.tracking.android.GAServiceProxy) -> j
com.google.analytics.tracking.android.GAServiceProxy$1 -> com.google.analytics.tracking.android.aa:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    long currentTimeMillis() -> a
com.google.analytics.tracking.android.GAServiceProxy$2 -> com.google.analytics.tracking.android.ab:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAServiceProxy$3 -> com.google.analytics.tracking.android.ac:
    int[] $SwitchMap$com$google$analytics$tracking$android$GAServiceProxy$ConnectState -> a
com.google.analytics.tracking.android.GAServiceProxy$ConnectState -> com.google.analytics.tracking.android.ad:
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState CONNECTING -> a
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState CONNECTED_SERVICE -> b
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState CONNECTED_LOCAL -> c
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState BLOCKED -> d
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState PENDING_CONNECTION -> e
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState PENDING_DISCONNECT -> f
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState DISCONNECTED -> g
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState[] $VALUES -> h
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState[] values() -> values
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState valueOf(java.lang.String) -> valueOf
com.google.analytics.tracking.android.GAServiceProxy$DisconnectCheckTask -> com.google.analytics.tracking.android.ae:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAServiceProxy$FailedConnectTask -> com.google.analytics.tracking.android.af:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAServiceProxy$HitParams -> com.google.analytics.tracking.android.ag:
    java.util.Map wireFormatParams -> a
    long hitTimeInMilliseconds -> b
    java.lang.String path -> c
    java.util.List commands -> d
    java.util.Map getWireFormatParams() -> a
    long getHitTimeInMilliseconds() -> b
    java.lang.String getPath() -> c
    java.util.List getCommands() -> d
com.google.analytics.tracking.android.GAServiceProxy$ReconnectTask -> com.google.analytics.tracking.android.ah:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAThread -> com.google.analytics.tracking.android.ai:
    java.util.concurrent.LinkedBlockingQueue queue -> a
    boolean disabled -> b
    boolean closed -> c
    boolean appOptOut -> d
    java.util.List commands -> e
    com.google.analytics.tracking.android.MetaModel metaModel -> f
    java.lang.String installCampaign -> g
    java.lang.String clientId -> h
    com.google.analytics.tracking.android.GAThread instance -> i
    com.google.analytics.tracking.android.ServiceProxy proxy -> j
    android.content.Context ctx -> k
    com.google.analytics.tracking.android.GAThread getInstance(android.content.Context) -> a
    void init() -> f
    void sendHit(java.util.Map) -> a
    java.lang.String getHostUrl(java.util.Map) -> b
    void fillExceptionParameters(java.util.Map) -> c
    boolean isSampledOut(java.util.Map) -> d
    void fillAppParameters(java.util.Map) -> e
    void putIfAbsent(java.util.Map,java.lang.String,java.lang.String) -> a
    void fillCampaignParameters(java.util.Map) -> f
    void dispatch() -> a
    void setAppOptOut(boolean) -> a
    void requestAppOptOut(com.google.analytics.tracking.android.Analytics$AppOptOutCallback) -> a
    void requestClientId(com.google.analytics.tracking.android.AnalyticsThread$ClientIdCallback) -> a
    void queueToThread(java.lang.Runnable) -> a
    boolean loadAppOptOut() -> g
    boolean storeClientId(java.lang.String) -> a
    java.lang.String generateClientId() -> d
    java.lang.String initializeClientId() -> e
    java.lang.String getAndClearCampaign(android.content.Context) -> b
    java.lang.String printStackTrace(java.lang.Throwable) -> a
    void run() -> run
    java.util.concurrent.LinkedBlockingQueue getQueue() -> b
    java.lang.Thread getThread() -> c
    boolean access$000(com.google.analytics.tracking.android.GAThread) -> a
    boolean access$100(com.google.analytics.tracking.android.GAThread,java.util.Map) -> a
    java.lang.String access$200(com.google.analytics.tracking.android.GAThread) -> b
    java.lang.String access$300(com.google.analytics.tracking.android.GAThread) -> c
    java.lang.String access$302(com.google.analytics.tracking.android.GAThread,java.lang.String) -> a
    void access$400(com.google.analytics.tracking.android.GAThread,java.util.Map) -> b
    void access$500(com.google.analytics.tracking.android.GAThread,java.util.Map) -> c
    void access$600(com.google.analytics.tracking.android.GAThread,java.util.Map) -> d
    com.google.analytics.tracking.android.MetaModel access$700(com.google.analytics.tracking.android.GAThread) -> d
    java.lang.String access$800(com.google.analytics.tracking.android.GAThread,java.util.Map) -> e
    java.util.List access$900(com.google.analytics.tracking.android.GAThread) -> e
    com.google.analytics.tracking.android.ServiceProxy access$1000(com.google.analytics.tracking.android.GAThread) -> f
    android.content.Context access$1100(com.google.analytics.tracking.android.GAThread) -> g
    boolean access$002(com.google.analytics.tracking.android.GAThread,boolean) -> a
com.google.analytics.tracking.android.GAThread$1 -> com.google.analytics.tracking.android.aj:
    java.util.Map val$hitCopy -> a
    long val$hitTime -> b
    com.google.analytics.tracking.android.GAThread this$0 -> c
    void run() -> run
com.google.analytics.tracking.android.GAThread$2 -> com.google.analytics.tracking.android.ak:
    com.google.analytics.tracking.android.GAThread this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAThread$3 -> com.google.analytics.tracking.android.al:
    boolean val$appOptOut -> a
    com.google.analytics.tracking.android.GAThread this$0 -> b
    void run() -> run
com.google.analytics.tracking.android.GAThread$4 -> com.google.analytics.tracking.android.am:
    com.google.analytics.tracking.android.Analytics$AppOptOutCallback val$callback -> a
    com.google.analytics.tracking.android.GAThread this$0 -> b
    void run() -> run
com.google.analytics.tracking.android.GAThread$5 -> com.google.analytics.tracking.android.an:
    com.google.analytics.tracking.android.AnalyticsThread$ClientIdCallback val$callback -> a
    com.google.analytics.tracking.android.GAThread this$0 -> b
    void run() -> run
com.google.analytics.tracking.android.GAUsage -> com.google.analytics.tracking.android.ao:
    java.util.SortedSet usedFields -> a
    java.lang.StringBuilder sequence -> b
    boolean disableUsage -> c
    com.google.analytics.tracking.android.GAUsage INSTANCE -> d
    com.google.analytics.tracking.android.GAUsage getInstance() -> a
    void setDisableUsage(boolean) -> a
    void setUsage(com.google.analytics.tracking.android.GAUsage$Field) -> a
    java.lang.String getAndClearUsage() -> b
    java.lang.String getAndClearSequence() -> c
com.google.analytics.tracking.android.GAUsage$Field -> com.google.analytics.tracking.android.ap:
    com.google.analytics.tracking.android.GAUsage$Field TRACK_VIEW -> a
    com.google.analytics.tracking.android.GAUsage$Field TRACK_VIEW_WITH_APPSCREEN -> b
    com.google.analytics.tracking.android.GAUsage$Field TRACK_EVENT -> c
    com.google.analytics.tracking.android.GAUsage$Field TRACK_TRANSACTION -> d
    com.google.analytics.tracking.android.GAUsage$Field TRACK_EXCEPTION_WITH_DESCRIPTION -> e
    com.google.analytics.tracking.android.GAUsage$Field TRACK_EXCEPTION_WITH_THROWABLE -> f
    com.google.analytics.tracking.android.GAUsage$Field BLANK_06 -> g
    com.google.analytics.tracking.android.GAUsage$Field TRACK_TIMING -> h
    com.google.analytics.tracking.android.GAUsage$Field TRACK_SOCIAL -> i
    com.google.analytics.tracking.android.GAUsage$Field GET -> j
    com.google.analytics.tracking.android.GAUsage$Field SET -> k
    com.google.analytics.tracking.android.GAUsage$Field SEND -> l
    com.google.analytics.tracking.android.GAUsage$Field SET_START_SESSION -> m
    com.google.analytics.tracking.android.GAUsage$Field BLANK_13 -> n
    com.google.analytics.tracking.android.GAUsage$Field SET_APP_NAME -> o
    com.google.analytics.tracking.android.GAUsage$Field BLANK_15 -> p
    com.google.analytics.tracking.android.GAUsage$Field SET_APP_VERSION -> q
    com.google.analytics.tracking.android.GAUsage$Field BLANK_17 -> r
    com.google.analytics.tracking.android.GAUsage$Field SET_APP_SCREEN -> s
    com.google.analytics.tracking.android.GAUsage$Field GET_TRACKING_ID -> t
    com.google.analytics.tracking.android.GAUsage$Field SET_ANONYMIZE_IP -> u
    com.google.analytics.tracking.android.GAUsage$Field GET_ANONYMIZE_IP -> v
    com.google.analytics.tracking.android.GAUsage$Field SET_SAMPLE_RATE -> w
    com.google.analytics.tracking.android.GAUsage$Field GET_SAMPLE_RATE -> x
    com.google.analytics.tracking.android.GAUsage$Field SET_USE_SECURE -> y
    com.google.analytics.tracking.android.GAUsage$Field GET_USE_SECURE -> z
    com.google.analytics.tracking.android.GAUsage$Field SET_REFERRER -> A
    com.google.analytics.tracking.android.GAUsage$Field SET_CAMPAIGN -> B
    com.google.analytics.tracking.android.GAUsage$Field SET_APP_ID -> C
    com.google.analytics.tracking.android.GAUsage$Field GET_APP_ID -> D
    com.google.analytics.tracking.android.GAUsage$Field SET_EXCEPTION_PARSER -> E
    com.google.analytics.tracking.android.GAUsage$Field GET_EXCEPTION_PARSER -> F
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_TRANSACTION -> G
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_EXCEPTION -> H
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_RAW_EXCEPTION -> I
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_TIMING -> J
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_SOCIAL -> K
    com.google.analytics.tracking.android.GAUsage$Field SET_DEBUG -> L
    com.google.analytics.tracking.android.GAUsage$Field GET_DEBUG -> M
    com.google.analytics.tracking.android.GAUsage$Field GET_TRACKER -> N
    com.google.analytics.tracking.android.GAUsage$Field GET_DEFAULT_TRACKER -> O
    com.google.analytics.tracking.android.GAUsage$Field SET_DEFAULT_TRACKER -> P
    com.google.analytics.tracking.android.GAUsage$Field SET_APP_OPT_OUT -> Q
    com.google.analytics.tracking.android.GAUsage$Field REQUEST_APP_OPT_OUT -> R
    com.google.analytics.tracking.android.GAUsage$Field DISPATCH -> S
    com.google.analytics.tracking.android.GAUsage$Field SET_DISPATCH_PERIOD -> T
    com.google.analytics.tracking.android.GAUsage$Field BLANK_48 -> U
    com.google.analytics.tracking.android.GAUsage$Field REPORT_UNCAUGHT_EXCEPTIONS -> V
    com.google.analytics.tracking.android.GAUsage$Field SET_AUTO_ACTIVITY_TRACKING -> W
    com.google.analytics.tracking.android.GAUsage$Field SET_SESSION_TIMEOUT -> X
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_EVENT -> Y
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_ITEM -> Z
    com.google.analytics.tracking.android.GAUsage$Field SET_APP_INSTALLER_ID -> aa
    com.google.analytics.tracking.android.GAUsage$Field GET_APP_INSTALLER_ID -> ab
    com.google.analytics.tracking.android.GAUsage$Field[] $VALUES -> ac
    com.google.analytics.tracking.android.GAUsage$Field[] values() -> values
    com.google.analytics.tracking.android.GAUsage$Field valueOf(java.lang.String) -> valueOf
com.google.analytics.tracking.android.GoogleAnalytics -> com.google.analytics.tracking.android.aq:
    boolean debug -> a
    com.google.analytics.tracking.android.AnalyticsThread thread -> b
    android.content.Context context -> c
    com.google.analytics.tracking.android.Tracker defaultTracker -> d
    com.google.analytics.tracking.android.AdHitIdGenerator adHitIdGenerator -> e
    java.lang.String clientId -> f
    java.lang.Boolean appOptOut -> g
    java.util.Map trackers -> h
    java.lang.String lastTrackingId -> i
    com.google.analytics.tracking.android.GoogleAnalytics instance -> j
    com.google.analytics.tracking.android.GoogleAnalytics getInstance(android.content.Context) -> a
    void setDebug(boolean) -> a
    com.google.analytics.tracking.android.Tracker getTracker(java.lang.String) -> a
    void sendHit(java.util.Map) -> a
    void setAppOptOut(boolean) -> b
    java.lang.Boolean access$002(com.google.analytics.tracking.android.GoogleAnalytics,java.lang.Boolean) -> a
    java.lang.String access$102(com.google.analytics.tracking.android.GoogleAnalytics,java.lang.String) -> a
com.google.analytics.tracking.android.GoogleAnalytics$1 -> com.google.analytics.tracking.android.ar:
    com.google.analytics.tracking.android.GoogleAnalytics this$0 -> a
    void reportAppOptOut(boolean) -> a
com.google.analytics.tracking.android.GoogleAnalytics$2 -> com.google.analytics.tracking.android.as:
    com.google.analytics.tracking.android.GoogleAnalytics this$0 -> a
    void reportClientId(java.lang.String) -> a
com.google.analytics.tracking.android.GoogleTracker -> com.google.analytics.tracking.android.at:
    java.text.DecimalFormat DF -> a
    com.google.analytics.tracking.android.TrackerHandler handler -> b
    com.google.analytics.tracking.android.GoogleTracker$SimpleModel model -> c
    boolean trackerClosed -> d
    boolean trackingStarted -> e
    void assertTrackerOpen() -> a
    void internalSend(java.lang.String,java.util.Map) -> a
    void setStartSession(boolean) -> a
    void trackView(java.lang.String) -> c
    void trackEvent(java.lang.String,java.lang.String,java.lang.String,java.lang.Long) -> a
    void trackException(java.lang.String,boolean) -> a
    java.util.Map constructEvent(java.lang.String,java.lang.String,java.lang.String,java.lang.Long) -> b
    java.util.Map constructException(java.lang.String,boolean) -> b
    void setAnonymizeIp(boolean) -> b
    void setSampleRate(double) -> a
    void setAppName(java.lang.String) -> a
    void setAppVersion(java.lang.String) -> b
com.google.analytics.tracking.android.GoogleTracker$1 -> com.google.analytics.tracking.android.au:
com.google.analytics.tracking.android.GoogleTracker$SimpleModel -> com.google.analytics.tracking.android.av:
    java.util.Map temporaryMap -> a
    java.util.Map permanentMap -> b
    void setForNextHit(java.lang.String,java.lang.String) -> a
    void set(java.lang.String,java.lang.String) -> b
    void clearTemporaryValues() -> a
    void setAll(java.util.Map,java.lang.Boolean) -> a
    java.util.Map getKeysAndValues() -> b
com.google.analytics.tracking.android.Hit -> com.google.analytics.tracking.android.aw:
    java.lang.String hitString -> a
    long hitId -> b
    long hitTime -> c
    java.lang.String hitUrl -> d
    java.lang.String getHitParams() -> a
    void setHitString(java.lang.String) -> a
    long getHitId() -> b
    long getHitTime() -> c
    java.lang.String getHitUrl() -> d
    void setHitUrl(java.lang.String) -> b
com.google.analytics.tracking.android.HitBuilder -> com.google.analytics.tracking.android.ax:
    java.util.Map generateHitParams(com.google.analytics.tracking.android.MetaModel,java.util.Map) -> a
    java.lang.String postProcessHit(com.google.analytics.tracking.android.Hit,long) -> a
    java.lang.String encode(java.lang.String) -> a
com.google.analytics.tracking.android.HttpClientFactory -> com.google.analytics.tracking.android.ay:
    org.apache.http.client.HttpClient newInstance() -> a
com.google.analytics.tracking.android.Log -> com.google.analytics.tracking.android.az:
    boolean debug -> a
    void setDebug(boolean) -> a
    boolean debugEnabled() -> a
    int d(java.lang.String) -> a
    int dDebug(java.lang.String) -> b
    int e(java.lang.String) -> c
    int i(java.lang.String) -> d
    int iDebug(java.lang.String) -> e
    int v(java.lang.String) -> f
    int vDebug(java.lang.String) -> g
    int w(java.lang.String) -> h
    int wDebug(java.lang.String) -> i
    java.lang.String formatMessage(java.lang.String) -> j
com.google.analytics.tracking.android.MetaModel -> com.google.analytics.tracking.android.ba:
    java.util.Map metaInfos -> a
    com.google.analytics.tracking.android.MetaModel$MetaInfo getMetaInfo(java.lang.String) -> a
    void addField(java.lang.String,java.lang.String,java.lang.String,com.google.analytics.tracking.android.MetaModel$Formatter) -> a
com.google.analytics.tracking.android.MetaModel$Formatter -> com.google.analytics.tracking.android.bb:
    java.lang.String format(java.lang.String) -> a
com.google.analytics.tracking.android.MetaModel$MetaInfo -> com.google.analytics.tracking.android.bc:
    java.lang.String urlParam -> a
    java.lang.String defaultValue -> b
    com.google.analytics.tracking.android.MetaModel$Formatter formatter -> c
    java.lang.String getUrlParam(java.lang.String) -> a
    java.lang.String getDefaultValue() -> a
    com.google.analytics.tracking.android.MetaModel$Formatter getFormatter() -> b
com.google.analytics.tracking.android.MetaModelInitializer -> com.google.analytics.tracking.android.bd:
    com.google.analytics.tracking.android.MetaModel$Formatter BOOLEAN_FORMATTER -> a
    com.google.analytics.tracking.android.MetaModel$Formatter UP_TO_TWO_DIGIT_FLOAT_FORMATTER -> b
    void set(com.google.analytics.tracking.android.MetaModel) -> a
com.google.analytics.tracking.android.MetaModelInitializer$1 -> com.google.analytics.tracking.android.be:
    java.lang.String format(java.lang.String) -> a
com.google.analytics.tracking.android.MetaModelInitializer$2 -> com.google.analytics.tracking.android.bf:
    java.text.DecimalFormat floatFormat -> a
    java.lang.String format(java.lang.String) -> a
com.google.analytics.tracking.android.ParameterLoader -> com.google.analytics.tracking.android.bg:
    java.lang.String getString(java.lang.String) -> a
    java.lang.Double getDoubleFromString(java.lang.String) -> b
    boolean getBoolean(java.lang.String) -> c
    int getInt(java.lang.String,int) -> a
com.google.analytics.tracking.android.ParameterLoaderImpl -> com.google.analytics.tracking.android.bh:
    android.content.Context ctx -> a
    int getResourceIdForType(java.lang.String,java.lang.String) -> a
    java.lang.String getString(java.lang.String) -> a
    boolean getBoolean(java.lang.String) -> c
    int getInt(java.lang.String,int) -> a
    java.lang.Double getDoubleFromString(java.lang.String) -> b
com.google.analytics.tracking.android.PersistentAnalyticsStore -> com.google.analytics.tracking.android.bi:
    long tokens -> a
    long lastTrackTime -> b
    boolean throttlingEnabled -> c
    java.lang.String CREATE_HITS_TABLE -> d
    com.google.analytics.tracking.android.PersistentAnalyticsStore$AnalyticsDatabaseHelper dbHelper -> e
    com.google.analytics.tracking.android.Dispatcher dispatcher -> f
    com.google.analytics.tracking.android.AnalyticsStoreStateListener listener -> g
    android.content.Context context -> h
    java.lang.String databaseName -> i
    long lastDeleteStaleHitsTime -> j
    com.google.analytics.tracking.android.HttpClientFactory createDefaultHttpClientFactory() -> g
    void clearHits() -> a
    void putHit(java.util.Map,long,java.lang.String,java.util.Collection) -> a
    void fillVersionParametersIfNecessary(java.util.Map,java.util.Collection) -> a
    void storeVersion(java.util.Map,java.lang.String,java.lang.String) -> a
    void removeOldHitIfFull() -> h
    void writeHitToDatabase(java.util.Map,long,java.lang.String) -> a
    java.lang.String generateHitString(java.util.Map) -> a
    java.util.List peekHits(int) -> a
    int deleteStaleHits() -> c
    void deleteHits(java.util.Collection) -> a
    int getNumStoredHits() -> d
    void dispatch() -> b
    boolean tokensAvailable() -> e
    android.database.sqlite.SQLiteDatabase getWritableDatabase(java.lang.String) -> a
    java.lang.String access$000() -> f
com.google.analytics.tracking.android.PersistentAnalyticsStore$1 -> com.google.analytics.tracking.android.bj:
    com.google.analytics.tracking.android.PersistentAnalyticsStore this$0 -> a
    org.apache.http.client.HttpClient newInstance() -> a
com.google.analytics.tracking.android.PersistentAnalyticsStore$AnalyticsDatabaseHelper -> com.google.analytics.tracking.android.bk:
    boolean badDatabase -> b
    com.google.analytics.tracking.android.PersistentAnalyticsStore this$0 -> a
    boolean tablePresent(java.lang.String,android.database.sqlite.SQLiteDatabase) -> a
    android.database.sqlite.SQLiteDatabase getWritableDatabase() -> getWritableDatabase
    void onOpen(android.database.sqlite.SQLiteDatabase) -> onOpen
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.google.analytics.tracking.android.ServiceManager -> com.google.analytics.tracking.android.bl:
    void dispatch() -> c
    void setDispatchPeriod(int) -> a
com.google.analytics.tracking.android.ServiceProxy -> com.google.analytics.tracking.android.bm:
    void putHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void clearHits() -> d
    void dispatch() -> c
    void createService() -> e
com.google.analytics.tracking.android.SimpleNetworkDispatcher -> com.google.analytics.tracking.android.bn:
    java.lang.String userAgent -> a
    com.google.analytics.tracking.android.HttpClientFactory httpClientFactory -> b
    android.content.Context ctx -> c
    boolean okToDispatch() -> a
    int dispatchHits(java.util.List) -> a
    org.apache.http.HttpEntityEnclosingRequest buildRequest(java.lang.String,java.lang.String) -> a
    void logDebugInformation(boolean,org.apache.http.HttpEntityEnclosingRequest) -> a
    java.lang.String createUserAgentString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.net.URL getUrl(com.google.analytics.tracking.android.Hit) -> a
com.google.analytics.tracking.android.StandardExceptionParser -> com.google.analytics.tracking.android.bo:
    java.util.TreeSet includedPackages -> a
    void setIncludedPackages(android.content.Context,java.util.Collection) -> a
    java.lang.Throwable getCause(java.lang.Throwable) -> a
    java.lang.StackTraceElement getBestStackTraceElement(java.lang.Throwable) -> b
    java.lang.String getDescription(java.lang.Throwable,java.lang.StackTraceElement,java.lang.String) -> a
    java.lang.String getDescription(java.lang.String,java.lang.Throwable) -> a
com.google.analytics.tracking.android.TrackedActivity -> com.google.analytics.tracking.android.TrackedActivity:
    void onStart() -> onStart
    void onStop() -> onStop
com.google.analytics.tracking.android.TrackedExpandableListActivity -> com.google.analytics.tracking.android.TrackedExpandableListActivity:
    void onStart() -> onStart
    void onStop() -> onStop
com.google.analytics.tracking.android.TrackedListActivity -> com.google.analytics.tracking.android.TrackedListActivity:
    void onStart() -> onStart
    void onStop() -> onStop
com.google.analytics.tracking.android.TrackedPreferenceActivity -> com.google.analytics.tracking.android.TrackedPreferenceActivity:
    void onStart() -> onStart
    void onStop() -> onStop
com.google.analytics.tracking.android.TrackedTabActivity -> com.google.analytics.tracking.android.TrackedTabActivity:
    void onStart() -> onStart
    void onStop() -> onStop
com.google.analytics.tracking.android.Tracker -> com.google.analytics.tracking.android.bp:
    void setStartSession(boolean) -> a
    void setAppName(java.lang.String) -> a
    void setAppVersion(java.lang.String) -> b
    void trackView(java.lang.String) -> c
    void trackEvent(java.lang.String,java.lang.String,java.lang.String,java.lang.Long) -> a
    void trackException(java.lang.String,boolean) -> a
    void setAnonymizeIp(boolean) -> b
    void setSampleRate(double) -> a
com.google.analytics.tracking.android.TrackerHandler -> com.google.analytics.tracking.android.bq:
    void sendHit(java.util.Map) -> a
com.google.analytics.tracking.android.Utils -> com.google.analytics.tracking.android.br:
    char[] HEXBYTES -> a
    java.util.Map parseURLParameters(java.lang.String) -> a
    double safeParseDouble(java.lang.String) -> b
    boolean safeParseBoolean(java.lang.String) -> c
    java.lang.String filterCampaign(java.lang.String) -> d
    java.lang.String getLanguage(java.util.Locale) -> a
    int fromHexDigit(char) -> a
    byte[] hexDecode(java.lang.String) -> e
com.google.android.gms.analytics.internal.Command -> com.google.android.gms.analytics.internal.Command:
    java.lang.String id -> a
    java.lang.String urlParam -> b
    java.lang.String value -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getId() -> a
    java.lang.String getUrlParam() -> b
    java.lang.String getValue() -> c
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void readFromParcel(android.os.Parcel) -> a
com.google.android.gms.analytics.internal.Command$1 -> com.google.android.gms.analytics.internal.a:
    com.google.android.gms.analytics.internal.Command createFromParcel(android.os.Parcel) -> a
    com.google.android.gms.analytics.internal.Command[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.google.android.gms.analytics.internal.IAnalyticsService -> com.google.android.gms.analytics.internal.b:
    void sendHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void clearHits() -> a
com.google.android.gms.analytics.internal.IAnalyticsService$Stub -> com.google.android.gms.analytics.internal.c:
    com.google.android.gms.analytics.internal.IAnalyticsService asInterface(android.os.IBinder) -> a
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.google.android.gms.analytics.internal.IAnalyticsService$Stub$Proxy -> com.google.android.gms.analytics.internal.d:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    void sendHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void clearHits() -> a
com.hyperionics.fbreader.plugin.tts_plus.TtsSentenceExtractor -> com.b.a.a.a.a:
    com.hyperionics.fbreader.plugin.tts_plus.TtsSentenceExtractor$SentenceIndex[] build(java.util.List,java.util.ArrayList,java.util.Locale) -> a
    java.lang.String replaceEngAbbreviations(java.lang.String,java.util.Locale) -> a
com.hyperionics.fbreader.plugin.tts_plus.TtsSentenceExtractor$SentenceIndex -> com.b.a.a.a.b:
    java.lang.String s -> a
    int i -> b
javax.jmdns.JmDNS -> b.a.a:
    javax.jmdns.JmDNS create(java.net.InetAddress,java.lang.String) -> a
    javax.jmdns.ServiceInfo[] list(java.lang.String) -> a
javax.jmdns.JmDNS$Delegate -> b.a.b:
    void cannotRecoverFromIOError(javax.jmdns.JmDNS,java.util.Collection) -> a
javax.jmdns.NetworkTopologyDiscovery -> b.a.c:
    java.net.InetAddress[] getInetAddresses() -> a
javax.jmdns.NetworkTopologyDiscovery$Factory -> b.a.d:
    javax.jmdns.NetworkTopologyDiscovery _instance -> a
    java.util.concurrent.atomic.AtomicReference _databaseClassDelegate -> b
    javax.jmdns.NetworkTopologyDiscovery newNetworkTopologyDiscovery() -> a
    javax.jmdns.NetworkTopologyDiscovery getInstance() -> b
javax.jmdns.NetworkTopologyDiscovery$Factory$ClassDelegate -> b.a.e:
    javax.jmdns.NetworkTopologyDiscovery newNetworkTopologyDiscovery() -> a
javax.jmdns.ServiceEvent -> b.a.f:
    javax.jmdns.JmDNS getDNS() -> a
    java.lang.String getType() -> b
    java.lang.String getName() -> c
    javax.jmdns.ServiceInfo getInfo() -> d
    javax.jmdns.ServiceEvent clone() -> e
    java.lang.Object clone() -> clone
javax.jmdns.ServiceInfo -> b.a.g:
    byte[] NO_VALUE -> a
    boolean hasData() -> a
    java.lang.String getType() -> b
    java.lang.String getName() -> c
    java.lang.String getQualifiedName() -> d
    java.lang.String getServer() -> e
    java.net.Inet4Address[] getInet4Addresses() -> f
    java.net.Inet6Address[] getInet6Addresses() -> g
    int getPort() -> h
    int getPriority() -> i
    int getWeight() -> j
    byte[] getTextBytes() -> k
    java.lang.String[] getURLs() -> l
    boolean isPersistent() -> m
    java.lang.String getDomain() -> n
    java.lang.String getProtocol() -> o
    java.lang.String getApplication() -> p
    java.lang.String getSubtype() -> q
    javax.jmdns.ServiceInfo clone() -> r
    java.lang.Object clone() -> clone
javax.jmdns.ServiceInfo$Fields -> b.a.h:
    javax.jmdns.ServiceInfo$Fields Domain -> a
    javax.jmdns.ServiceInfo$Fields Protocol -> b
    javax.jmdns.ServiceInfo$Fields Application -> c
    javax.jmdns.ServiceInfo$Fields Instance -> d
    javax.jmdns.ServiceInfo$Fields Subtype -> e
    javax.jmdns.ServiceInfo$Fields[] $VALUES -> f
    javax.jmdns.ServiceInfo$Fields[] values() -> values
    javax.jmdns.ServiceInfo$Fields valueOf(java.lang.String) -> valueOf
javax.jmdns.ServiceListener -> b.a.i:
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
javax.jmdns.ServiceTypeListener -> b.a.j:
    void serviceTypeAdded(javax.jmdns.ServiceEvent) -> a
    void subTypeForServiceTypeAdded(javax.jmdns.ServiceEvent) -> b
javax.jmdns.impl.DNSCache -> b.a.a.a:
    java.util.Set _entrySet -> b
    javax.jmdns.impl.DNSCache EmptyCache -> a
    java.util.Set entrySet() -> entrySet
    java.util.Map$Entry getEntry(java.lang.String) -> a
    java.util.List put(java.lang.String,java.util.List) -> a
    java.lang.Object clone() -> clone
    java.util.Collection allValues() -> a
    java.util.Collection getDNSEntryList(java.lang.String) -> b
    java.util.Collection _getDNSEntryList(java.lang.String) -> c
    javax.jmdns.impl.DNSEntry getDNSEntry(javax.jmdns.impl.DNSEntry) -> a
    javax.jmdns.impl.DNSEntry getDNSEntry(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass) -> a
    java.util.Collection getDNSEntryList(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass) -> b
    boolean addDNSEntry(javax.jmdns.impl.DNSEntry) -> b
    boolean removeDNSEntry(javax.jmdns.impl.DNSEntry) -> c
    boolean replaceDNSEntry(javax.jmdns.impl.DNSEntry,javax.jmdns.impl.DNSEntry) -> a
    java.lang.String toString() -> toString
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
javax.jmdns.impl.DNSCache$_CacheEntry -> b.a.a.b:
    java.util.List _value -> a
    java.lang.String _key -> b
    java.lang.String getKey() -> a
    java.util.List getValue() -> b
    java.util.List setValue(java.util.List) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
javax.jmdns.impl.DNSCache$_EmptyCache -> b.a.a.c:
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.List get(java.lang.Object) -> a
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    java.util.List put(java.lang.String,java.util.List) -> a
    int hashCode() -> hashCode
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
javax.jmdns.impl.DNSEntry -> b.a.a.d:
    java.lang.String _key -> b
    java.lang.String _name -> c
    java.lang.String _type -> d
    javax.jmdns.impl.constants.DNSRecordType _recordType -> e
    javax.jmdns.impl.constants.DNSRecordClass _dnsClass -> f
    boolean _unique -> g
    java.util.Map _qualifiedNameMap -> a
    boolean equals(java.lang.Object) -> equals
    boolean isSameEntry(javax.jmdns.impl.DNSEntry) -> a
    boolean sameSubtype(javax.jmdns.impl.DNSEntry) -> b
    boolean matchRecordClass(javax.jmdns.impl.constants.DNSRecordClass) -> a
    boolean matchRecordType(javax.jmdns.impl.constants.DNSRecordType) -> a
    java.lang.String getSubtype() -> a
    java.lang.String getName() -> b
    java.lang.String getType() -> c
    java.lang.String getKey() -> d
    javax.jmdns.impl.constants.DNSRecordType getRecordType() -> e
    javax.jmdns.impl.constants.DNSRecordClass getRecordClass() -> f
    boolean isUnique() -> g
    java.util.Map getQualifiedNameMap() -> h
    boolean isServicesDiscoveryMetaQuery() -> i
    boolean isDomainDiscoveryQuery() -> j
    boolean isReverseLookup() -> k
    boolean isV4ReverseLookup() -> l
    boolean isV6ReverseLookup() -> m
    boolean isExpired(long) -> a
    boolean isSameRecordClass(javax.jmdns.impl.DNSEntry) -> c
    boolean isSameType(javax.jmdns.impl.DNSEntry) -> d
    void toByteArray(java.io.DataOutputStream) -> a
    byte[] toByteArray() -> n
    int compareTo(javax.jmdns.impl.DNSEntry) -> e
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSIncoming -> b.a.a.e:
    java.util.logging.Logger logger -> g
    boolean USE_DOMAIN_NAME_FORMAT_FOR_SRV_TARGET -> a
    java.net.DatagramPacket _packet -> h
    long _receivedTime -> i
    javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream -> j
    int _senderUDPPayload -> k
    char[] _nibbleToHex -> l
    javax.jmdns.impl.DNSIncoming clone() -> a
    javax.jmdns.impl.DNSQuestion readQuestion() -> x
    javax.jmdns.impl.DNSRecord readAnswer(java.net.InetAddress) -> a
    java.lang.String print(boolean) -> a
    java.lang.String toString() -> toString
    void append(javax.jmdns.impl.DNSIncoming) -> a
    int elapseSinceArrival() -> b
    int getSenderUDPPayload() -> c
    java.lang.String _hexString(byte[]) -> b
    java.lang.Object clone() -> clone
javax.jmdns.impl.DNSIncoming$1 -> b.a.a.f:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSLabel -> a
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSOptionCode -> b
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType -> c
javax.jmdns.impl.DNSIncoming$MessageInputStream -> b.a.a.g:
    java.util.logging.Logger logger1 -> b
    java.util.Map _names -> a
    int readUnsignedShort() -> a
    int readInt() -> b
    byte[] readBytes(int) -> a
    java.lang.String readUTF(int) -> b
    java.lang.String readName() -> c
    java.lang.String readNonNameString() -> d
javax.jmdns.impl.DNSListener -> b.a.a.h:
    void updateRecord(javax.jmdns.impl.DNSCache,long,javax.jmdns.impl.DNSEntry) -> a
javax.jmdns.impl.DNSMessage -> b.a.a.i:
    int _id -> a
    boolean _multicast -> b
    int _flags -> g
    java.util.List _questions -> c
    java.util.List _answers -> d
    java.util.List _authoritativeAnswers -> e
    java.util.List _additionals -> f
    int getId() -> d
    void setId(int) -> a
    int getFlags() -> e
    void setFlags(int) -> b
    boolean isMulticast() -> f
    java.util.Collection getQuestions() -> g
    int getNumberOfQuestions() -> h
    java.util.Collection getAllAnswers() -> i
    java.util.Collection getAnswers() -> j
    int getNumberOfAnswers() -> k
    java.util.Collection getAuthorities() -> l
    int getNumberOfAuthorities() -> m
    java.util.Collection getAdditionals() -> n
    int getNumberOfAdditionals() -> o
    boolean isValidResponseCode() -> p
    int getOperationCode() -> q
    boolean isTruncated() -> r
    boolean isAuthoritativeAnswer() -> s
    boolean isQuery() -> t
    boolean isResponse() -> u
    boolean isEmpty() -> v
    java.lang.String print() -> w
    java.lang.String print(byte[]) -> a
javax.jmdns.impl.DNSOutgoing -> b.a.a.j:
    boolean USE_DOMAIN_NAME_COMPRESSION -> a
    java.util.Map _names -> g
    int _maxUDPPayload -> h
    javax.jmdns.impl.DNSOutgoing$MessageOutputStream _questionsBytes -> i
    javax.jmdns.impl.DNSOutgoing$MessageOutputStream _answersBytes -> j
    javax.jmdns.impl.DNSOutgoing$MessageOutputStream _authoritativeAnswersBytes -> k
    javax.jmdns.impl.DNSOutgoing$MessageOutputStream _additionalsAnswersBytes -> l
    int availableSpace() -> a
    void addQuestion(javax.jmdns.impl.DNSQuestion) -> a
    void addAnswer(javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord) -> a
    void addAnswer(javax.jmdns.impl.DNSRecord,long) -> a
    void addAuthorativeAnswer(javax.jmdns.impl.DNSRecord) -> a
    byte[] data() -> b
    java.lang.String toString() -> toString
    int getMaxUDPPayload() -> c
javax.jmdns.impl.DNSOutgoing$MessageOutputStream -> b.a.a.k:
    javax.jmdns.impl.DNSOutgoing _out -> a
    int _offset -> b
    void writeByte(int) -> a
    void writeBytes(byte[],int,int) -> a
    void writeShort(int) -> b
    void writeInt(int) -> c
    void writeUTF(java.lang.String,int,int) -> a
    void writeName(java.lang.String) -> a
    void writeName(java.lang.String,boolean) -> a
    void writeQuestion(javax.jmdns.impl.DNSQuestion) -> a
    void writeRecord(javax.jmdns.impl.DNSRecord,long) -> a
javax.jmdns.impl.DNSQuestion -> b.a.a.l:
    java.util.logging.Logger logger -> b
    javax.jmdns.impl.DNSQuestion newQuestion(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean) -> a
    boolean answeredBy(javax.jmdns.impl.DNSEntry) -> f
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    void addAnswersForServiceInfo(javax.jmdns.impl.JmDNSImpl,java.util.Set,javax.jmdns.impl.ServiceInfoImpl) -> a
    boolean isExpired(long) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSQuestion$1 -> b.a.a.m:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType -> a
javax.jmdns.impl.DNSQuestion$AllRecords -> b.a.a.n:
    boolean isSameType(javax.jmdns.impl.DNSEntry) -> d
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSQuestion$DNS4Address -> b.a.a.o:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSQuestion$DNS6Address -> b.a.a.p:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSQuestion$HostInformation -> b.a.a.q:
javax.jmdns.impl.DNSQuestion$Pointer -> b.a.a.r:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
javax.jmdns.impl.DNSQuestion$Service -> b.a.a.s:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSQuestion$Text -> b.a.a.t:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSRecord -> b.a.a.u:
    java.util.logging.Logger logger -> c
    int _ttl -> d
    long _created -> e
    java.net.InetAddress _source -> f
    byte[] EMPTY_TXT -> b
    boolean equals(java.lang.Object) -> equals
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean sameType(javax.jmdns.impl.DNSRecord) -> b
    boolean handleQuery(javax.jmdns.impl.JmDNSImpl,long) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> a
    boolean suppressedBy(javax.jmdns.impl.DNSIncoming) -> a
    boolean suppressedBy(javax.jmdns.impl.DNSRecord) -> c
    long getExpirationTime(int) -> a
    int getRemainingTTL(long) -> b
    boolean isExpired(long) -> a
    boolean isStale(long) -> c
    void resetTTL(javax.jmdns.impl.DNSRecord) -> d
    void setWillExpireSoon(long) -> d
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    boolean isSingleValued() -> o
    javax.jmdns.ServiceInfo getServiceInfo() -> p
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> b
    void setRecordSource(java.net.InetAddress) -> a
    java.net.InetAddress getRecordSource() -> q
    void toString(java.lang.StringBuilder) -> a
    int getTTL() -> r
javax.jmdns.impl.DNSRecord$Address -> b.a.a.v:
    java.util.logging.Logger logger1 -> d
    java.net.InetAddress _addr -> c
    boolean sameName(javax.jmdns.impl.DNSRecord) -> e
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> o
    java.net.InetAddress getAddress() -> s
    void toByteArray(java.io.DataOutputStream) -> a
    boolean handleQuery(javax.jmdns.impl.JmDNSImpl,long) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> a
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> b
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSRecord$HostInformation -> b.a.a.w:
    java.lang.String _os -> c
    java.lang.String _cpu -> d
    boolean handleQuery(javax.jmdns.impl.JmDNSImpl,long) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> a
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> o
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> b
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSRecord$IPv4Address -> b.a.a.x:
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
javax.jmdns.impl.DNSRecord$IPv6Address -> b.a.a.y:
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
javax.jmdns.impl.DNSRecord$Pointer -> b.a.a.z:
    java.lang.String _alias -> c
    boolean isSameEntry(javax.jmdns.impl.DNSEntry) -> a
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> o
    boolean handleQuery(javax.jmdns.impl.JmDNSImpl,long) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> a
    java.lang.String getAlias() -> s
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> b
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSRecord$Service -> b.a.a.aa:
    java.util.logging.Logger logger1 -> c
    int _priority -> d
    int _weight -> e
    int _port -> f
    java.lang.String _server -> g
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    void toByteArray(java.io.DataOutputStream) -> a
    java.lang.String getServer() -> s
    int getPriority() -> t
    int getWeight() -> u
    int getPort() -> v
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> o
    boolean handleQuery(javax.jmdns.impl.JmDNSImpl,long) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> a
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> b
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSRecord$Text -> b.a.a.ab:
    byte[] _text -> c
    byte[] getText() -> s
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> o
    boolean handleQuery(javax.jmdns.impl.JmDNSImpl,long) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> a
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> b
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSStatefulObject -> b.a.a.ac:
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore -> b.a.a.ad:
    java.util.logging.Logger logger -> a
    java.lang.String _name -> b
    java.util.concurrent.ConcurrentMap _semaphores -> c
    void waitForEvent(long) -> a
    void signalEvent() -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.DNSStatefulObject$DefaultImplementation -> b.a.a.ae:
    java.util.logging.Logger logger -> c
    javax.jmdns.impl.JmDNSImpl _dns -> d
    javax.jmdns.impl.tasks.DNSTask _task -> a
    javax.jmdns.impl.constants.DNSState _state -> b
    javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore _announcing -> e
    javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore _canceling -> f
    javax.jmdns.impl.JmDNSImpl getDns() -> a
    void setDns(javax.jmdns.impl.JmDNSImpl) -> a
    void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> a
    void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask) -> b
    boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> b
    void setTask(javax.jmdns.impl.tasks.DNSTask) -> c
    void setState(javax.jmdns.impl.constants.DNSState) -> a
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
    boolean revertState() -> b
    boolean cancelState() -> c
    boolean closeState() -> d
    boolean recoverState() -> e
    boolean isProbing() -> f
    boolean isAnnouncing() -> g
    boolean isAnnounced() -> h
    boolean isCanceling() -> i
    boolean isCanceled() -> j
    boolean isClosing() -> k
    boolean isClosed() -> l
    boolean willCancel() -> m
    boolean willClose() -> n
    boolean waitForAnnounced(long) -> a
    boolean waitForCanceled(long) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.DNSTaskStarter -> b.a.a.af:
    void purgeTimer() -> a
    void purgeStateTimer() -> b
    void cancelTimer() -> c
    void cancelStateTimer() -> d
    void startProber() -> e
    void startAnnouncer() -> f
    void startRenewer() -> g
    void startCanceler() -> h
    void startReaper() -> i
    void startServiceInfoResolver(javax.jmdns.impl.ServiceInfoImpl) -> a
    void startServiceResolver(java.lang.String) -> b
    void startResponder(javax.jmdns.impl.DNSIncoming,int) -> a
javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl -> b.a.a.ag:
    javax.jmdns.impl.JmDNSImpl _jmDNSImpl -> a
    java.util.Timer _timer -> b
    java.util.Timer _stateTimer -> c
    void purgeTimer() -> a
    void purgeStateTimer() -> b
    void cancelTimer() -> c
    void cancelStateTimer() -> d
    void startProber() -> e
    void startAnnouncer() -> f
    void startRenewer() -> g
    void startCanceler() -> h
    void startReaper() -> i
    void startServiceInfoResolver(javax.jmdns.impl.ServiceInfoImpl) -> a
    void startServiceResolver(java.lang.String) -> b
    void startResponder(javax.jmdns.impl.DNSIncoming,int) -> a
javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer -> b.a.a.ah:
    boolean _cancelled -> a
    void cancel() -> cancel
    void schedule(java.util.TimerTask,long) -> schedule
    void schedule(java.util.TimerTask,java.util.Date) -> schedule
    void schedule(java.util.TimerTask,long,long) -> schedule
    void schedule(java.util.TimerTask,java.util.Date,long) -> schedule
    void scheduleAtFixedRate(java.util.TimerTask,long,long) -> scheduleAtFixedRate
    void scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long) -> scheduleAtFixedRate
javax.jmdns.impl.DNSTaskStarter$Factory -> b.a.a.ai:
    javax.jmdns.impl.DNSTaskStarter$Factory _instance -> a
    java.util.concurrent.ConcurrentMap _instances -> b
    java.util.concurrent.atomic.AtomicReference _databaseClassDelegate -> c
    javax.jmdns.impl.DNSTaskStarter newDNSTaskStarter(javax.jmdns.impl.JmDNSImpl) -> a
    javax.jmdns.impl.DNSTaskStarter$Factory getInstance() -> a
    javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl) -> b
javax.jmdns.impl.DNSTaskStarter$Factory$ClassDelegate -> b.a.a.aj:
    javax.jmdns.impl.DNSTaskStarter newDNSTaskStarter(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.HostInfo -> b.a.a.ak:
    java.util.logging.Logger logger -> d
    java.lang.String _name -> a
    java.net.InetAddress _address -> b
    java.net.NetworkInterface _interfaze -> c
    javax.jmdns.impl.HostInfo$HostInfoState _state -> e
    int hostNameCount -> f
    javax.jmdns.impl.HostInfo newHostInfo(java.net.InetAddress,javax.jmdns.impl.JmDNSImpl,java.lang.String) -> a
    java.net.InetAddress loopbackAddress() -> q
    java.lang.String getName() -> a
    java.net.InetAddress getInetAddress() -> b
    java.net.Inet4Address getInet4Address() -> c
    java.net.Inet6Address getInet6Address() -> d
    java.net.NetworkInterface getInterface() -> e
    boolean conflictWithRecord(javax.jmdns.impl.DNSRecord$Address) -> a
    java.lang.String incrementHostName() -> f
    boolean shouldIgnorePacket(java.net.DatagramPacket) -> a
    javax.jmdns.impl.DNSRecord$Address getDNSAddressRecord(javax.jmdns.impl.constants.DNSRecordType,boolean,int) -> a
    javax.jmdns.impl.DNSRecord$Address getDNS4AddressRecord(boolean,int) -> a
    javax.jmdns.impl.DNSRecord$Address getDNS6AddressRecord(boolean,int) -> b
    javax.jmdns.impl.DNSRecord$Pointer getDNSReverseAddressRecord(javax.jmdns.impl.constants.DNSRecordType,boolean,int) -> b
    javax.jmdns.impl.DNSRecord$Pointer getDNS4ReverseAddressRecord(boolean,int) -> c
    javax.jmdns.impl.DNSRecord$Pointer getDNS6ReverseAddressRecord(boolean,int) -> d
    java.lang.String toString() -> toString
    java.util.Collection answers(javax.jmdns.impl.constants.DNSRecordClass,boolean,int) -> a
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
    void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask) -> b
    boolean revertState() -> g
    void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> a
    boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> b
    boolean cancelState() -> h
    boolean closeState() -> i
    boolean recoverState() -> j
    boolean isProbing() -> k
    boolean isAnnounced() -> l
    boolean isCanceling() -> m
    boolean isCanceled() -> n
    boolean isClosing() -> o
    boolean isClosed() -> p
    boolean waitForAnnounced(long) -> a
    boolean waitForCanceled(long) -> b
javax.jmdns.impl.HostInfo$1 -> b.a.a.al:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType -> a
javax.jmdns.impl.HostInfo$HostInfoState -> b.a.a.am:
javax.jmdns.impl.JmDNSImpl -> b.a.a.an:
    java.util.logging.Logger logger -> b
    java.net.InetAddress _group -> c
    java.net.MulticastSocket _socket -> d
    java.util.List _listeners -> e
    java.util.concurrent.ConcurrentMap _serviceListeners -> f
    java.util.Set _typeListeners -> g
    javax.jmdns.impl.DNSCache _cache -> h
    java.util.concurrent.ConcurrentMap _services -> i
    java.util.concurrent.ConcurrentMap _serviceTypes -> j
    javax.jmdns.JmDNS$Delegate _delegate -> k
    java.lang.Thread _shutdown -> a
    javax.jmdns.impl.HostInfo _localHost -> l
    java.lang.Thread _incomingListener -> m
    int _throttle -> n
    long _lastThrottleIncrement -> o
    java.util.concurrent.ExecutorService _executor -> p
    java.util.Random _random -> q
    java.util.concurrent.locks.ReentrantLock _ioLock -> r
    javax.jmdns.impl.DNSIncoming _plannedAnswer -> s
    java.util.concurrent.ConcurrentMap _serviceCollectors -> t
    java.lang.String _name -> u
    java.lang.Object _recoverLock -> v
    void start(java.util.Collection) -> a
    void openMulticastSocket(javax.jmdns.impl.HostInfo) -> a
    void closeMulticastSocket() -> M
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
    boolean revertState() -> j
    boolean cancelState() -> k
    boolean closeState() -> l
    boolean recoverState() -> m
    javax.jmdns.impl.JmDNSImpl getDns() -> n
    void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> a
    void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask) -> b
    boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> b
    boolean isProbing() -> o
    boolean isAnnounced() -> p
    boolean isCanceling() -> q
    boolean isCanceled() -> r
    boolean isClosing() -> s
    boolean isClosed() -> t
    boolean waitForAnnounced(long) -> a
    boolean waitForCanceled(long) -> b
    javax.jmdns.impl.DNSCache getCache() -> u
    java.lang.String getName() -> v
    javax.jmdns.impl.HostInfo getLocalHost() -> w
    java.net.InetAddress getInetAddress() -> x
    javax.jmdns.impl.ServiceInfoImpl resolveServiceInfo(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    javax.jmdns.impl.ServiceInfoImpl getServiceInfoFromCache(java.lang.String,java.lang.String,java.lang.String,boolean) -> b
    void handleServiceResolved(javax.jmdns.ServiceEvent) -> a
    void addServiceListener(java.lang.String,javax.jmdns.ServiceListener,boolean) -> a
    void removeServiceListener(java.lang.String,javax.jmdns.ServiceListener) -> a
    void registerService(javax.jmdns.ServiceInfo) -> a
    void unregisterAllServices() -> y
    boolean registerServiceType(java.lang.String) -> c
    boolean makeServiceNameUnique(javax.jmdns.impl.ServiceInfoImpl) -> b
    java.lang.String incrementName(java.lang.String) -> d
    void addListener(javax.jmdns.impl.DNSListener,javax.jmdns.impl.DNSQuestion) -> a
    void removeListener(javax.jmdns.impl.DNSListener) -> a
    void renewServiceCollector(javax.jmdns.impl.DNSRecord) -> a
    void updateRecord(long,javax.jmdns.impl.DNSRecord,javax.jmdns.impl.JmDNSImpl$Operation) -> a
    void handleRecord(javax.jmdns.impl.DNSRecord,long) -> a
    void handleResponse(javax.jmdns.impl.DNSIncoming) -> a
    void handleQuery(javax.jmdns.impl.DNSIncoming,java.net.InetAddress,int) -> a
    void respondToQuery(javax.jmdns.impl.DNSIncoming) -> b
    void send(javax.jmdns.impl.DNSOutgoing) -> a
    void purgeTimer() -> a
    void purgeStateTimer() -> b
    void cancelTimer() -> c
    void cancelStateTimer() -> d
    void startProber() -> e
    void startAnnouncer() -> f
    void startRenewer() -> g
    void startCanceler() -> h
    void startReaper() -> i
    void startServiceInfoResolver(javax.jmdns.impl.ServiceInfoImpl) -> a
    void startServiceResolver(java.lang.String) -> b
    void startResponder(javax.jmdns.impl.DNSIncoming,int) -> a
    void recover() -> z
    void __recover() -> A
    void cleanCache() -> B
    void close() -> close
    java.lang.String toString() -> toString
    javax.jmdns.ServiceInfo[] list(java.lang.String) -> a
    javax.jmdns.ServiceInfo[] list(java.lang.String,long) -> a
    void disposeServiceCollectors() -> N
    java.lang.String toUnqualifiedName(java.lang.String,java.lang.String) -> a
    java.util.Map getServices() -> C
    void setLastThrottleIncrement(long) -> c
    long getLastThrottleIncrement() -> D
    void setThrottle(int) -> a
    int getThrottle() -> E
    java.util.Random getRandom() -> F
    void ioLock() -> G
    void ioUnlock() -> H
    java.util.Map getServiceTypes() -> I
    java.net.MulticastSocket getSocket() -> J
    java.net.InetAddress getGroup() -> K
    javax.jmdns.JmDNS$Delegate getDelegate() -> L
javax.jmdns.impl.JmDNSImpl$1 -> b.a.a.ao:
    javax.jmdns.impl.ListenerStatus$ServiceListenerStatus val$listener -> a
    javax.jmdns.ServiceEvent val$localEvent -> b
    javax.jmdns.impl.JmDNSImpl this$0 -> c
    void run() -> run
javax.jmdns.impl.JmDNSImpl$2 -> b.a.a.ap:
    javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus val$status -> a
    javax.jmdns.ServiceEvent val$event -> b
    javax.jmdns.impl.JmDNSImpl this$0 -> c
    void run() -> run
javax.jmdns.impl.JmDNSImpl$3 -> b.a.a.aq:
    javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus val$status -> a
    javax.jmdns.ServiceEvent val$event -> b
    javax.jmdns.impl.JmDNSImpl this$0 -> c
    void run() -> run
javax.jmdns.impl.JmDNSImpl$4 -> b.a.a.ar:
    javax.jmdns.impl.ListenerStatus$ServiceListenerStatus val$listener -> a
    javax.jmdns.ServiceEvent val$localEvent -> b
    javax.jmdns.impl.JmDNSImpl this$0 -> c
    void run() -> run
javax.jmdns.impl.JmDNSImpl$5 -> b.a.a.as:
    javax.jmdns.impl.ListenerStatus$ServiceListenerStatus val$listener -> a
    javax.jmdns.ServiceEvent val$localEvent -> b
    javax.jmdns.impl.JmDNSImpl this$0 -> c
    void run() -> run
javax.jmdns.impl.JmDNSImpl$6 -> b.a.a.at:
    javax.jmdns.impl.JmDNSImpl this$0 -> a
    void run() -> run
javax.jmdns.impl.JmDNSImpl$7 -> b.a.a.au:
    int[] $SwitchMap$javax$jmdns$impl$JmDNSImpl$Operation -> a
javax.jmdns.impl.JmDNSImpl$Operation -> b.a.a.av:
    javax.jmdns.impl.JmDNSImpl$Operation Remove -> a
    javax.jmdns.impl.JmDNSImpl$Operation Update -> b
    javax.jmdns.impl.JmDNSImpl$Operation Add -> c
    javax.jmdns.impl.JmDNSImpl$Operation RegisterServiceType -> d
    javax.jmdns.impl.JmDNSImpl$Operation Noop -> e
    javax.jmdns.impl.JmDNSImpl$Operation[] $VALUES -> f
    javax.jmdns.impl.JmDNSImpl$Operation[] values() -> values
    javax.jmdns.impl.JmDNSImpl$Operation valueOf(java.lang.String) -> valueOf
javax.jmdns.impl.JmDNSImpl$ServiceCollector -> b.a.a.aw:
    java.util.concurrent.ConcurrentMap _infos -> a
    java.util.concurrent.ConcurrentMap _events -> b
    java.lang.String _type -> c
    boolean _needToWaitForInfos -> d
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
    javax.jmdns.ServiceInfo[] list(long) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry -> b.a.a.ax:
    java.util.Set _entrySet -> a
    java.lang.String _type -> b
    java.lang.String getType() -> a
    java.util.Set entrySet() -> entrySet
    boolean contains(java.lang.String) -> a
    boolean add(java.lang.String) -> b
    javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry clone() -> b
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry$SubTypeEntry -> b.a.a.ay:
    java.lang.String _key -> a
    java.lang.String _value -> b
    java.lang.String getKey() -> a
    java.lang.String getValue() -> b
    java.lang.String setValue(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry$SubTypeEntry clone() -> c
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
javax.jmdns.impl.ListenerStatus -> b.a.a.az:
    java.util.EventListener _listener -> a
    boolean _synch -> b
    java.util.EventListener getListener() -> a
    boolean isSynchronous() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
javax.jmdns.impl.ListenerStatus$ServiceListenerStatus -> b.a.a.ba:
    java.util.logging.Logger logger -> a
    java.util.concurrent.ConcurrentMap _addedServices -> b
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
    boolean _sameInfo(javax.jmdns.ServiceInfo,javax.jmdns.ServiceInfo) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus -> b.a.a.bb:
    java.util.logging.Logger logger -> a
    java.util.concurrent.ConcurrentMap _addedTypes -> b
    void serviceTypeAdded(javax.jmdns.ServiceEvent) -> a
    void subTypeForServiceTypeAdded(javax.jmdns.ServiceEvent) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.NetworkTopologyDiscoveryImpl -> b.a.a.bc:
    java.util.logging.Logger logger -> a
    java.lang.reflect.Method _isUp -> b
    java.lang.reflect.Method _supportsMulticast -> c
    java.net.InetAddress[] getInetAddresses() -> a
    boolean useInetAddress(java.net.NetworkInterface,java.net.InetAddress) -> a
javax.jmdns.impl.ServiceEventImpl -> b.a.a.bd:
    java.lang.String _type -> a
    java.lang.String _name -> b
    javax.jmdns.ServiceInfo _info -> c
    javax.jmdns.JmDNS getDNS() -> a
    java.lang.String getType() -> b
    java.lang.String getName() -> c
    java.lang.String toString() -> toString
    javax.jmdns.ServiceInfo getInfo() -> d
    javax.jmdns.impl.ServiceEventImpl clone() -> f
    javax.jmdns.ServiceEvent clone() -> e
    java.lang.Object clone() -> clone
javax.jmdns.impl.ServiceInfoImpl -> b.a.a.be:
    java.util.logging.Logger logger -> b
    java.lang.String _domain -> c
    java.lang.String _protocol -> d
    java.lang.String _application -> e
    java.lang.String _name -> f
    java.lang.String _subtype -> g
    java.lang.String _server -> h
    int _port -> i
    int _weight -> j
    int _priority -> k
    byte[] _text -> l
    java.util.Map _props -> m
    java.util.Set _ipv4Addresses -> n
    java.util.Set _ipv6Addresses -> o
    java.lang.String _key -> p
    boolean _persistent -> q
    boolean _needTextAnnouncing -> r
    javax.jmdns.impl.ServiceInfoImpl$ServiceInfoState _state -> s
    java.util.Map decodeQualifiedNameMap(java.lang.String,java.lang.String,java.lang.String) -> a
    java.util.Map decodeQualifiedNameMapForType(java.lang.String) -> a
    java.util.Map checkQualifiedNameMap(java.util.Map) -> a
    java.lang.String removeSeparators(java.lang.String) -> f
    java.lang.String getType() -> b
    java.lang.String getTypeWithSubtype() -> s
    java.lang.String getName() -> c
    java.lang.String getKey() -> t
    void setName(java.lang.String) -> b
    java.lang.String getQualifiedName() -> d
    java.lang.String getServer() -> e
    void setServer(java.lang.String) -> c
    void addAddress(java.net.Inet4Address) -> a
    void addAddress(java.net.Inet6Address) -> a
    java.net.InetAddress[] getInetAddresses() -> u
    java.net.Inet4Address[] getInet4Addresses() -> f
    java.net.Inet6Address[] getInet6Addresses() -> g
    int getPort() -> h
    int getPriority() -> i
    int getWeight() -> j
    byte[] getTextBytes() -> k
    java.lang.String[] getURLs() -> l
    java.lang.String[] getURLs(java.lang.String) -> d
    java.lang.String getPropertyString(java.lang.String) -> e
    java.lang.String getApplication() -> p
    java.lang.String getDomain() -> n
    java.lang.String getProtocol() -> o
    java.lang.String getSubtype() -> q
    java.util.Map getQualifiedNameMap() -> v
    void writeUTF(java.io.OutputStream,java.lang.String) -> a
    java.lang.String readUTF(byte[],int,int) -> a
    java.util.Map getProperties() -> w
    void updateRecord(javax.jmdns.impl.DNSCache,long,javax.jmdns.impl.DNSEntry) -> a
    boolean hasData() -> a
    boolean hasInetAddress() -> G
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
    boolean revertState() -> x
    boolean cancelState() -> y
    boolean recoverState() -> z
    void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask) -> b
    void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> a
    boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> b
    boolean isProbing() -> A
    boolean isAnnouncing() -> B
    boolean isAnnounced() -> C
    boolean waitForAnnounced(long) -> a
    boolean waitForCanceled(long) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    javax.jmdns.impl.ServiceInfoImpl clone() -> D
    java.lang.String toString() -> toString
    java.util.Collection answers(javax.jmdns.impl.constants.DNSRecordClass,boolean,int,javax.jmdns.impl.HostInfo) -> a
    void _setText(byte[]) -> a
    byte[] textFromProperties(java.util.Map) -> b
    void setDns(javax.jmdns.impl.JmDNSImpl) -> a
    javax.jmdns.impl.JmDNSImpl getDns() -> E
    boolean isPersistent() -> m
    void setNeedTextAnnouncing(boolean) -> a
    boolean needTextAnnouncing() -> F
    javax.jmdns.ServiceInfo clone() -> r
    java.lang.Object clone() -> clone
javax.jmdns.impl.ServiceInfoImpl$1 -> b.a.a.bf:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType -> a
javax.jmdns.impl.ServiceInfoImpl$ServiceInfoState -> b.a.a.bg:
    javax.jmdns.impl.ServiceInfoImpl _info -> c
    void setTask(javax.jmdns.impl.tasks.DNSTask) -> c
    void setDns(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.SocketListener -> b.a.a.bh:
    java.util.logging.Logger logger -> a
    javax.jmdns.impl.JmDNSImpl _jmDNSImpl -> b
    void run() -> run
javax.jmdns.impl.constants.DNSConstants -> b.a.a.a.a:
    int MDNS_PORT -> a
javax.jmdns.impl.constants.DNSLabel -> b.a.a.a.b:
    javax.jmdns.impl.constants.DNSLabel Unknown -> a
    javax.jmdns.impl.constants.DNSLabel Standard -> b
    javax.jmdns.impl.constants.DNSLabel Compressed -> c
    javax.jmdns.impl.constants.DNSLabel Extended -> d
    java.lang.String _externalName -> e
    int _index -> f
    javax.jmdns.impl.constants.DNSLabel[] $VALUES -> g
    javax.jmdns.impl.constants.DNSLabel[] values() -> values
    javax.jmdns.impl.constants.DNSLabel valueOf(java.lang.String) -> valueOf
    int indexValue() -> a
    javax.jmdns.impl.constants.DNSLabel labelForByte(int) -> a
    int labelValue(int) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSOptionCode -> b.a.a.a.c:
    javax.jmdns.impl.constants.DNSOptionCode Unknown -> a
    javax.jmdns.impl.constants.DNSOptionCode LLQ -> b
    javax.jmdns.impl.constants.DNSOptionCode UL -> c
    javax.jmdns.impl.constants.DNSOptionCode NSID -> d
    javax.jmdns.impl.constants.DNSOptionCode Owner -> e
    java.lang.String _externalName -> f
    int _index -> g
    javax.jmdns.impl.constants.DNSOptionCode[] $VALUES -> h
    javax.jmdns.impl.constants.DNSOptionCode[] values() -> values
    javax.jmdns.impl.constants.DNSOptionCode valueOf(java.lang.String) -> valueOf
    int indexValue() -> a
    javax.jmdns.impl.constants.DNSOptionCode resultCodeForFlags(int) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSRecordClass -> b.a.a.a.d:
    javax.jmdns.impl.constants.DNSRecordClass CLASS_UNKNOWN -> a
    javax.jmdns.impl.constants.DNSRecordClass CLASS_IN -> b
    javax.jmdns.impl.constants.DNSRecordClass CLASS_CS -> c
    javax.jmdns.impl.constants.DNSRecordClass CLASS_CH -> d
    javax.jmdns.impl.constants.DNSRecordClass CLASS_HS -> e
    javax.jmdns.impl.constants.DNSRecordClass CLASS_NONE -> f
    javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY -> g
    java.util.logging.Logger logger -> h
    java.lang.String _externalName -> i
    int _index -> j
    javax.jmdns.impl.constants.DNSRecordClass[] $VALUES -> k
    javax.jmdns.impl.constants.DNSRecordClass[] values() -> values
    javax.jmdns.impl.constants.DNSRecordClass valueOf(java.lang.String) -> valueOf
    int indexValue() -> a
    boolean isUnique(int) -> a
    javax.jmdns.impl.constants.DNSRecordClass classForIndex(int) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSRecordType -> b.a.a.a.e:
    javax.jmdns.impl.constants.DNSRecordType TYPE_IGNORE -> a
    javax.jmdns.impl.constants.DNSRecordType TYPE_A -> b
    javax.jmdns.impl.constants.DNSRecordType TYPE_NS -> c
    javax.jmdns.impl.constants.DNSRecordType TYPE_MD -> d
    javax.jmdns.impl.constants.DNSRecordType TYPE_MF -> e
    javax.jmdns.impl.constants.DNSRecordType TYPE_CNAME -> f
    javax.jmdns.impl.constants.DNSRecordType TYPE_SOA -> g
    javax.jmdns.impl.constants.DNSRecordType TYPE_MB -> h
    javax.jmdns.impl.constants.DNSRecordType TYPE_MG -> i
    javax.jmdns.impl.constants.DNSRecordType TYPE_MR -> j
    javax.jmdns.impl.constants.DNSRecordType TYPE_NULL -> k
    javax.jmdns.impl.constants.DNSRecordType TYPE_WKS -> l
    javax.jmdns.impl.constants.DNSRecordType TYPE_PTR -> m
    javax.jmdns.impl.constants.DNSRecordType TYPE_HINFO -> n
    javax.jmdns.impl.constants.DNSRecordType TYPE_MINFO -> o
    javax.jmdns.impl.constants.DNSRecordType TYPE_MX -> p
    javax.jmdns.impl.constants.DNSRecordType TYPE_TXT -> q
    javax.jmdns.impl.constants.DNSRecordType TYPE_RP -> r
    javax.jmdns.impl.constants.DNSRecordType TYPE_AFSDB -> s
    javax.jmdns.impl.constants.DNSRecordType TYPE_X25 -> t
    javax.jmdns.impl.constants.DNSRecordType TYPE_ISDN -> u
    javax.jmdns.impl.constants.DNSRecordType TYPE_RT -> v
    javax.jmdns.impl.constants.DNSRecordType TYPE_NSAP -> w
    javax.jmdns.impl.constants.DNSRecordType TYPE_NSAP_PTR -> x
    javax.jmdns.impl.constants.DNSRecordType TYPE_SIG -> y
    javax.jmdns.impl.constants.DNSRecordType TYPE_KEY -> z
    javax.jmdns.impl.constants.DNSRecordType TYPE_PX -> A
    javax.jmdns.impl.constants.DNSRecordType TYPE_GPOS -> B
    javax.jmdns.impl.constants.DNSRecordType TYPE_AAAA -> C
    javax.jmdns.impl.constants.DNSRecordType TYPE_LOC -> D
    javax.jmdns.impl.constants.DNSRecordType TYPE_NXT -> E
    javax.jmdns.impl.constants.DNSRecordType TYPE_EID -> F
    javax.jmdns.impl.constants.DNSRecordType TYPE_NIMLOC -> G
    javax.jmdns.impl.constants.DNSRecordType TYPE_SRV -> H
    javax.jmdns.impl.constants.DNSRecordType TYPE_ATMA -> I
    javax.jmdns.impl.constants.DNSRecordType TYPE_NAPTR -> J
    javax.jmdns.impl.constants.DNSRecordType TYPE_KX -> K
    javax.jmdns.impl.constants.DNSRecordType TYPE_CERT -> L
    javax.jmdns.impl.constants.DNSRecordType TYPE_A6 -> M
    javax.jmdns.impl.constants.DNSRecordType TYPE_DNAME -> N
    javax.jmdns.impl.constants.DNSRecordType TYPE_SINK -> O
    javax.jmdns.impl.constants.DNSRecordType TYPE_OPT -> P
    javax.jmdns.impl.constants.DNSRecordType TYPE_APL -> Q
    javax.jmdns.impl.constants.DNSRecordType TYPE_DS -> R
    javax.jmdns.impl.constants.DNSRecordType TYPE_SSHFP -> S
    javax.jmdns.impl.constants.DNSRecordType TYPE_RRSIG -> T
    javax.jmdns.impl.constants.DNSRecordType TYPE_NSEC -> U
    javax.jmdns.impl.constants.DNSRecordType TYPE_DNSKEY -> V
    javax.jmdns.impl.constants.DNSRecordType TYPE_UINFO -> W
    javax.jmdns.impl.constants.DNSRecordType TYPE_UID -> X
    javax.jmdns.impl.constants.DNSRecordType TYPE_GID -> Y
    javax.jmdns.impl.constants.DNSRecordType TYPE_UNSPEC -> Z
    javax.jmdns.impl.constants.DNSRecordType TYPE_TKEY -> aa
    javax.jmdns.impl.constants.DNSRecordType TYPE_TSIG -> ab
    javax.jmdns.impl.constants.DNSRecordType TYPE_IXFR -> ac
    javax.jmdns.impl.constants.DNSRecordType TYPE_AXFR -> ad
    javax.jmdns.impl.constants.DNSRecordType TYPE_MAILA -> ae
    javax.jmdns.impl.constants.DNSRecordType TYPE_MAILB -> af
    javax.jmdns.impl.constants.DNSRecordType TYPE_ANY -> ag
    java.util.logging.Logger logger -> ah
    java.lang.String _externalName -> ai
    int _index -> aj
    javax.jmdns.impl.constants.DNSRecordType[] $VALUES -> ak
    javax.jmdns.impl.constants.DNSRecordType[] values() -> values
    javax.jmdns.impl.constants.DNSRecordType valueOf(java.lang.String) -> valueOf
    int indexValue() -> a
    javax.jmdns.impl.constants.DNSRecordType typeForIndex(int) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSResultCode -> b.a.a.a.f:
    javax.jmdns.impl.constants.DNSResultCode Unknown -> a
    javax.jmdns.impl.constants.DNSResultCode NoError -> b
    javax.jmdns.impl.constants.DNSResultCode FormErr -> c
    javax.jmdns.impl.constants.DNSResultCode ServFail -> d
    javax.jmdns.impl.constants.DNSResultCode NXDomain -> e
    javax.jmdns.impl.constants.DNSResultCode NotImp -> f
    javax.jmdns.impl.constants.DNSResultCode Refused -> g
    javax.jmdns.impl.constants.DNSResultCode YXDomain -> h
    javax.jmdns.impl.constants.DNSResultCode YXRRSet -> i
    javax.jmdns.impl.constants.DNSResultCode NXRRSet -> j
    javax.jmdns.impl.constants.DNSResultCode NotAuth -> k
    javax.jmdns.impl.constants.DNSResultCode NotZone -> l
    java.lang.String _externalName -> m
    int _index -> n
    javax.jmdns.impl.constants.DNSResultCode[] $VALUES -> o
    javax.jmdns.impl.constants.DNSResultCode[] values() -> values
    javax.jmdns.impl.constants.DNSResultCode valueOf(java.lang.String) -> valueOf
    int indexValue() -> a
    javax.jmdns.impl.constants.DNSResultCode resultCodeForFlags(int,int) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSState -> b.a.a.a.g:
    javax.jmdns.impl.constants.DNSState PROBING_1 -> a
    javax.jmdns.impl.constants.DNSState PROBING_2 -> b
    javax.jmdns.impl.constants.DNSState PROBING_3 -> c
    javax.jmdns.impl.constants.DNSState ANNOUNCING_1 -> d
    javax.jmdns.impl.constants.DNSState ANNOUNCING_2 -> e
    javax.jmdns.impl.constants.DNSState ANNOUNCED -> f
    javax.jmdns.impl.constants.DNSState CANCELING_1 -> g
    javax.jmdns.impl.constants.DNSState CANCELING_2 -> h
    javax.jmdns.impl.constants.DNSState CANCELING_3 -> i
    javax.jmdns.impl.constants.DNSState CANCELED -> j
    javax.jmdns.impl.constants.DNSState CLOSING -> k
    javax.jmdns.impl.constants.DNSState CLOSED -> l
    java.lang.String _name -> m
    javax.jmdns.impl.constants.DNSState$StateClass _state -> n
    javax.jmdns.impl.constants.DNSState[] $VALUES -> o
    javax.jmdns.impl.constants.DNSState[] values() -> values
    javax.jmdns.impl.constants.DNSState valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    javax.jmdns.impl.constants.DNSState advance() -> a
    javax.jmdns.impl.constants.DNSState revert() -> b
    boolean isProbing() -> c
    boolean isAnnouncing() -> d
    boolean isAnnounced() -> e
    boolean isCanceling() -> f
    boolean isCanceled() -> g
    boolean isClosing() -> h
    boolean isClosed() -> i
javax.jmdns.impl.constants.DNSState$1 -> b.a.a.a.h:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSState -> a
javax.jmdns.impl.constants.DNSState$StateClass -> b.a.a.a.i:
    javax.jmdns.impl.constants.DNSState$StateClass probing -> a
    javax.jmdns.impl.constants.DNSState$StateClass announcing -> b
    javax.jmdns.impl.constants.DNSState$StateClass announced -> c
    javax.jmdns.impl.constants.DNSState$StateClass canceling -> d
    javax.jmdns.impl.constants.DNSState$StateClass canceled -> e
    javax.jmdns.impl.constants.DNSState$StateClass closing -> f
    javax.jmdns.impl.constants.DNSState$StateClass closed -> g
    javax.jmdns.impl.constants.DNSState$StateClass[] $VALUES -> h
    javax.jmdns.impl.constants.DNSState$StateClass[] values() -> values
    javax.jmdns.impl.constants.DNSState$StateClass valueOf(java.lang.String) -> valueOf
javax.jmdns.impl.tasks.DNSTask -> b.a.a.b.a:
    javax.jmdns.impl.JmDNSImpl _jmDNSImpl -> a
    javax.jmdns.impl.JmDNSImpl getDns() -> a
    java.lang.String getName() -> b
    java.lang.String toString() -> toString
    javax.jmdns.impl.DNSOutgoing addQuestion(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSQuestion) -> a
    javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord) -> a
    javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSRecord,long) -> a
    javax.jmdns.impl.DNSOutgoing addAuthoritativeAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSRecord) -> a
javax.jmdns.impl.tasks.RecordReaper -> b.a.a.b.b:
    java.util.logging.Logger logger -> a
    java.lang.String getName() -> b
    void start(java.util.Timer) -> a
    void run() -> run
javax.jmdns.impl.tasks.Responder -> b.a.a.b.c:
    java.util.logging.Logger logger -> a
    javax.jmdns.impl.DNSIncoming _in -> b
    boolean _unicast -> c
    java.lang.String getName() -> b
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    void run() -> run
javax.jmdns.impl.tasks.resolver.DNSResolverTask -> b.a.a.b.a.a:
    java.util.logging.Logger logger -> b
    int _count -> a
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    void run() -> run
    javax.jmdns.impl.DNSOutgoing addQuestions(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing addAnswers(javax.jmdns.impl.DNSOutgoing) -> b
    java.lang.String description() -> c
javax.jmdns.impl.tasks.resolver.ServiceInfoResolver -> b.a.a.b.a.b:
    javax.jmdns.impl.ServiceInfoImpl _info -> b
    java.lang.String getName() -> b
    boolean cancel() -> cancel
    javax.jmdns.impl.DNSOutgoing addAnswers(javax.jmdns.impl.DNSOutgoing) -> b
    javax.jmdns.impl.DNSOutgoing addQuestions(javax.jmdns.impl.DNSOutgoing) -> a
    java.lang.String description() -> c
javax.jmdns.impl.tasks.resolver.ServiceResolver -> b.a.a.b.a.c:
    java.lang.String _type -> b
    java.lang.String getName() -> b
    javax.jmdns.impl.DNSOutgoing addAnswers(javax.jmdns.impl.DNSOutgoing) -> b
    javax.jmdns.impl.DNSOutgoing addQuestions(javax.jmdns.impl.DNSOutgoing) -> a
    java.lang.String description() -> c
javax.jmdns.impl.tasks.state.Announcer -> b.a.a.b.b.a:
    java.util.logging.Logger logger -> a
    java.lang.String getName() -> b
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    java.lang.String getTaskDescription() -> c
    boolean checkRunCondition() -> d
    javax.jmdns.impl.DNSOutgoing createOugoing() -> e
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    void recoverTask(java.lang.Throwable) -> a
    void advanceTask() -> f
javax.jmdns.impl.tasks.state.Canceler -> b.a.a.b.b.b:
    java.util.logging.Logger logger -> a
    java.lang.String getName() -> b
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    java.lang.String getTaskDescription() -> c
    boolean checkRunCondition() -> d
    javax.jmdns.impl.DNSOutgoing createOugoing() -> e
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    void recoverTask(java.lang.Throwable) -> a
    void advanceTask() -> f
javax.jmdns.impl.tasks.state.DNSStateTask -> b.a.a.b.b.c:
    java.util.logging.Logger logger1 -> b
    int _ttl -> a
    int _defaultTTL -> c
    javax.jmdns.impl.constants.DNSState _taskState -> d
    java.lang.String getTaskDescription() -> c
    int defaultTTL() -> g
    int getTTL() -> h
    void associate(javax.jmdns.impl.constants.DNSState) -> a
    void removeAssociation() -> i
    void run() -> run
    boolean checkRunCondition() -> d
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing createOugoing() -> e
    void advanceObjectsState(java.util.List) -> a
    void recoverTask(java.lang.Throwable) -> a
    void advanceTask() -> f
    javax.jmdns.impl.constants.DNSState getTaskState() -> j
    void setTaskState(javax.jmdns.impl.constants.DNSState) -> b
javax.jmdns.impl.tasks.state.Prober -> b.a.a.b.b.d:
    java.util.logging.Logger logger -> a
    java.lang.String getName() -> b
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    java.lang.String getTaskDescription() -> c
    boolean checkRunCondition() -> d
    javax.jmdns.impl.DNSOutgoing createOugoing() -> e
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    void recoverTask(java.lang.Throwable) -> a
    void advanceTask() -> f
javax.jmdns.impl.tasks.state.Renewer -> b.a.a.b.b.e:
    java.util.logging.Logger logger -> a
    java.lang.String getName() -> b
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    java.lang.String getTaskDescription() -> c
    boolean checkRunCondition() -> d
    javax.jmdns.impl.DNSOutgoing createOugoing() -> e
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    void recoverTask(java.lang.Throwable) -> a
    void advanceTask() -> f
net.lingala.zip4j.core.HeaderReader -> c.a.a.a.a:
    java.io.RandomAccessFile zip4jRaf -> a
    net.lingala.zip4j.model.ZipModel zipModel -> b
    net.lingala.zip4j.model.ZipModel readAllHeaders() -> a
    net.lingala.zip4j.model.EndCentralDirRecord readEndOfCentralDirectoryRecord() -> b
    net.lingala.zip4j.model.CentralDirectory readCentralDirectory() -> c
    void readAndSaveExtraDataRecord(net.lingala.zip4j.model.FileHeader) -> b
    void readAndSaveExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader) -> a
    java.util.ArrayList readExtraDataRecords(int) -> a
    net.lingala.zip4j.model.Zip64EndCentralDirLocator readZip64EndCentralDirLocator() -> d
    net.lingala.zip4j.model.Zip64EndCentralDirRecord readZip64EndCentralDirRec() -> e
    void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.FileHeader) -> c
    void readAndSaveZip64ExtendedInfo(net.lingala.zip4j.model.LocalFileHeader) -> b
    net.lingala.zip4j.model.Zip64ExtendedInfo readZip64ExtendedInfo(java.util.ArrayList,long,long,long,int) -> a
    void setFilePointerToReadZip64EndCentralDirLoc() -> f
    net.lingala.zip4j.model.LocalFileHeader readLocalFileHeader(net.lingala.zip4j.model.FileHeader) -> a
    void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.FileHeader) -> d
    void readAndSaveAESExtraDataRecord(net.lingala.zip4j.model.LocalFileHeader) -> c
    net.lingala.zip4j.model.AESExtraDataRecord readAESExtraDataRecord(java.util.ArrayList) -> a
    byte[] readIntoBuff(java.io.RandomAccessFile,byte[]) -> a
    byte[] getLongByteFromIntByte(byte[]) -> a
net.lingala.zip4j.core.ZipFile -> c.a.a.a.b:
    java.lang.String file -> a
    int mode -> b
    net.lingala.zip4j.model.ZipModel zipModel -> c
    boolean isEncrypted -> d
    boolean isSplitEligible -> e
    net.lingala.zip4j.progress.ProgressMonitor progressMonitor -> f
    boolean runInThread -> g
    void readZipInfo() -> c
    void extractFile(net.lingala.zip4j.model.FileHeader,java.lang.String) -> a
    void extractFile(net.lingala.zip4j.model.FileHeader,java.lang.String,net.lingala.zip4j.model.UnzipParameters) -> a
    void extractFile(net.lingala.zip4j.model.FileHeader,java.lang.String,net.lingala.zip4j.model.UnzipParameters,java.lang.String) -> a
    void setPassword(java.lang.String) -> a
    java.util.List getFileHeaders() -> a
    boolean isEncrypted() -> b
net.lingala.zip4j.crypto.AESDecrypter -> c.a.a.b.a:
    net.lingala.zip4j.model.LocalFileHeader localFileHeader -> a
    net.lingala.zip4j.crypto.engine.AESEngine aesEngine -> b
    net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF mac -> c
    int PASSWORD_VERIFIER_LENGTH -> d
    int KEY_LENGTH -> e
    int MAC_LENGTH -> f
    int SALT_LENGTH -> g
    byte[] aesKey -> h
    byte[] macKey -> i
    byte[] derivedPasswordVerifier -> j
    byte[] storedMac -> k
    int nonce -> l
    void init(byte[],byte[]) -> a
    int decryptData(byte[],int,int) -> a
    byte[] deriveKey(byte[],java.lang.String) -> a
    int getPasswordVerifierLength() -> a
    int getSaltLength() -> b
    byte[] getCalculatedAuthenticationBytes() -> c
    void setStoredMac(byte[]) -> a
    byte[] getStoredMac() -> d
net.lingala.zip4j.crypto.IDecrypter -> c.a.a.b.b:
    int decryptData(byte[],int,int) -> a
net.lingala.zip4j.crypto.PBKDF2.MacBasedPRF -> c.a.a.b.a.a:
    javax.crypto.Mac mac -> a
    int hLen -> b
    java.lang.String macAlgorithm -> c
    byte[] doFinal(byte[]) -> a
    byte[] doFinal() -> a
    int getHLen() -> b
    void init(byte[]) -> b
    void update(byte[]) -> c
net.lingala.zip4j.crypto.PBKDF2.PBKDF2Engine -> c.a.a.b.a.b:
    net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters parameters -> a
    net.lingala.zip4j.crypto.PBKDF2.PRF prf -> b
    byte[] deriveKey(java.lang.String,int) -> a
    void assertPRF(byte[]) -> a
    byte[] PBKDF2(net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int) -> a
    int ceil(int,int) -> a
    void _F(byte[],int,net.lingala.zip4j.crypto.PBKDF2.PRF,byte[],int,int) -> a
    void xor(byte[],byte[]) -> a
    void INT(byte[],int,int) -> a
net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters -> c.a.a.b.a.c:
    byte[] salt -> a
    int iterationCount -> b
    java.lang.String hashAlgorithm -> c
    java.lang.String hashCharset -> d
    byte[] derivedKey -> e
    int getIterationCount() -> a
    byte[] getSalt() -> b
    java.lang.String getHashAlgorithm() -> c
    java.lang.String getHashCharset() -> d
net.lingala.zip4j.crypto.PBKDF2.PRF -> c.a.a.b.a.d:
    void init(byte[]) -> b
    byte[] doFinal(byte[]) -> a
    int getHLen() -> b
net.lingala.zip4j.crypto.StandardDecrypter -> c.a.a.b.c:
    net.lingala.zip4j.model.FileHeader fileHeader -> a
    byte[] crc -> b
    net.lingala.zip4j.crypto.engine.ZipCryptoEngine zipCryptoEngine -> c
    int decryptData(byte[],int,int) -> a
    void init(byte[]) -> a
net.lingala.zip4j.crypto.engine.AESEngine -> c.a.a.b.b.a:
    int rounds -> a
    int[][] workingKey -> b
    int C0 -> c
    int C1 -> d
    int C2 -> e
    int C3 -> f
    byte[] S -> g
    int[] rcon -> h
    int[] T0 -> i
    void init(byte[]) -> a
    int[][] generateWorkingKey(byte[]) -> b
    int processBlock(byte[],byte[]) -> a
    int processBlock(byte[],int,byte[],int) -> a
    void stateIn(byte[],int) -> a
    void stateOut(byte[],int) -> b
    void encryptBlock(int[][]) -> a
    int shift(int,int) -> a
    int subWord(int) -> a
net.lingala.zip4j.crypto.engine.ZipCryptoEngine -> c.a.a.b.b.b:
    int[] keys -> a
    int[] CRC_TABLE -> b
    void initKeys(java.lang.String) -> a
    void updateKeys(byte) -> a
    int crc32(int,byte) -> a
    byte decryptByte() -> a
net.lingala.zip4j.exception.ZipException -> c.a.a.c.a:
    int code -> a
net.lingala.zip4j.io.BaseInputStream -> c.a.a.d.a:
    int read() -> read
    int available() -> available
    net.lingala.zip4j.unzip.UnzipEngine getUnzipEngine() -> a
net.lingala.zip4j.io.InflaterInputStream -> c.a.a.d.b:
    java.util.zip.Inflater inflater -> a
    byte[] buff -> b
    byte[] oneByteBuff -> c
    net.lingala.zip4j.unzip.UnzipEngine unzipEngine -> d
    long bytesWritten -> e
    long uncompressedSize -> f
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void fill() -> b
    long skip(long) -> skip
    int available() -> available
    void close() -> close
    net.lingala.zip4j.unzip.UnzipEngine getUnzipEngine() -> a
net.lingala.zip4j.io.PartInputStream -> c.a.a.d.c:
    java.io.RandomAccessFile raf -> a
    long bytesRead -> b
    long length -> c
    net.lingala.zip4j.unzip.UnzipEngine unzipEngine -> d
    net.lingala.zip4j.crypto.IDecrypter decrypter -> e
    int available() -> available
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void checkAndReadAESMacBytes() -> b
    long skip(long) -> skip
    void close() -> close
    net.lingala.zip4j.unzip.UnzipEngine getUnzipEngine() -> a
net.lingala.zip4j.io.ZipInputStream -> c.a.a.d.d:
    net.lingala.zip4j.io.BaseInputStream is -> a
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void close() -> close
    void close(boolean) -> a
    int available() -> available
    long skip(long) -> skip
net.lingala.zip4j.model.AESExtraDataRecord -> c.a.a.e.a:
    long signature -> a
    int dataSize -> b
    int versionNumber -> c
    java.lang.String vendorID -> d
    int aesStrength -> e
    int compressionMethod -> f
    void setSignature(long) -> a
    void setDataSize(int) -> a
    void setVersionNumber(int) -> b
    void setVendorID(java.lang.String) -> a
    int getAesStrength() -> a
    void setAesStrength(int) -> c
    int getCompressionMethod() -> b
    void setCompressionMethod(int) -> d
net.lingala.zip4j.model.CentralDirectory -> c.a.a.e.b:
    java.util.ArrayList fileHeaders -> a
    java.util.ArrayList getFileHeaders() -> a
    void setFileHeaders(java.util.ArrayList) -> a
net.lingala.zip4j.model.DigitalSignature -> c.a.a.e.c:
    int headerSignature -> a
    int sizeOfData -> b
    java.lang.String signatureData -> c
    void setHeaderSignature(int) -> a
    void setSizeOfData(int) -> b
    void setSignatureData(java.lang.String) -> a
net.lingala.zip4j.model.EndCentralDirRecord -> c.a.a.e.d:
    long signature -> a
    int noOfThisDisk -> b
    int noOfThisDiskStartOfCentralDir -> c
    int totNoOfEntriesInCentralDirOnThisDisk -> d
    int totNoOfEntriesInCentralDir -> e
    int sizeOfCentralDir -> f
    long offsetOfStartOfCentralDir -> g
    int commentLength -> h
    java.lang.String comment -> i
    byte[] commentBytes -> j
    void setSignature(long) -> a
    int getNoOfThisDisk() -> a
    void setNoOfThisDisk(int) -> a
    void setNoOfThisDiskStartOfCentralDir(int) -> b
    void setTotNoOfEntriesInCentralDirOnThisDisk(int) -> c
    int getTotNoOfEntriesInCentralDir() -> b
    void setTotNoOfEntriesInCentralDir(int) -> d
    void setSizeOfCentralDir(int) -> e
    long getOffsetOfStartOfCentralDir() -> c
    void setOffsetOfStartOfCentralDir(long) -> b
    void setCommentLength(int) -> f
    void setComment(java.lang.String) -> a
    void setCommentBytes(byte[]) -> a
net.lingala.zip4j.model.ExtraDataRecord -> c.a.a.e.e:
    long header -> a
    int sizeOfData -> b
    byte[] data -> c
    long getHeader() -> a
    void setHeader(long) -> a
    int getSizeOfData() -> b
    void setSizeOfData(int) -> a
    byte[] getData() -> c
    void setData(byte[]) -> a
net.lingala.zip4j.model.FileHeader -> c.a.a.e.f:
    int signature -> a
    int versionMadeBy -> b
    int versionNeededToExtract -> c
    byte[] generalPurposeFlag -> d
    int compressionMethod -> e
    int lastModFileTime -> f
    long crc32 -> g
    byte[] crcBuff -> h
    long compressedSize -> i
    long uncompressedSize -> j
    int fileNameLength -> k
    int extraFieldLength -> l
    int diskNumberStart -> m
    byte[] internalFileAttr -> n
    byte[] externalFileAttr -> o
    long offsetLocalHeader -> p
    java.lang.String fileName -> q
    java.lang.String fileComment -> r
    boolean isDirectory -> s
    boolean isEncrypted -> t
    int encryptionMethod -> u
    java.lang.String password -> v
    boolean dataDescriptorExists -> w
    net.lingala.zip4j.model.Zip64ExtendedInfo zip64ExtendedInfo -> x
    net.lingala.zip4j.model.AESExtraDataRecord aesExtraDataRecord -> y
    java.util.ArrayList extraDataRecords -> z
    boolean fileNameUTF8Encoded -> A
    void setSignature(int) -> a
    void setVersionMadeBy(int) -> b
    void setVersionNeededToExtract(int) -> c
    void setGeneralPurposeFlag(byte[]) -> a
    int getCompressionMethod() -> a
    void setCompressionMethod(int) -> d
    int getLastModFileTime() -> b
    void setLastModFileTime(int) -> e
    long getCrc32() -> c
    void setCrc32(long) -> a
    long getCompressedSize() -> d
    void setCompressedSize(long) -> b
    long getUncompressedSize() -> e
    void setUncompressedSize(long) -> c
    void setFileNameLength(int) -> f
    int getExtraFieldLength() -> f
    void setExtraFieldLength(int) -> g
    int getDiskNumberStart() -> g
    void setDiskNumberStart(int) -> h
    void setInternalFileAttr(byte[]) -> b
    byte[] getExternalFileAttr() -> h
    void setExternalFileAttr(byte[]) -> c
    long getOffsetLocalHeader() -> i
    void setOffsetLocalHeader(long) -> d
    java.lang.String getFileName() -> j
    void setFileName(java.lang.String) -> a
    void setFileComment(java.lang.String) -> b
    boolean isDirectory() -> k
    void setDirectory(boolean) -> a
    void extractFile(net.lingala.zip4j.model.ZipModel,java.lang.String,net.lingala.zip4j.model.UnzipParameters,java.lang.String,net.lingala.zip4j.progress.ProgressMonitor,boolean) -> a
    boolean isEncrypted() -> l
    void setEncrypted(boolean) -> b
    int getEncryptionMethod() -> m
    void setEncryptionMethod(int) -> i
    byte[] getCrcBuff() -> n
    void setCrcBuff(byte[]) -> d
    java.lang.String getPassword() -> o
    void setPassword(java.lang.String) -> c
    java.util.ArrayList getExtraDataRecords() -> p
    void setExtraDataRecords(java.util.ArrayList) -> a
    void setDataDescriptorExists(boolean) -> c
    net.lingala.zip4j.model.Zip64ExtendedInfo getZip64ExtendedInfo() -> q
    void setZip64ExtendedInfo(net.lingala.zip4j.model.Zip64ExtendedInfo) -> a
    net.lingala.zip4j.model.AESExtraDataRecord getAesExtraDataRecord() -> r
    void setAesExtraDataRecord(net.lingala.zip4j.model.AESExtraDataRecord) -> a
    boolean isFileNameUTF8Encoded() -> s
    void setFileNameUTF8Encoded(boolean) -> d
net.lingala.zip4j.model.LocalFileHeader -> c.a.a.e.g:
    int signature -> a
    int versionNeededToExtract -> b
    byte[] generalPurposeFlag -> c
    int compressionMethod -> d
    int lastModFileTime -> e
    long crc32 -> f
    byte[] crcBuff -> g
    long compressedSize -> h
    long uncompressedSize -> i
    int fileNameLength -> j
    int extraFieldLength -> k
    java.lang.String fileName -> l
    long offsetStartOfData -> m
    boolean isEncrypted -> n
    int encryptionMethod -> o
    java.lang.String password -> p
    java.util.ArrayList extraDataRecords -> q
    net.lingala.zip4j.model.Zip64ExtendedInfo zip64ExtendedInfo -> r
    net.lingala.zip4j.model.AESExtraDataRecord aesExtraDataRecord -> s
    boolean dataDescriptorExists -> t
    boolean writeComprSizeInZip64ExtraRecord -> u
    boolean fileNameUTF8Encoded -> v
    void setSignature(int) -> a
    void setVersionNeededToExtract(int) -> b
    void setGeneralPurposeFlag(byte[]) -> a
    int getCompressionMethod() -> a
    void setCompressionMethod(int) -> c
    void setLastModFileTime(int) -> d
    long getCrc32() -> b
    void setCrc32(long) -> a
    long getCompressedSize() -> c
    void setCompressedSize(long) -> b
    long getUncompressedSize() -> d
    void setUncompressedSize(long) -> c
    void setFileNameLength(int) -> e
    int getExtraFieldLength() -> e
    void setExtraFieldLength(int) -> f
    java.lang.String getFileName() -> f
    void setFileName(java.lang.String) -> a
    long getOffsetStartOfData() -> g
    void setOffsetStartOfData(long) -> d
    boolean isEncrypted() -> h
    void setEncrypted(boolean) -> a
    int getEncryptionMethod() -> i
    void setEncryptionMethod(int) -> g
    void setCrcBuff(byte[]) -> b
    java.lang.String getPassword() -> j
    void setPassword(java.lang.String) -> b
    java.util.ArrayList getExtraDataRecords() -> k
    void setExtraDataRecords(java.util.ArrayList) -> a
    void setDataDescriptorExists(boolean) -> b
    void setZip64ExtendedInfo(net.lingala.zip4j.model.Zip64ExtendedInfo) -> a
    net.lingala.zip4j.model.AESExtraDataRecord getAesExtraDataRecord() -> l
    void setAesExtraDataRecord(net.lingala.zip4j.model.AESExtraDataRecord) -> a
    boolean isFileNameUTF8Encoded() -> m
    void setFileNameUTF8Encoded(boolean) -> c
net.lingala.zip4j.model.UnzipParameters -> c.a.a.e.h:
    boolean ignoreReadOnlyFileAttribute -> a
    boolean ignoreHiddenFileAttribute -> b
    boolean ignoreArchiveFileAttribute -> c
    boolean ignoreSystemFileAttribute -> d
    boolean ignoreAllFileAttributes -> e
    boolean ignoreDateTimeAttributes -> f
    boolean isIgnoreReadOnlyFileAttribute() -> a
    boolean isIgnoreHiddenFileAttribute() -> b
    boolean isIgnoreArchiveFileAttribute() -> c
    boolean isIgnoreSystemFileAttribute() -> d
    boolean isIgnoreAllFileAttributes() -> e
    boolean isIgnoreDateTimeAttributes() -> f
net.lingala.zip4j.model.Zip64EndCentralDirLocator -> c.a.a.e.i:
    long signature -> a
    int noOfDiskStartOfZip64EndOfCentralDirRec -> b
    long offsetZip64EndOfCentralDirRec -> c
    int totNumberOfDiscs -> d
    void setSignature(long) -> a
    void setNoOfDiskStartOfZip64EndOfCentralDirRec(int) -> a
    long getOffsetZip64EndOfCentralDirRec() -> a
    void setOffsetZip64EndOfCentralDirRec(long) -> b
    void setTotNumberOfDiscs(int) -> b
net.lingala.zip4j.model.Zip64EndCentralDirRecord -> c.a.a.e.j:
    long signature -> a
    long sizeOfZip64EndCentralDirRec -> b
    int versionMadeBy -> c
    int versionNeededToExtract -> d
    int noOfThisDisk -> e
    int noOfThisDiskStartOfCentralDir -> f
    long totNoOfEntriesInCentralDirOnThisDisk -> g
    long totNoOfEntriesInCentralDir -> h
    long sizeOfCentralDir -> i
    long offsetStartCenDirWRTStartDiskNo -> j
    byte[] extensibleDataSector -> k
    void setSignature(long) -> a
    long getSizeOfZip64EndCentralDirRec() -> a
    void setSizeOfZip64EndCentralDirRec(long) -> b
    void setVersionMadeBy(int) -> a
    void setVersionNeededToExtract(int) -> b
    void setNoOfThisDisk(int) -> c
    void setNoOfThisDiskStartOfCentralDir(int) -> d
    void setTotNoOfEntriesInCentralDirOnThisDisk(long) -> c
    long getTotNoOfEntriesInCentralDir() -> b
    void setTotNoOfEntriesInCentralDir(long) -> d
    void setSizeOfCentralDir(long) -> e
    long getOffsetStartCenDirWRTStartDiskNo() -> c
    void setOffsetStartCenDirWRTStartDiskNo(long) -> f
    void setExtensibleDataSector(byte[]) -> a
net.lingala.zip4j.model.Zip64ExtendedInfo -> c.a.a.e.k:
    long compressedSize -> a
    long unCompressedSize -> b
    long offsetLocalHeader -> c
    int diskNumberStart -> d
    long getCompressedSize() -> a
    void setCompressedSize(long) -> a
    long getUnCompressedSize() -> b
    void setUnCompressedSize(long) -> b
    long getOffsetLocalHeader() -> c
    void setOffsetLocalHeader(long) -> c
    int getDiskNumberStart() -> d
    void setDiskNumberStart(int) -> a
net.lingala.zip4j.model.ZipModel -> c.a.a.e.l:
    net.lingala.zip4j.model.CentralDirectory centralDirectory -> a
    net.lingala.zip4j.model.EndCentralDirRecord endCentralDirRecord -> b
    net.lingala.zip4j.model.Zip64EndCentralDirLocator zip64EndCentralDirLocator -> c
    net.lingala.zip4j.model.Zip64EndCentralDirRecord zip64EndCentralDirRecord -> d
    boolean splitArchive -> e
    java.lang.String zipFile -> f
    boolean isZip64Format -> g
    java.lang.String fileNameCharset -> h
    net.lingala.zip4j.model.CentralDirectory getCentralDirectory() -> a
    void setCentralDirectory(net.lingala.zip4j.model.CentralDirectory) -> a
    net.lingala.zip4j.model.EndCentralDirRecord getEndCentralDirRecord() -> b
    void setEndCentralDirRecord(net.lingala.zip4j.model.EndCentralDirRecord) -> a
    boolean isSplitArchive() -> c
    void setSplitArchive(boolean) -> a
    java.lang.String getZipFile() -> d
    void setZipFile(java.lang.String) -> a
    net.lingala.zip4j.model.Zip64EndCentralDirLocator getZip64EndCentralDirLocator() -> e
    void setZip64EndCentralDirLocator(net.lingala.zip4j.model.Zip64EndCentralDirLocator) -> a
    net.lingala.zip4j.model.Zip64EndCentralDirRecord getZip64EndCentralDirRecord() -> f
    void setZip64EndCentralDirRecord(net.lingala.zip4j.model.Zip64EndCentralDirRecord) -> a
    boolean isZip64Format() -> g
    void setZip64Format(boolean) -> b
    java.lang.Object clone() -> clone
    java.lang.String getFileNameCharset() -> h
net.lingala.zip4j.progress.ProgressMonitor -> c.a.a.f.a:
    int state -> a
    long totalWork -> b
    long workCompleted -> c
    int percentDone -> d
    int currentOperation -> e
    java.lang.String fileName -> f
    int result -> g
    java.lang.Throwable exception -> h
    int getState() -> a
    void setTotalWork(long) -> a
    void updateWorkCompleted(long) -> b
    void setFileName(java.lang.String) -> a
    void endProgressMonitorError(java.lang.Throwable) -> a
    void reset() -> b
net.lingala.zip4j.unzip.Unzip -> c.a.a.g.a:
    net.lingala.zip4j.model.ZipModel zipModel -> a
    void extractFile(net.lingala.zip4j.model.FileHeader,java.lang.String,net.lingala.zip4j.model.UnzipParameters,java.lang.String,net.lingala.zip4j.progress.ProgressMonitor,boolean) -> a
    void initExtractFile(net.lingala.zip4j.model.FileHeader,java.lang.String,net.lingala.zip4j.model.UnzipParameters,java.lang.String,net.lingala.zip4j.progress.ProgressMonitor) -> a
    void checkOutputDirectoryStructure(net.lingala.zip4j.model.FileHeader,java.lang.String,java.lang.String) -> a
    void access$1(net.lingala.zip4j.unzip.Unzip,net.lingala.zip4j.model.FileHeader,java.lang.String,net.lingala.zip4j.model.UnzipParameters,java.lang.String,net.lingala.zip4j.progress.ProgressMonitor) -> a
net.lingala.zip4j.unzip.Unzip$2 -> c.a.a.g.b:
    net.lingala.zip4j.unzip.Unzip this$0 -> a
    net.lingala.zip4j.model.FileHeader val$fileHeader -> b
    java.lang.String val$outPath -> c
    net.lingala.zip4j.model.UnzipParameters val$unzipParameters -> d
    java.lang.String val$newFileName -> e
    net.lingala.zip4j.progress.ProgressMonitor val$progressMonitor -> f
    void run() -> run
net.lingala.zip4j.unzip.UnzipEngine -> c.a.a.g.c:
    net.lingala.zip4j.model.ZipModel zipModel -> a
    net.lingala.zip4j.model.FileHeader fileHeader -> b
    int currSplitFileCounter -> c
    net.lingala.zip4j.model.LocalFileHeader localFileHeader -> d
    net.lingala.zip4j.crypto.IDecrypter decrypter -> e
    java.util.zip.CRC32 crc -> f
    void unzipFile(net.lingala.zip4j.progress.ProgressMonitor,java.lang.String,java.lang.String,net.lingala.zip4j.model.UnzipParameters) -> a
    net.lingala.zip4j.io.ZipInputStream getInputStream() -> a
    void init(java.io.RandomAccessFile) -> a
    void initDecrypter(java.io.RandomAccessFile) -> b
    byte[] getStandardDecrypterHeaderBytes(java.io.RandomAccessFile) -> c
    byte[] getAESSalt(java.io.RandomAccessFile) -> d
    byte[] getAESPasswordVerifier(java.io.RandomAccessFile) -> e
    int calculateAESSaltLength(net.lingala.zip4j.model.AESExtraDataRecord) -> a
    void checkCRC() -> b
    boolean checkLocalHeader() -> h
    java.io.RandomAccessFile checkSplitFile() -> i
    java.io.RandomAccessFile createFileHandler(java.lang.String) -> a
    java.io.FileOutputStream getOutputStream(java.lang.String,java.lang.String) -> a
    java.lang.String getOutputFileNameWithPath(java.lang.String,java.lang.String) -> b
    java.io.RandomAccessFile startNextSplitFile() -> c
    void closeStreams(java.io.InputStream,java.io.OutputStream) -> a
    void updateCRC(byte[],int,int) -> a
    net.lingala.zip4j.model.FileHeader getFileHeader() -> d
    net.lingala.zip4j.crypto.IDecrypter getDecrypter() -> e
    net.lingala.zip4j.model.ZipModel getZipModel() -> f
    net.lingala.zip4j.model.LocalFileHeader getLocalFileHeader() -> g
net.lingala.zip4j.unzip.UnzipUtil -> c.a.a.g.d:
    java.util.TimeZone defaultTimeZone -> a
    void applyFileAttributes(net.lingala.zip4j.model.FileHeader,java.io.File,net.lingala.zip4j.model.UnzipParameters) -> a
    void setFileAttributes(net.lingala.zip4j.model.FileHeader,java.io.File,boolean,boolean,boolean,boolean) -> a
    void setFileLastModifiedTime(net.lingala.zip4j.model.FileHeader,java.io.File) -> a
net.lingala.zip4j.util.InternalZipConstants -> c.a.a.h.a:
    java.lang.String CHARSET_DEFAULT -> a
    java.lang.String FILE_SEPARATOR -> b
net.lingala.zip4j.util.Raw -> c.a.a.h.b:
    long readLongLittleEndian(byte[],int) -> a
    int readLeInt(java.io.DataInput,byte[]) -> a
    int readShortLittleEndian(byte[],int) -> b
    int readIntLittleEndian(byte[],int) -> c
    byte[] toByteArray(int,int) -> a
    byte[] toByteArray(int) -> a
net.lingala.zip4j.util.Zip4jUtil -> c.a.a.h.c:
    boolean isStringNotNullAndNotEmpty(java.lang.String) -> a
    boolean checkOutputFolder(java.lang.String) -> b
    boolean checkFileReadAccess(java.lang.String) -> c
    boolean checkFileExists(java.lang.String) -> d
    boolean checkFileExists(java.io.File) -> a
    boolean isWindows() -> a
    void setFileReadOnly(java.io.File) -> b
    void setFileHidden(java.io.File) -> c
    void setFileArchive(java.io.File) -> d
    void setFileSystemMode(java.io.File) -> e
    long getLocalTimeFromDSTTime(java.util.TimeZone,long) -> a
    long dosToJavaTme(int) -> a
    java.lang.String decodeFileName(byte[],boolean) -> a
    java.lang.String getCp850EncodedString(byte[]) -> a
org.accessibility.BenetechAccessibilityService -> org.accessibility.BenetechAccessibilityService:
    boolean isInitialized -> a
    java.util.ArrayList hold -> b
    void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onAccessibilityEvent
    void onInterrupt() -> onInterrupt
    void onServiceConnected() -> onServiceConnected
org.accessibility.ParentCloserDialog -> org.accessibility.a:
org.accessibility.ParentCloserDialog$1 -> org.accessibility.b:
    org.accessibility.ParentCloserDialog this$0 -> a
    android.app.Activity val$parentActivity -> b
    void onCancel(android.content.DialogInterface) -> onCancel
org.accessibility.SimpleGestureFilter -> org.accessibility.c:
    int swipe_Min_Distance -> a
    int swipe_Max_Distance -> b
    int swipe_Min_Velocity -> c
    int mode -> d
    boolean running -> e
    boolean tapIndicator -> f
    android.app.Activity context -> g
    android.view.GestureDetector detector -> h
    org.accessibility.SimpleGestureFilter$SimpleGestureListener listener -> i
    void onTouchEvent(android.view.MotionEvent) -> a
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    boolean onDoubleTapEvent(android.view.MotionEvent) -> onDoubleTapEvent
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
org.accessibility.SimpleGestureFilter$SimpleGestureListener -> org.accessibility.d:
    void onSwipe(int) -> a
    void onDoubleTap() -> a
org.accessibility.VoiceableDialog -> org.accessibility.e:
    void popup(java.lang.String,int) -> a
org.accessibility.VoiceableDialog$1 -> org.accessibility.f:
    org.accessibility.VoiceableDialog this$0 -> a
    void run() -> run
org.amse.ys.zip.Decompressor -> org.amse.ys.zip.a:
    java.util.Queue ourDeflators -> a
    int read(byte[],int,int) -> a
    int read() -> a
    void storeDecompressor(org.amse.ys.zip.Decompressor) -> a
    org.amse.ys.zip.Decompressor init(org.amse.ys.zip.MyBufferedInputStream,org.amse.ys.zip.LocalFileHeader) -> a
    int available() -> b
org.amse.ys.zip.DeflatingDecompressor -> org.amse.ys.zip.DeflatingDecompressor:
    org.amse.ys.zip.MyBufferedInputStream myStream -> a
    int myCompressedAvailable -> b
    int myAvailable -> c
    byte[] myInBuffer -> d
    int myInBufferOffset -> e
    int myInBufferLength -> f
    byte[] myOutBuffer -> g
    int myOutBufferOffset -> h
    int myOutBufferLength -> i
    int myInflatorId -> j
    void reset(org.amse.ys.zip.MyBufferedInputStream,org.amse.ys.zip.LocalFileHeader) -> b
    int available() -> b
    int read(byte[],int,int) -> a
    int read() -> a
    void fillOutBuffer() -> c
    int startInflating() -> startInflating
    void endInflating(int) -> endInflating
    long inflate(int,byte[],int,int,byte[]) -> inflate
org.amse.ys.zip.LocalFileHeader -> org.amse.ys.zip.b:
    int Signature -> a
    int Version -> b
    int Flags -> c
    int CompressionMethod -> d
    int ModificationTime -> e
    int ModificationDate -> f
    int CRC32 -> g
    int CompressedSize -> h
    int UncompressedSize -> i
    int NameLength -> j
    int ExtraLength -> k
    java.lang.String FileName -> l
    int DataOffset -> m
    void readFrom(org.amse.ys.zip.MyBufferedInputStream) -> a
org.amse.ys.zip.MyBufferedInputStream -> org.amse.ys.zip.c:
    org.amse.ys.zip.ZipFile$InputStreamHolder myStreamHolder -> c
    java.io.InputStream myFileInputStream -> d
    byte[] myBuffer -> e
    int myBytesReady -> a
    int myPositionInBuffer -> b
    int myCurrentPosition -> f
    int available() -> available
    int offset() -> a
    int read(byte[],int,int) -> read
    int read() -> read
    int read2Bytes() -> b
    int read4Bytes() -> c
    java.lang.String readString(int) -> a
    void skip(int) -> b
    void backSkip(int) -> c
    void setPosition(int) -> d
    void close() -> close
org.amse.ys.zip.NoCompressionDecompressor -> org.amse.ys.zip.d:
    org.amse.ys.zip.LocalFileHeader myHeader -> a
    org.amse.ys.zip.MyBufferedInputStream myStream -> b
    int myCurrentPosition -> c
    int read(byte[],int,int) -> a
    int read() -> a
    int available() -> b
org.amse.ys.zip.ZipException -> org.amse.ys.zip.ZipException:
org.amse.ys.zip.ZipFile -> org.amse.ys.zip.e:
    org.amse.ys.zip.ZipFile$InputStreamHolder myStreamHolder -> a
    java.util.LinkedHashMap myFileHeaders -> b
    boolean myAllFilesAreRead -> c
    java.util.Queue myStoredStreams -> d
    java.util.Collection headers() -> a
    boolean readFileHeader(org.amse.ys.zip.MyBufferedInputStream,java.lang.String) -> a
    void readAllHeaders() -> c
    void findAndReadDescriptor(org.amse.ys.zip.MyBufferedInputStream,org.amse.ys.zip.LocalFileHeader) -> a
    void storeBaseStream(org.amse.ys.zip.MyBufferedInputStream) -> a
    org.amse.ys.zip.MyBufferedInputStream getBaseStream() -> b
    org.amse.ys.zip.ZipInputStream createZipInputStream(org.amse.ys.zip.LocalFileHeader) -> a
    int getEntrySize(java.lang.String) -> a
    java.io.InputStream getInputStream(java.lang.String) -> b
    org.amse.ys.zip.LocalFileHeader getHeader(java.lang.String) -> c
org.amse.ys.zip.ZipFile$1 -> org.amse.ys.zip.f:
    org.amse.ys.zip.ZipFile this$0 -> a
    org.amse.ys.zip.LocalFileHeader get(java.lang.Object) -> a
    org.amse.ys.zip.LocalFileHeader put(java.lang.String,org.amse.ys.zip.LocalFileHeader) -> a
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
org.amse.ys.zip.ZipFile$InputStreamHolder -> org.amse.ys.zip.g:
    java.io.InputStream getInputStream() -> a
org.amse.ys.zip.ZipInputStream -> org.amse.ys.zip.h:
    org.amse.ys.zip.ZipFile myParent -> a
    org.amse.ys.zip.MyBufferedInputStream myBaseStream -> b
    org.amse.ys.zip.Decompressor myDecompressor -> c
    boolean myIsClosed -> d
    int available() -> available
    int read(byte[],int,int) -> read
    int read() -> read
    void close() -> close
    void finalize() -> finalize
org.apache.commons.codec.DecoderException -> org.apache.commons.codec.DecoderException:
org.apache.commons.codec.EncoderException -> org.apache.commons.codec.EncoderException:
org.bookshare.net.BookshareWebservice -> org.a.a.a:
    java.lang.String URL -> a
    java.lang.String md5sum(java.lang.String) -> a
    java.lang.String toHex(byte[]) -> a
    java.lang.String convertStreamToString(java.io.InputStream) -> a
    java.io.InputStream getResponseStream(java.lang.String,java.lang.String) -> a
    org.apache.http.HttpResponse getHttpResponse(java.lang.String,java.lang.String) -> b
org.geometerplus.android.fbreader.BookmarkEditActivity -> org.geometerplus.android.fbreader.BookmarkEditActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.BookmarksActivity -> org.geometerplus.android.fbreader.BookmarksActivity:
    java.util.List AllBooksBookmarks -> a
    java.util.List myThisBookBookmarks -> d
    java.util.List mySearchResults -> e
    android.widget.ListView myThisBookView -> f
    android.widget.ListView myAllBooksView -> g
    android.widget.ListView mySearchResultsView -> h
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> i
    org.geometerplus.zlibrary.core.options.ZLStringOption myBookmarkSearchPatternOption -> j
    android.view.accessibility.AccessibilityManager accessibilityManager -> k
    android.app.Dialog dialog -> l
    android.widget.ListView list -> b
    android.app.Activity myActivity -> c
    android.widget.ListView createTab(java.lang.String,int,java.lang.String) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStart() -> onStart
    void onStop() -> onStop
    void onPause() -> onPause
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onSearchRequested() -> onSearchRequested
    void showSearchResultsTab(java.util.LinkedList) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    void invalidateAllViews() -> a
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void addBookmark() -> b
    void gotoBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void showAccessibleMenu() -> c
    android.app.Dialog access$0(org.geometerplus.android.fbreader.BookmarksActivity) -> a
    void access$1(org.geometerplus.android.fbreader.BookmarksActivity,org.geometerplus.fbreader.library.Bookmark) -> a
    java.util.List access$2(org.geometerplus.android.fbreader.BookmarksActivity) -> b
    java.util.List access$3(org.geometerplus.android.fbreader.BookmarksActivity) -> c
    void access$4(org.geometerplus.android.fbreader.BookmarksActivity) -> d
    android.view.accessibility.AccessibilityManager access$5(org.geometerplus.android.fbreader.BookmarksActivity) -> e
    void access$6(org.geometerplus.android.fbreader.BookmarksActivity) -> f
org.geometerplus.android.fbreader.BookmarksActivity$1 -> org.geometerplus.android.fbreader.a:
    org.geometerplus.android.fbreader.BookmarksActivity this$0 -> a
    android.app.Dialog val$menuDialog -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.BookmarksActivity$2 -> org.geometerplus.android.fbreader.b:
    org.geometerplus.android.fbreader.BookmarksActivity this$0 -> a
    android.app.Dialog val$menuDialog -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.BookmarksActivity$BookmarksAdapter -> org.geometerplus.android.fbreader.c:
    java.util.List myBookmarks -> b
    boolean myCurrentBook -> c
    org.geometerplus.android.fbreader.BookmarksActivity this$0 -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    long getItemId(int) -> getItemId
    org.geometerplus.fbreader.library.Bookmark getItem(int) -> a
    int getCount() -> getCount
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    java.lang.Object getItem(int) -> getItem
    org.geometerplus.android.fbreader.BookmarksActivity access$1(org.geometerplus.android.fbreader.BookmarksActivity$BookmarksAdapter) -> a
org.geometerplus.android.fbreader.BookmarksActivity$BookmarksAdapter$MenuClickListener -> org.geometerplus.android.fbreader.d:
    org.geometerplus.fbreader.library.Bookmark bookmark -> b
    org.geometerplus.android.fbreader.BookmarksActivity$BookmarksAdapter this$1 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.geometerplus.android.fbreader.ButtonsPopupPanel -> org.geometerplus.android.fbreader.e:
    java.util.ArrayList myButtons -> d
    void addButton(java.lang.String,boolean,int) -> a
    void update() -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.ButtonsPopupPanel$ActionButton -> org.geometerplus.android.fbreader.f:
    java.lang.String ActionId -> a
    boolean IsCloseButton -> b
    org.geometerplus.android.fbreader.ButtonsPopupPanel this$0 -> c
org.geometerplus.android.fbreader.CancelActivity -> org.geometerplus.android.fbreader.CancelActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.CancelActivity$ActionListAdapter -> org.geometerplus.android.fbreader.g:
    android.content.Intent myIntent -> b
    org.geometerplus.android.fbreader.CancelActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Integer getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.DictionaryUtil -> org.geometerplus.android.fbreader.h:
    java.util.LinkedHashMap ourDictionaryInfos -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption ourSingleWordTranslatorOption -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption ourMultiWordTranslatorOption -> c
    java.util.Map infos() -> d
    java.util.List dictionaryInfos(android.content.Context) -> a
    org.geometerplus.android.fbreader.PackageInfo firstInfo() -> e
    org.geometerplus.zlibrary.core.options.ZLStringOption singleWordTranslatorOption() -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption multiWordTranslatorOption() -> b
    org.geometerplus.android.fbreader.PackageInfo getCurrentDictionaryInfo(boolean) -> a
    android.content.Intent getDictionaryIntent(java.lang.String,boolean) -> a
    android.content.Intent getDictionaryIntent(org.geometerplus.android.fbreader.PackageInfo,java.lang.String) -> a
    void openTextInDictionary(android.app.Activity,java.lang.String,boolean,int,int) -> a
    void openWordInDictionary(android.app.Activity,org.geometerplus.zlibrary.text.view.ZLTextWord,org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
    void installDictionaryIfNotInstalled(android.app.Activity,boolean) -> a
    void installDictionary(android.app.Activity,org.geometerplus.android.fbreader.PackageInfo) -> b
    java.util.LinkedHashMap access$0() -> c
    void access$1(android.app.Activity,org.geometerplus.android.fbreader.PackageInfo) -> a
org.geometerplus.android.fbreader.DictionaryUtil$1 -> org.geometerplus.android.fbreader.i:
    android.app.Activity val$activity -> a
    org.geometerplus.android.fbreader.PackageInfo val$dictionaryInfo -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.DictionaryUtil$InfoReader -> org.geometerplus.android.fbreader.j:
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.android.fbreader.FBAndroidAction -> org.geometerplus.android.fbreader.k:
    org.geometerplus.android.fbreader.FBReader BaseActivity -> a
org.geometerplus.android.fbreader.FBReader -> org.geometerplus.android.fbreader.FBReader:
    android.view.accessibility.AccessibilityManager accessibilityManager -> b
    boolean initialOpen -> c
    int myFullScreenFlag -> d
    java.util.List myPluginActions -> e
    android.content.BroadcastReceiver myPluginInfoReceiver -> f
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$tips$TipsManager$Action -> g
    org.geometerplus.zlibrary.core.filesystem.ZLFile fileFromIntent(android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onOptionsMenuClosed(android.view.Menu) -> onOptionsMenuClosed
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStart() -> onStart
    void onResume() -> onResume
    void onStop() -> onStop
    org.geometerplus.fbreader.fbreader.FBReaderApp createApplication(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean onSearchRequested() -> onSearchRequested
    void showSelectionPanel() -> a
    void hideSelectionPanel() -> b
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void navigate() -> c
    void setApplicationTitle() -> h
    android.view.Menu addSubMenu(android.view.Menu,java.lang.String) -> a
    void addMenuItem(android.view.Menu,java.lang.String,java.lang.String) -> a
    void addMenuItem(android.view.Menu,java.lang.String,int) -> a
    void addMenuItem(android.view.Menu,java.lang.String) -> b
    void addMenuItem(android.view.Menu,java.lang.String,java.lang.String,int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void copyManual() -> i
    org.geometerplus.zlibrary.core.application.ZLApplication createApplication(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.util.List access$1(org.geometerplus.android.fbreader.FBReader) -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$tips$TipsManager$Action() -> d
org.geometerplus.android.fbreader.FBReader$1 -> org.geometerplus.android.fbreader.l:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.android.fbreader.FBReader$2 -> org.geometerplus.android.fbreader.m:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp val$fbReader -> b
    java.lang.String val$pattern -> c
    void run() -> run
    org.geometerplus.android.fbreader.FBReader access$0(org.geometerplus.android.fbreader.FBReader$2) -> a
org.geometerplus.android.fbreader.FBReader$2$1 -> org.geometerplus.android.fbreader.n:
    org.geometerplus.android.fbreader.FBReader$2 this$1 -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp val$fbReader -> b
    org.geometerplus.android.fbreader.TextSearchPopup val$popup -> c
    void run() -> run
org.geometerplus.android.fbreader.FBReader$2$2 -> org.geometerplus.android.fbreader.o:
    org.geometerplus.android.fbreader.FBReader$2 this$1 -> a
    org.geometerplus.android.fbreader.TextSearchPopup val$popup -> b
    void run() -> run
org.geometerplus.android.fbreader.FBReader$3 -> org.geometerplus.android.fbreader.p:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel val$popup -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp val$fbreader -> c
    android.app.SearchManager val$manager -> d
    void onCancel() -> onCancel
org.geometerplus.android.fbreader.NavigationPopup -> org.geometerplus.android.fbreader.q:
    boolean myIsInProgress -> d
    void runNavigation() -> b
    java.lang.String getId() -> c
    void show_() -> d
    void update() -> a
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout,org.geometerplus.android.fbreader.PopupWindow$Location) -> a
    void setupNavigation(org.geometerplus.android.fbreader.PopupWindow) -> a
    java.lang.String makeProgressText(int,int) -> a
    void access$0(org.geometerplus.android.fbreader.NavigationPopup,boolean) -> a
    java.lang.String access$1(org.geometerplus.android.fbreader.NavigationPopup,int,int) -> a
    org.geometerplus.zlibrary.core.application.ZLApplication access$2(org.geometerplus.android.fbreader.NavigationPopup) -> a
org.geometerplus.android.fbreader.NavigationPopup$1 -> org.geometerplus.android.fbreader.r:
    org.geometerplus.android.fbreader.NavigationPopup this$0 -> a
    android.widget.TextView val$text -> b
    void gotoPage(int) -> a
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
org.geometerplus.android.fbreader.NavigationPopup$2 -> org.geometerplus.android.fbreader.s:
    org.geometerplus.android.fbreader.NavigationPopup this$0 -> a
    android.widget.Button val$btnCancel -> b
    android.widget.Button val$btnOk -> c
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.PackageInfo -> org.geometerplus.android.fbreader.t:
    java.lang.String Id -> a
    java.lang.String PackageName -> b
    java.lang.String ClassName -> c
    java.lang.String Title -> d
    java.lang.String IntentAction -> e
    java.lang.String IntentKey -> f
    java.lang.String IntentDataPattern -> g
org.geometerplus.android.fbreader.PopupPanel -> org.geometerplus.android.fbreader.u:
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor StartPosition -> a
    org.geometerplus.android.fbreader.PopupWindow myWindow -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp getReader() -> e
    void show_() -> d
    void hide_() -> f
    void removeWindow(android.app.Activity) -> a
    void removeAllWindows(org.geometerplus.zlibrary.core.application.ZLApplication,android.app.Activity) -> a
    void restoreVisibilities(org.geometerplus.zlibrary.core.application.ZLApplication) -> a
    void initPosition() -> g
    void storePosition() -> h
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout,org.geometerplus.android.fbreader.PopupWindow$Location) -> a
org.geometerplus.android.fbreader.PopupWindow -> org.geometerplus.android.fbreader.v:
    android.app.Activity myActivity -> a
    android.app.Activity getActivity() -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void show() -> b
    void hide() -> c
    void addView(android.view.View) -> addView
org.geometerplus.android.fbreader.PopupWindow$1 -> org.geometerplus.android.fbreader.w:
    org.geometerplus.android.fbreader.PopupWindow this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.PopupWindow$2 -> org.geometerplus.android.fbreader.x:
    org.geometerplus.android.fbreader.PopupWindow this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.PopupWindow$Location -> org.geometerplus.android.fbreader.y:
    org.geometerplus.android.fbreader.PopupWindow$Location Bottom -> a
    org.geometerplus.android.fbreader.PopupWindow$Location Floating -> b
    org.geometerplus.android.fbreader.PopupWindow$Location[] ENUM$VALUES -> c
    org.geometerplus.android.fbreader.PopupWindow$Location[] values() -> values
    org.geometerplus.android.fbreader.PopupWindow$Location valueOf(java.lang.String) -> valueOf
org.geometerplus.android.fbreader.ProcessHyperlinkAction -> org.geometerplus.android.fbreader.z:
    boolean isEnabled() -> a
    void run(java.lang.Object[]) -> a
    void openInBrowser(java.lang.String) -> a
org.geometerplus.android.fbreader.ProcessHyperlinkAction$1 -> org.geometerplus.android.fbreader.aa:
    org.geometerplus.android.fbreader.ProcessHyperlinkAction this$0 -> a
    org.geometerplus.fbreader.network.NetworkLibrary val$nLibrary -> b
    android.content.Intent val$intent -> c
    java.lang.String val$urlString -> d
    boolean val$externalUrl -> e
    void run() -> run
    org.geometerplus.android.fbreader.ProcessHyperlinkAction access$0(org.geometerplus.android.fbreader.ProcessHyperlinkAction$1) -> a
org.geometerplus.android.fbreader.ProcessHyperlinkAction$1$1 -> org.geometerplus.android.fbreader.ab:
    org.geometerplus.android.fbreader.ProcessHyperlinkAction$1 this$1 -> a
    android.content.Intent val$intent -> b
    void run() -> run
org.geometerplus.android.fbreader.RunActivityAction -> org.geometerplus.android.fbreader.ac:
    java.lang.Class myActivityClass -> c
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.RunPluginAction -> org.geometerplus.android.fbreader.ad:
    android.net.Uri myUri -> c
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SearchAction -> org.geometerplus.android.fbreader.ae:
    boolean isVisible() -> b
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SelectionBookmarkAction -> org.geometerplus.android.fbreader.af:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SelectionCopyAction -> org.geometerplus.android.fbreader.ag:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SelectionHidePanelAction -> org.geometerplus.android.fbreader.ah:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SelectionPopup -> org.geometerplus.android.fbreader.ai:
    java.lang.String getId() -> c
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout,org.geometerplus.android.fbreader.PopupWindow$Location) -> a
    void move(int,int) -> a
org.geometerplus.android.fbreader.SelectionShareAction -> org.geometerplus.android.fbreader.aj:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SelectionShowPanelAction -> org.geometerplus.android.fbreader.ak:
    boolean isEnabled() -> a
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SelectionTranslateAction -> org.geometerplus.android.fbreader.al:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SetScreenOrientationAction -> org.geometerplus.android.fbreader.am:
    java.lang.String myOptionValue -> c
    void setOrientation(android.app.Activity,java.lang.String) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 isChecked() -> c
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowAccessibilitySettingsAction -> org.geometerplus.android.fbreader.an:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowAccessiblePageNavigateAction -> org.geometerplus.android.fbreader.ao:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowBookInfoAction -> org.geometerplus.android.fbreader.ap:
    boolean isVisible() -> b
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowBookmarksAction -> org.geometerplus.android.fbreader.aq:
org.geometerplus.android.fbreader.ShowBookshareMenuAction -> org.geometerplus.android.fbreader.ar:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowCancelMenuAction -> org.geometerplus.android.fbreader.as:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowHelpAction -> org.geometerplus.android.fbreader.at:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowLibraryAction -> org.geometerplus.android.fbreader.au:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowMenuAction -> org.geometerplus.android.fbreader.av:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowNavigationAction -> org.geometerplus.android.fbreader.aw:
    boolean isVisible() -> b
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowNetworkLibraryAction -> org.geometerplus.android.fbreader.ax:
org.geometerplus.android.fbreader.ShowPreferencesAction -> org.geometerplus.android.fbreader.ay:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowSpeakAction -> org.geometerplus.android.fbreader.az:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowTOCAction -> org.geometerplus.android.fbreader.ba:
    boolean isVisible() -> b
org.geometerplus.android.fbreader.SimpleContainer -> org.geometerplus.android.fbreader.bb:
    android.view.View myEditText -> a
    android.widget.Button myOkButton -> b
    android.widget.Button myCancelButton -> c
    void onLayout(boolean,int,int,int,int) -> onLayout
org.geometerplus.android.fbreader.TOCActivity -> org.geometerplus.android.fbreader.TOCActivity:
    org.geometerplus.android.fbreader.TOCActivity$TOCAdapter myAdapter -> c
    org.geometerplus.zlibrary.core.tree.ZLTree mySelectedItem -> d
    android.content.res.Resources resources -> e
    android.app.Dialog dialog -> f
    android.widget.ListView list -> a
    android.app.Activity myActivity -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onStop() -> onStop
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onBackPressed() -> onBackPressed
    android.app.Dialog access$0(org.geometerplus.android.fbreader.TOCActivity) -> a
    org.geometerplus.zlibrary.core.tree.ZLTree access$1(org.geometerplus.android.fbreader.TOCActivity) -> b
    android.content.res.Resources access$2(org.geometerplus.android.fbreader.TOCActivity) -> c
    org.geometerplus.android.fbreader.TOCActivity$TOCAdapter access$3(org.geometerplus.android.fbreader.TOCActivity) -> d
org.geometerplus.android.fbreader.TOCActivity$TOCAdapter -> org.geometerplus.android.fbreader.bc:
    org.geometerplus.android.fbreader.TOCActivity this$0 -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void openBookText(org.geometerplus.fbreader.bookmodel.TOCTree) -> a
    boolean runTreeItem(org.geometerplus.zlibrary.core.tree.ZLTree) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    org.geometerplus.android.fbreader.TOCActivity access$0(org.geometerplus.android.fbreader.TOCActivity$TOCAdapter) -> a
org.geometerplus.android.fbreader.TOCActivity$TOCAdapter$MenuClickListener -> org.geometerplus.android.fbreader.bd:
    org.geometerplus.zlibrary.core.tree.ZLTree tree -> b
    org.geometerplus.android.fbreader.TOCActivity$TOCAdapter this$1 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.geometerplus.android.fbreader.TextSearchPopup -> org.geometerplus.android.fbreader.be:
    java.lang.String getId() -> c
    void hide_() -> f
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout,org.geometerplus.android.fbreader.PopupWindow$Location) -> a
org.geometerplus.android.fbreader.ZLTreeAdapter -> org.geometerplus.android.fbreader.bf:
    android.widget.ListView myParent -> a
    org.geometerplus.zlibrary.core.tree.ZLTree myTree -> b
    org.geometerplus.zlibrary.core.tree.ZLTree[] myItems -> c
    java.util.HashSet myOpenItems -> d
    void openTree(org.geometerplus.zlibrary.core.tree.ZLTree) -> b
    void expandOrCollapseTree(org.geometerplus.zlibrary.core.tree.ZLTree) -> c
    boolean isOpen(org.geometerplus.zlibrary.core.tree.ZLTree) -> d
    void selectItem(org.geometerplus.zlibrary.core.tree.ZLTree) -> e
    int getCount(org.geometerplus.zlibrary.core.tree.ZLTree) -> f
    int getCount() -> getCount
    int indexByPosition(int,org.geometerplus.zlibrary.core.tree.ZLTree) -> a
    org.geometerplus.zlibrary.core.tree.ZLTree getItem(int) -> a
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    long getItemId(int) -> getItemId
    boolean runTreeItem(org.geometerplus.zlibrary.core.tree.ZLTree) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void setIcon(android.widget.ImageView,org.geometerplus.zlibrary.core.tree.ZLTree) -> a
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.api.ApiException -> org.geometerplus.android.fbreader.api.ApiException:
org.geometerplus.android.fbreader.api.ApiInterface -> org.geometerplus.android.fbreader.api.a:
    org.geometerplus.android.fbreader.api.ApiObject request(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> a
    java.util.List requestList(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> b
    java.util.Map requestMap(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> c
org.geometerplus.android.fbreader.api.ApiInterface$Stub -> org.geometerplus.android.fbreader.api.b:
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.geometerplus.android.fbreader.api.ApiObject -> org.geometerplus.android.fbreader.api.ApiObject:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    org.geometerplus.android.fbreader.api.ApiObject envelope(int) -> a
    org.geometerplus.android.fbreader.api.ApiObject envelope(boolean) -> a
    org.geometerplus.android.fbreader.api.ApiObject envelope(java.lang.String) -> a
    java.util.List envelope(java.util.List) -> a
    java.util.List envelope(java.util.ArrayList) -> a
    int type() -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$1 -> org.geometerplus.android.fbreader.api.c:
    org.geometerplus.android.fbreader.api.ApiObject createFromParcel(android.os.Parcel) -> a
    org.geometerplus.android.fbreader.api.ApiObject[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.geometerplus.android.fbreader.api.ApiObject$Boolean -> org.geometerplus.android.fbreader.api.ApiObject$Boolean:
    boolean Value -> a
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$Error -> org.geometerplus.android.fbreader.api.ApiObject$Error:
    java.lang.String Message -> a
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$Integer -> org.geometerplus.android.fbreader.api.ApiObject$Integer:
    int Value -> a
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$String -> org.geometerplus.android.fbreader.api.ApiObject$String:
    java.lang.String Value -> a
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$Void -> org.geometerplus.android.fbreader.api.ApiObject$Void:
    org.geometerplus.android.fbreader.api.ApiObject$Void Instance -> a
    int type() -> a
org.geometerplus.android.fbreader.api.ApiServerImplementation -> org.geometerplus.android.fbreader.api.d:
    org.geometerplus.fbreader.fbreader.FBReaderApp myReader -> a
    void sendEvent(android.content.ContextWrapper,java.lang.String) -> a
    org.geometerplus.android.fbreader.api.ApiObject$Error unsupportedMethodError(int) -> e
    org.geometerplus.android.fbreader.api.ApiObject$Error exceptionInMethodError(int,java.lang.Throwable) -> a
    org.geometerplus.android.fbreader.api.ApiObject request(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> a
    java.util.List requestList(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> b
    java.util.Map errorMap(org.geometerplus.android.fbreader.api.ApiObject$Error) -> a
    java.util.Map requestMap(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> c
    java.lang.String getFBReaderVersion() -> a
    java.util.List getOptionGroups() -> b
    java.util.List getOptionNames(java.lang.String) -> a
    java.lang.String getOptionValue(java.lang.String,java.lang.String) -> a
    void setOptionValue(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String getBookLanguage() -> c
    java.lang.String getBookTitle() -> d
    java.util.List getBookTags() -> e
    java.lang.String getBookFileName() -> f
    java.lang.String getBookHash() -> g
    org.geometerplus.android.fbreader.api.TextPosition getPageStart() -> h
    org.geometerplus.android.fbreader.api.TextPosition getPageEnd() -> i
    boolean isPageEndOfSection() -> j
    boolean isPageEndOfText() -> k
    org.geometerplus.android.fbreader.api.TextPosition getTextPosition(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    org.geometerplus.zlibrary.text.view.ZLTextFixedPosition getZLTextPosition(org.geometerplus.android.fbreader.api.TextPosition) -> b
    void setPageStart(org.geometerplus.android.fbreader.api.TextPosition) -> a
    void highlightArea(org.geometerplus.android.fbreader.api.TextPosition,org.geometerplus.android.fbreader.api.TextPosition) -> a
    void clearHighlighting() -> l
    int getParagraphsNumber() -> m
    int getElementsNumber(int) -> a
    java.lang.String getParagraphText(int) -> b
    java.util.List getParagraphWords(int) -> c
    java.util.ArrayList getParagraphIndices(int) -> d
org.geometerplus.android.fbreader.api.ApiService -> org.geometerplus.android.fbreader.api.ApiService:
    android.os.IBinder onBind(android.content.Intent) -> onBind
org.geometerplus.android.fbreader.api.PluginApi -> org.geometerplus.android.fbreader.api.PluginApi:
org.geometerplus.android.fbreader.api.PluginApi$ActionInfo -> org.geometerplus.android.fbreader.api.PluginApi$ActionInfo:
    java.lang.String myId -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int getType() -> a
    android.net.Uri getId() -> b
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.PluginApi$ActionInfo$1 -> org.geometerplus.android.fbreader.api.e:
    org.geometerplus.android.fbreader.api.PluginApi$ActionInfo createFromParcel(android.os.Parcel) -> a
    org.geometerplus.android.fbreader.api.PluginApi$ActionInfo[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo -> org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo:
    java.lang.String MenuItemName -> a
    int Weight -> b
    int getType() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    int compareTo(org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo) -> a
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.android.fbreader.api.PluginApi$PluginInfo -> org.geometerplus.android.fbreader.api.PluginApi$PluginInfo:
org.geometerplus.android.fbreader.api.TextPosition -> org.geometerplus.android.fbreader.api.TextPosition:
    int ParagraphIndex -> a
    int ElementIndex -> b
    int CharIndex -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int type() -> a
    int compareTo(org.geometerplus.android.fbreader.api.TextPosition) -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.TextPosition$1 -> org.geometerplus.android.fbreader.api.f:
    org.geometerplus.android.fbreader.api.TextPosition createFromParcel(android.os.Parcel) -> a
    org.geometerplus.android.fbreader.api.TextPosition[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity -> org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity:
    java.util.List listItems -> a
    android.widget.ListView list -> b
    android.content.res.Resources resources -> c
    android.app.Activity me -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onBackPressed() -> onBackPressed
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onStart() -> onStart
    void onStop() -> onStop
    android.content.res.Resources access$0() -> a
    android.app.Activity access$1() -> b
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$HasLabel -> org.geometerplus.android.fbreader.benetech.a:
    java.lang.String getLabel() -> a
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$ListItemsAdapter -> org.geometerplus.android.fbreader.benetech.b:
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$ListItemsAdapter$ViewHolder -> org.geometerplus.android.fbreader.benetech.c:
    android.widget.TextView text -> a
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$ListItemsAdapter this$1 -> b
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MainMenuClickListener -> org.geometerplus.android.fbreader.benetech.d:
    android.app.Activity activity -> b
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl -> org.geometerplus.android.fbreader.benetech.e:
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl speak -> a
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl tableOfContents -> b
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl navigate -> c
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl bookmarks -> d
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl library -> e
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl bookshare -> f
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl networkLibrary -> g
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl settings -> h
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl accessibilitySettings -> i
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl ttsSettings -> j
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl help -> k
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$HasLabel hasLabel -> l
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuOperation menuOperation -> m
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl[] ENUM$VALUES -> n
    java.lang.String getLabel() -> a
    void click(android.app.Activity) -> a
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl[] values() -> values
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl valueOf(java.lang.String) -> valueOf
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl$1 -> org.geometerplus.android.fbreader.benetech.f:
    void click(android.app.Activity) -> a
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl$10 -> org.geometerplus.android.fbreader.benetech.g:
    void click(android.app.Activity) -> a
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl$11 -> org.geometerplus.android.fbreader.benetech.h:
    void click(android.app.Activity) -> a
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl$12 -> org.geometerplus.android.fbreader.benetech.i:
    org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl this$1 -> a
    java.lang.String val$label -> b
    java.lang.String getLabel() -> a
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl$2 -> org.geometerplus.android.fbreader.benetech.j:
    void click(android.app.Activity) -> a
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl$3 -> org.geometerplus.android.fbreader.benetech.k:
    void click(android.app.Activity) -> a
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl$4 -> org.geometerplus.android.fbreader.benetech.l:
    void click(android.app.Activity) -> a
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl$5 -> org.geometerplus.android.fbreader.benetech.m:
    void click(android.app.Activity) -> a
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl$6 -> org.geometerplus.android.fbreader.benetech.n:
    void click(android.app.Activity) -> a
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl$7 -> org.geometerplus.android.fbreader.benetech.o:
    void click(android.app.Activity) -> a
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl$8 -> org.geometerplus.android.fbreader.benetech.p:
    void click(android.app.Activity) -> a
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuControl$9 -> org.geometerplus.android.fbreader.benetech.q:
    void click(android.app.Activity) -> a
org.geometerplus.android.fbreader.benetech.AccessibleMainMenuActivity$MenuOperation -> org.geometerplus.android.fbreader.benetech.r:
    void click(android.app.Activity) -> a
org.geometerplus.android.fbreader.benetech.AccessibleNavigateActivity -> org.geometerplus.android.fbreader.benetech.AccessibleNavigateActivity:
    android.widget.EditText searchTermEditText -> a
    android.app.Activity parentActivity -> b
    org.geometerplus.android.fbreader.benetech.PageHandler pageHandler -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void gotoPage(java.lang.String) -> a
    void confirmAndClose(java.lang.String) -> b
    android.widget.EditText access$0(org.geometerplus.android.fbreader.benetech.AccessibleNavigateActivity) -> a
    void access$1(org.geometerplus.android.fbreader.benetech.AccessibleNavigateActivity,java.lang.String) -> a
    android.app.Activity access$2(org.geometerplus.android.fbreader.benetech.AccessibleNavigateActivity) -> b
org.geometerplus.android.fbreader.benetech.AccessibleNavigateActivity$1 -> org.geometerplus.android.fbreader.benetech.s:
    org.geometerplus.android.fbreader.benetech.AccessibleNavigateActivity this$0 -> a
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
org.geometerplus.android.fbreader.benetech.AccessibleNavigateActivity$2 -> org.geometerplus.android.fbreader.benetech.t:
    org.geometerplus.android.fbreader.benetech.AccessibleNavigateActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.benetech.AccessibleNavigateActivity$3 -> org.geometerplus.android.fbreader.benetech.u:
    org.geometerplus.android.fbreader.benetech.AccessibleNavigateActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.benetech.AccessibleNavigateActivity$4 -> org.geometerplus.android.fbreader.benetech.v:
    org.geometerplus.android.fbreader.benetech.AccessibleNavigateActivity this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
org.geometerplus.android.fbreader.benetech.DaisyPageHandler -> org.geometerplus.android.fbreader.benetech.w:
    org.geometerplus.fbreader.fbreader.FBReaderApp fbreader -> a
    java.util.LinkedHashMap pageMap -> b
    java.util.LinkedHashMap paragraphToPage -> c
    boolean isNumeric() -> a
    java.lang.String getCurrentPage() -> b
    java.lang.String getLastPage() -> c
    boolean gotoPage(java.lang.String) -> a
org.geometerplus.android.fbreader.benetech.DefaultPageHandler -> org.geometerplus.android.fbreader.benetech.x:
    org.geometerplus.fbreader.fbreader.FBReaderApp fbreader -> a
    org.geometerplus.zlibrary.text.view.ZLTextView$PagePosition pagePosition -> b
    boolean isNumeric() -> a
    java.lang.String getCurrentPage() -> b
    java.lang.String getLastPage() -> c
    boolean gotoPage(java.lang.String) -> a
org.geometerplus.android.fbreader.benetech.LabelsListAdapter -> org.geometerplus.android.fbreader.benetech.y:
    java.util.ArrayList labels -> a
    android.app.Activity myActivity -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.geometerplus.android.fbreader.benetech.LabelsListAdapter$ViewHolder -> org.geometerplus.android.fbreader.benetech.z:
    android.widget.TextView text -> a
    org.geometerplus.android.fbreader.benetech.LabelsListAdapter this$0 -> b
org.geometerplus.android.fbreader.benetech.PageHandler -> org.geometerplus.android.fbreader.benetech.aa:
    java.lang.String getCurrentPage() -> b
    java.lang.String getLastPage() -> c
    boolean gotoPage(java.lang.String) -> a
    boolean isNumeric() -> a
org.geometerplus.android.fbreader.benetech.SpeakActivity -> org.geometerplus.android.fbreader.benetech.SpeakActivity:
    org.geometerplus.android.fbreader.api.ApiServerImplementation myApi -> c
    android.speech.tts.TextToSpeech myTTS -> d
    int myParagraphIndex -> e
    int myParagraphsNumber -> f
    boolean myIsActive -> g
    org.accessibility.SimpleGestureFilter detector -> h
    android.os.Vibrator myVib -> i
    int lastSentence -> j
    boolean justPaused -> k
    boolean resumePlaying -> l
    boolean returnFromOtherScreen -> m
    boolean screenLockEventOccurred -> n
    android.content.BroadcastReceiver mReceiver -> o
    android.view.accessibility.AccessibilityManager accessibilityManager -> p
    long[] VIBE_PATTERN -> q
    java.lang.reflect.Method MotionEvent_getX -> r
    java.lang.reflect.Method MotionEvent_getY -> s
    java.lang.reflect.Method AccessibilityManager_isTouchExplorationEnabled -> t
    android.content.SharedPreferences myPreferences -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp fbReader -> b
    com.hyperionics.fbreader.plugin.tts_plus.TtsSentenceExtractor$SentenceIndex[] mySentences -> u
    int myCurrentSentence -> v
    java.util.HashMap myCallbackMap -> w
    int myInitializationStatus -> x
    android.os.PowerManager$WakeLock myWakeLock -> y
    void initCompatibility() -> d
    boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager) -> a
    void setListener(int,android.view.View$OnClickListener) -> a
    void savePosition() -> b
    void restorePosition() -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onResume() -> onResume
    void setCurrentLocation() -> e
    void onStart() -> onStart
    void onPause() -> onPause
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onInit(int) -> onInit
    void setActionsEnabled(boolean) -> a
    void doFinalInitialization() -> f
    void onUtteranceCompleted(java.lang.String) -> onUtteranceCompleted
    void highlightParagraph() -> g
    void stopTalking() -> h
    void showErrorMessage(java.lang.CharSequence,boolean) -> a
    void setActive(boolean) -> b
    void speakString(java.lang.String,int) -> a
    void gotoPreviousParagraph() -> i
    java.lang.String getNextParagraph() -> j
    void highlightSentence(int) -> b
    void speakParagraph(java.lang.String) -> a
    void playOrPause() -> k
    void goForward() -> l
    void goBackward() -> m
    void showContents() -> n
    void showMainMenu() -> o
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    void setButtonOpacity(float) -> a
    void onSwipe(int) -> a
    void onDoubleTap() -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void access$0(org.geometerplus.android.fbreader.benetech.SpeakActivity) -> a
    void access$1(org.geometerplus.android.fbreader.benetech.SpeakActivity,boolean) -> a
    void access$2(org.geometerplus.android.fbreader.benetech.SpeakActivity,boolean) -> b
    void access$3(org.geometerplus.android.fbreader.benetech.SpeakActivity) -> b
    void access$4(org.geometerplus.android.fbreader.benetech.SpeakActivity) -> c
    void access$5(org.geometerplus.android.fbreader.benetech.SpeakActivity) -> d
    void access$6(org.geometerplus.android.fbreader.benetech.SpeakActivity) -> e
    android.view.accessibility.AccessibilityManager access$7(org.geometerplus.android.fbreader.benetech.SpeakActivity) -> f
    boolean access$8(org.geometerplus.android.fbreader.benetech.SpeakActivity) -> g
org.geometerplus.android.fbreader.benetech.SpeakActivity$1 -> org.geometerplus.android.fbreader.benetech.ab:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.benetech.SpeakActivity$10 -> org.geometerplus.android.fbreader.benetech.ac:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    boolean val$active -> b
    void run() -> run
org.geometerplus.android.fbreader.benetech.SpeakActivity$11 -> org.geometerplus.android.fbreader.benetech.ad:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.benetech.SpeakActivity$12 -> org.geometerplus.android.fbreader.benetech.ae:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.benetech.SpeakActivity$13 -> org.geometerplus.android.fbreader.benetech.af:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.benetech.SpeakActivity$14 -> org.geometerplus.android.fbreader.benetech.ag:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    float val$value -> b
    void run() -> run
org.geometerplus.android.fbreader.benetech.SpeakActivity$2 -> org.geometerplus.android.fbreader.benetech.ah:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
org.geometerplus.android.fbreader.benetech.SpeakActivity$3 -> org.geometerplus.android.fbreader.benetech.ai:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.benetech.SpeakActivity$4 -> org.geometerplus.android.fbreader.benetech.aj:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
org.geometerplus.android.fbreader.benetech.SpeakActivity$5 -> org.geometerplus.android.fbreader.benetech.ak:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.benetech.SpeakActivity$6 -> org.geometerplus.android.fbreader.benetech.al:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.benetech.SpeakActivity$7 -> org.geometerplus.android.fbreader.benetech.am:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
org.geometerplus.android.fbreader.benetech.SpeakActivity$8 -> org.geometerplus.android.fbreader.benetech.an:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    void onCallStateChanged(int,java.lang.String) -> onCallStateChanged
org.geometerplus.android.fbreader.benetech.SpeakActivity$9 -> org.geometerplus.android.fbreader.benetech.ao:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    boolean val$enabled -> b
    void run() -> run
org.geometerplus.android.fbreader.benetech.SpeakActivity$MyHoverListener -> org.geometerplus.android.fbreader.benetech.ap:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    boolean onHover(android.view.View,android.view.MotionEvent) -> onHover
org.geometerplus.android.fbreader.benetech.SpeakActivity$ScreenUnlockReceiver -> org.geometerplus.android.fbreader.benetech.aq:
    org.geometerplus.android.fbreader.benetech.SpeakActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.android.fbreader.crash.FixBooksDirectoryActivity -> org.geometerplus.android.fbreader.crash.FixBooksDirectoryActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.crash.FixBooksDirectoryActivity$1 -> org.geometerplus.android.fbreader.crash.a:
    org.geometerplus.android.fbreader.crash.FixBooksDirectoryActivity this$0 -> a
    android.widget.EditText val$directoryView -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.crash.FixBooksDirectoryActivity$2 -> org.geometerplus.android.fbreader.crash.b:
    org.geometerplus.android.fbreader.crash.FixBooksDirectoryActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.crash.MissingNativeLibraryActivity -> org.geometerplus.android.fbreader.crash.MissingNativeLibraryActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.crash.MissingNativeLibraryActivity$1 -> org.geometerplus.android.fbreader.crash.c:
    org.geometerplus.android.fbreader.crash.MissingNativeLibraryActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.image.ImageViewActivity -> org.geometerplus.android.fbreader.image.ImageViewActivity:
    android.graphics.Bitmap myBitmap -> a
    org.geometerplus.zlibrary.core.util.ZLColor myBgColor -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    org.geometerplus.zlibrary.core.util.ZLColor access$0(org.geometerplus.android.fbreader.image.ImageViewActivity) -> a
    android.graphics.Bitmap access$1(org.geometerplus.android.fbreader.image.ImageViewActivity) -> b
org.geometerplus.android.fbreader.image.ImageViewActivity$ImageView -> org.geometerplus.android.fbreader.image.a:
    android.graphics.Paint myPaint -> b
    int myDx -> c
    int myDy -> d
    float myZoomFactor -> e
    boolean myMotionControl -> f
    int mySavedX -> g
    int mySavedY -> h
    float myStartPinchDistance2 -> i
    float myStartZoomFactor -> j
    org.geometerplus.android.fbreader.image.ImageViewActivity this$0 -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void shift(int,int) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onSingleTouchEvent(android.view.MotionEvent) -> a
    boolean onDoubleTouchEvent(android.view.MotionEvent) -> b
org.geometerplus.android.fbreader.library.BookInfoActivity -> org.geometerplus.android.fbreader.library.BookInfoActivity:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> b
    org.geometerplus.zlibrary.core.image.ZLImage myImage -> c
    boolean myDontReloadBook -> d
    android.view.accessibility.AccessibilityManager accessibilityManager -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.widget.Button findButton(int) -> a
    void setupButton(int,java.lang.String,android.view.View$OnClickListener) -> a
    void setupInfoPair(int,java.lang.String,java.lang.CharSequence) -> a
    void setupCover(org.geometerplus.fbreader.library.Book) -> a
    void setupBookInfo(org.geometerplus.fbreader.library.Book) -> b
    void setupAnnotation(org.geometerplus.fbreader.library.Book) -> c
    void setupFileInfo(org.geometerplus.fbreader.library.Book) -> d
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    boolean access$0(org.geometerplus.android.fbreader.library.BookInfoActivity) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile access$1(org.geometerplus.android.fbreader.library.BookInfoActivity) -> b
    void access$2(org.geometerplus.android.fbreader.library.BookInfoActivity,org.geometerplus.fbreader.library.Book) -> a
    void access$3(org.geometerplus.android.fbreader.library.BookInfoActivity,boolean) -> a
org.geometerplus.android.fbreader.library.BookInfoActivity$1 -> org.geometerplus.android.fbreader.library.a:
    org.geometerplus.android.fbreader.library.BookInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.library.BookInfoActivity$2 -> org.geometerplus.android.fbreader.library.b:
    org.geometerplus.android.fbreader.library.BookInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.library.BookInfoActivity$3 -> org.geometerplus.android.fbreader.library.c:
    org.geometerplus.android.fbreader.library.BookInfoActivity this$0 -> a
    org.geometerplus.fbreader.library.Book val$book -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.library.KillerCallback -> org.geometerplus.android.fbreader.library.KillerCallback:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.android.fbreader.library.LibraryActivity -> org.geometerplus.android.fbreader.library.LibraryActivity:
    boolean ourToBeKilled -> a
    org.geometerplus.fbreader.library.BooksDatabase myDatabase -> f
    org.geometerplus.fbreader.library.Library myLibrary -> g
    org.geometerplus.fbreader.library.Book mySelectedBook -> h
    android.app.Dialog dialog -> i
    org.geometerplus.zlibrary.core.resources.ZLResource resource -> j
    android.widget.ListView list -> b
    android.app.Activity myActivity -> c
    org.geometerplus.zlibrary.core.options.ZLStringOption BookSearchPatternOption -> d
    void onCreate(android.os.Bundle) -> onCreate
    org.geometerplus.fbreader.tree.FBTree getTreeByKey(org.geometerplus.fbreader.tree.FBTree$Key) -> a
    void onStart() -> onStart
    void onStop() -> onStop
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    boolean isTreeSelected(org.geometerplus.fbreader.tree.FBTree) -> a
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void showBookInfo(org.geometerplus.fbreader.library.Book) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void openSearchResults() -> b
    boolean onSearchRequested() -> onSearchRequested
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void createBookContextMenu(android.view.ContextMenu,org.geometerplus.fbreader.library.Book) -> a
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onContextItemSelected(int,org.geometerplus.fbreader.library.Book) -> a
    void notifyFavoritesAction(int) -> a
    void openBook(org.geometerplus.fbreader.library.Book) -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    void tryToDeleteBook(org.geometerplus.fbreader.library.Book) -> c
    void deleteBook(org.geometerplus.fbreader.library.Book,int) -> a
    void onLibraryChanged(org.geometerplus.fbreader.library.Library$ChangeListener$Code) -> a
    void tryToAccessiblyDeleteBook(org.geometerplus.fbreader.library.Book) -> d
    void access$0(org.geometerplus.android.fbreader.library.LibraryActivity,org.geometerplus.fbreader.library.Book,int) -> a
    android.app.Dialog access$1(org.geometerplus.android.fbreader.library.LibraryActivity) -> a
    void access$2(org.geometerplus.android.fbreader.library.LibraryActivity,org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.fbreader.library.Library access$3(org.geometerplus.android.fbreader.library.LibraryActivity) -> b
    void access$4(org.geometerplus.android.fbreader.library.LibraryActivity,int) -> a
    void access$5(org.geometerplus.android.fbreader.library.LibraryActivity,org.geometerplus.fbreader.library.Book) -> b
    org.geometerplus.fbreader.tree.FBTree access$6(org.geometerplus.android.fbreader.library.LibraryActivity) -> c
    void access$7(org.geometerplus.android.fbreader.library.LibraryActivity) -> d
org.geometerplus.android.fbreader.library.LibraryActivity$1 -> org.geometerplus.android.fbreader.library.d:
    org.geometerplus.android.fbreader.library.LibraryActivity this$0 -> a
    org.geometerplus.fbreader.library.Library$ChangeListener$Code val$code -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$library$Library$ChangeListener$Code -> c
    void run() -> run
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$library$Library$ChangeListener$Code() -> a
org.geometerplus.android.fbreader.library.LibraryActivity$2 -> org.geometerplus.android.fbreader.library.e:
    org.geometerplus.android.fbreader.library.LibraryActivity this$0 -> a
    org.geometerplus.fbreader.library.Book val$book -> b
    android.app.Dialog val$confirmDialog -> c
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.library.LibraryActivity$3 -> org.geometerplus.android.fbreader.library.f:
    org.geometerplus.android.fbreader.library.LibraryActivity this$0 -> a
    android.app.Dialog val$confirmDialog -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.library.LibraryActivity$BookDeleter -> org.geometerplus.android.fbreader.library.g:
    org.geometerplus.fbreader.library.Book myBook -> b
    int myMode -> c
    org.geometerplus.android.fbreader.library.LibraryActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.library.LibraryActivity$MenuClickListener -> org.geometerplus.android.fbreader.library.h:
    org.geometerplus.fbreader.library.Book book -> b
    org.geometerplus.android.fbreader.library.LibraryActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.geometerplus.android.fbreader.library.LibrarySearchActivity -> org.geometerplus.android.fbreader.library.LibrarySearchActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.library.LibraryTreeAdapter -> org.geometerplus.android.fbreader.library.i:
    int myCoverWidth -> a
    int myCoverHeight -> b
    java.lang.Runnable myInvalidateViewsRunnable -> c
    android.graphics.Bitmap getCoverBitmap(org.geometerplus.zlibrary.core.image.ZLImage) -> a
    android.widget.ImageView getCoverView(android.view.View) -> a
    android.view.View createView(android.view.View,android.view.ViewGroup,org.geometerplus.fbreader.library.LibraryTree) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getCoverResourceId(org.geometerplus.fbreader.library.LibraryTree) -> a
    org.geometerplus.android.fbreader.tree.TreeActivity access$0(org.geometerplus.android.fbreader.library.LibraryTreeAdapter) -> a
org.geometerplus.android.fbreader.library.LibraryTreeAdapter$1 -> org.geometerplus.android.fbreader.library.j:
    org.geometerplus.android.fbreader.library.LibraryTreeAdapter this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.SQLiteBooksDatabase -> org.geometerplus.android.fbreader.library.k:
    java.lang.String myInstanceId -> a
    android.database.sqlite.SQLiteDatabase myDatabase -> b
    boolean myTagCacheIsInitialized -> c
    java.util.HashMap myIdByTag -> d
    java.util.HashMap myTagById -> e
    android.database.sqlite.SQLiteStatement myUpdateBookInfoStatement -> f
    android.database.sqlite.SQLiteStatement myInsertBookInfoStatement -> g
    android.database.sqlite.SQLiteStatement myDeleteBookAuthorsStatement -> h
    android.database.sqlite.SQLiteStatement myGetAuthorIdStatement -> i
    android.database.sqlite.SQLiteStatement myInsertAuthorStatement -> j
    android.database.sqlite.SQLiteStatement myInsertBookAuthorStatement -> k
    android.database.sqlite.SQLiteStatement myGetTagIdStatement -> l
    android.database.sqlite.SQLiteStatement myCreateTagIdStatement -> m
    android.database.sqlite.SQLiteStatement myDeleteBookTagsStatement -> n
    android.database.sqlite.SQLiteStatement myInsertBookTagStatement -> o
    android.database.sqlite.SQLiteStatement myGetSeriesIdStatement -> p
    android.database.sqlite.SQLiteStatement myInsertSeriesStatement -> q
    android.database.sqlite.SQLiteStatement myInsertBookSeriesStatement -> r
    android.database.sqlite.SQLiteStatement myDeleteBookSeriesStatement -> s
    android.database.sqlite.SQLiteStatement myRemoveFileInfoStatement -> t
    android.database.sqlite.SQLiteStatement myInsertFileInfoStatement -> u
    android.database.sqlite.SQLiteStatement myUpdateFileInfoStatement -> v
    android.database.sqlite.SQLiteStatement mySaveRecentBookStatement -> w
    android.database.sqlite.SQLiteStatement myAddToFavoritesStatement -> x
    android.database.sqlite.SQLiteStatement myRemoveFromFavoritesStatement -> y
    android.database.sqlite.SQLiteStatement myInsertBookmarkStatement -> z
    android.database.sqlite.SQLiteStatement myUpdateBookmarkStatement -> A
    android.database.sqlite.SQLiteStatement myDeleteBookmarkStatement -> B
    android.database.sqlite.SQLiteStatement myStorePositionStatement -> C
    android.database.sqlite.SQLiteStatement myInsertIntoBookListStatement -> D
    android.database.sqlite.SQLiteStatement myDeleteFromBookListStatement -> E
    android.database.sqlite.SQLiteStatement myDeleteVisitedHyperlinksStatement -> F
    android.database.sqlite.SQLiteStatement myStoreVisitedHyperlinksStatement -> G
    void executeAsATransaction(java.lang.Runnable) -> a
    void migrate(android.content.Context) -> a
    org.geometerplus.fbreader.library.Book loadBook(long) -> a
    void reloadBook(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.fbreader.library.Book loadBookByFile(long,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void initTagCache() -> f
    java.util.Map loadBooks(org.geometerplus.fbreader.library.FileInfoSet,boolean) -> a
    void setExistingFlag(java.util.Collection,boolean) -> a
    void updateBookInfo(long,long,java.lang.String,java.lang.String,java.lang.String) -> a
    long insertBookInfo(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String,java.lang.String,java.lang.String) -> a
    void deleteAllBookAuthors(long) -> b
    void saveBookAuthorInfo(long,long,org.geometerplus.fbreader.library.Author) -> a
    java.util.List loadAuthors(long) -> c
    long getTagId(org.geometerplus.fbreader.library.Tag) -> a
    void deleteAllBookTags(long) -> d
    void saveBookTagInfo(long,org.geometerplus.fbreader.library.Tag) -> a
    org.geometerplus.fbreader.library.Tag getTagById(long) -> o
    java.util.List loadTags(long) -> e
    void saveBookSeriesInfo(long,org.geometerplus.fbreader.library.SeriesInfo) -> a
    org.geometerplus.fbreader.library.SeriesInfo loadSeriesInfo(long) -> f
    void removeFileInfo(long) -> g
    void saveFileInfo(org.geometerplus.fbreader.library.FileInfo) -> a
    java.util.Collection loadFileInfos() -> a
    java.util.Collection loadFileInfos(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.Collection loadFileInfos(long) -> h
    void saveRecentBookIds(java.util.List) -> a
    java.util.List loadRecentBookIds() -> b
    void addToFavorites(long) -> i
    void removeFromFavorites(long) -> j
    java.util.List loadFavoritesIds() -> c
    java.util.List loadBookmarks(long,boolean) -> a
    java.util.List loadAllVisibleBookmarks() -> d
    long saveBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void deleteBookmark(org.geometerplus.fbreader.library.Bookmark) -> b
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStoredPosition(long) -> k
    void storePosition(long,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    boolean insertIntoBookList(long) -> l
    boolean deleteFromBookList(long) -> m
    void deleteVisitedHyperlinks(long) -> p
    void addVisitedHyperlink(long,java.lang.String) -> a
    java.util.Collection loadVisitedHyperlinks(long) -> n
    void createTables() -> g
    void updateTables1() -> h
    void updateTables2() -> i
    void updateTables3() -> j
    void updateTables4() -> k
    void updateTables5() -> l
    void updateTables6() -> m
    void updateTables7() -> n
    void updateTables8() -> o
    void updateTables9() -> p
    void updateTables10() -> q
    void updateTables11() -> r
    void updateTables12() -> s
    void updateTables13() -> t
    void updateTables14() -> u
    void updateTables15() -> v
    void updateTables16() -> w
    void updateTables17() -> x
    android.database.sqlite.SQLiteDatabase access$0(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> a
    void access$1(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> b
    void access$2(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> c
    void access$3(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> d
    void access$4(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> e
    void access$5(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> f
    void access$6(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> g
    void access$7(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> h
    void access$8(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> i
    void access$9(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> j
    void access$10(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> k
    void access$11(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> l
    void access$12(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> m
    void access$13(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> n
    void access$14(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> o
    void access$15(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> p
    void access$16(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> q
    void access$17(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> r
    void access$18(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> s
    android.database.sqlite.SQLiteStatement access$19(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> t
org.geometerplus.android.fbreader.library.SQLiteBooksDatabase$1 -> org.geometerplus.android.fbreader.library.l:
    org.geometerplus.android.fbreader.library.SQLiteBooksDatabase this$0 -> a
    int val$version -> b
    void run() -> run
org.geometerplus.android.fbreader.library.SQLiteBooksDatabase$2 -> org.geometerplus.android.fbreader.library.m:
    org.geometerplus.android.fbreader.library.SQLiteBooksDatabase this$0 -> a
    java.util.List val$ids -> b
    void run() -> run
org.geometerplus.android.fbreader.network.AddCatalogMenuActivity -> org.geometerplus.android.fbreader.network.AddCatalogMenuActivity:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> b
    void addItem(java.lang.String,int) -> a
    void init() -> a
    java.lang.String getAction() -> b
    void runItem(org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo) -> a
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity -> org.geometerplus.android.fbreader.network.AddCustomCatalogActivity:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    org.geometerplus.fbreader.network.ICustomNetworkLink myLink -> b
    boolean myEditNotAdd -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onOkButton() -> a
    boolean isEmptyString(java.lang.String) -> a
    void setExtraFieldsVisibility(boolean) -> a
    void setTextById(int,java.lang.String) -> a
    java.lang.String getTextById(int) -> a
    void setupButton(int,java.lang.String,android.view.View$OnClickListener) -> a
    void setTextFromResource(int,java.lang.String) -> b
    void setErrorText(java.lang.String) -> b
    void setErrorByKey(java.lang.String) -> c
    void loadInfoByUri(android.net.Uri) -> a
    void access$0(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity) -> a
    org.geometerplus.fbreader.network.ICustomNetworkLink access$1(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity) -> b
    void access$2(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity,int,java.lang.String) -> a
    void access$3(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity,boolean) -> a
    void access$4(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity,org.geometerplus.fbreader.network.ICustomNetworkLink) -> a
    void access$5(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity,java.lang.String) -> a
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$1 -> org.geometerplus.android.fbreader.network.a:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$2 -> org.geometerplus.android.fbreader.network.b:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$3 -> org.geometerplus.android.fbreader.network.c:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    int val$visibility -> b
    void run() -> run
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$4 -> org.geometerplus.android.fbreader.network.d:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    java.lang.String val$errorText -> b
    void run() -> run
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$5 -> org.geometerplus.android.fbreader.network.e:
    java.lang.String myError -> b
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void run() -> run
    java.lang.String access$0(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$5) -> a
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity access$1(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$5) -> b
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$5$1 -> org.geometerplus.android.fbreader.network.f:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$5 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.AuthenticationActivity -> org.geometerplus.android.fbreader.network.AuthenticationActivity:
    java.util.Map ourOnSuccessRunnableMap -> a
    long ourNextCode -> b
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> c
    org.geometerplus.fbreader.network.INetworkLink myLink -> d
    android.widget.Button myOkButton -> e
    java.util.Timer myOkButtonUpdater -> f
    android.widget.TextView myUsernameView -> g
    boolean myCustomAuthentication -> h
    java.lang.Runnable myOnSuccessRunnable -> i
    android.content.Intent registerRunnable(android.content.Intent,java.lang.Runnable) -> a
    void initCredentialsCreator(android.content.Context) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void setError(java.lang.String) -> a
    void finishOk(java.lang.String,java.lang.String) -> a
    void runCustomAuthentication(java.lang.String,java.lang.String) -> b
    android.widget.TextView findTextView(int) -> a
    void onResume() -> onResume
    void onPause() -> onPause
    void onStop() -> onStop
    android.widget.TextView access$0(org.geometerplus.android.fbreader.network.AuthenticationActivity) -> a
    android.widget.TextView access$1(org.geometerplus.android.fbreader.network.AuthenticationActivity,int) -> a
    boolean access$2(org.geometerplus.android.fbreader.network.AuthenticationActivity) -> b
    void access$3(org.geometerplus.android.fbreader.network.AuthenticationActivity,java.lang.String,java.lang.String) -> a
    void access$4(org.geometerplus.android.fbreader.network.AuthenticationActivity,java.lang.String,java.lang.String) -> b
    org.geometerplus.fbreader.network.INetworkLink access$5(org.geometerplus.android.fbreader.network.AuthenticationActivity) -> c
    java.lang.Runnable access$6(org.geometerplus.android.fbreader.network.AuthenticationActivity) -> d
    void access$7(org.geometerplus.android.fbreader.network.AuthenticationActivity,java.lang.String) -> a
    android.widget.Button access$8(org.geometerplus.android.fbreader.network.AuthenticationActivity) -> e
org.geometerplus.android.fbreader.network.AuthenticationActivity$1 -> org.geometerplus.android.fbreader.network.g:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AuthenticationActivity$2 -> org.geometerplus.android.fbreader.network.h:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    void onClick(android.view.View) -> onClick
    org.geometerplus.android.fbreader.network.AuthenticationActivity access$0(org.geometerplus.android.fbreader.network.AuthenticationActivity$2) -> a
org.geometerplus.android.fbreader.network.AuthenticationActivity$2$1 -> org.geometerplus.android.fbreader.network.i:
    org.geometerplus.android.fbreader.network.AuthenticationActivity$2 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.AuthenticationActivity$3 -> org.geometerplus.android.fbreader.network.j:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> b
    java.lang.String val$username -> c
    java.lang.String val$password -> d
    void run() -> run
    org.geometerplus.android.fbreader.network.AuthenticationActivity access$0(org.geometerplus.android.fbreader.network.AuthenticationActivity$3) -> a
org.geometerplus.android.fbreader.network.AuthenticationActivity$3$1 -> org.geometerplus.android.fbreader.network.k:
    org.geometerplus.android.fbreader.network.AuthenticationActivity$3 this$1 -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkException val$e -> b
    void run() -> run
org.geometerplus.android.fbreader.network.AuthenticationActivity$4 -> org.geometerplus.android.fbreader.network.l:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    void run() -> run
    org.geometerplus.android.fbreader.network.AuthenticationActivity access$0(org.geometerplus.android.fbreader.network.AuthenticationActivity$4) -> a
org.geometerplus.android.fbreader.network.AuthenticationActivity$4$1 -> org.geometerplus.android.fbreader.network.m:
    org.geometerplus.android.fbreader.network.AuthenticationActivity$4 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.AuthenticationActivity$CredentialsCreator -> org.geometerplus.android.fbreader.network.n:
    android.content.Context myContext -> a
    void startAuthenticationDialog(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
org.geometerplus.android.fbreader.network.AuthorizationMenuActivity -> org.geometerplus.android.fbreader.network.AuthorizationMenuActivity:
    org.geometerplus.fbreader.network.INetworkLink myLink -> b
    void runMenu(android.content.Context,org.geometerplus.fbreader.network.INetworkLink) -> a
    void runMenu(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,int) -> a
    void init() -> a
    java.lang.String getAction() -> b
    void runItem(org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo) -> a
org.geometerplus.android.fbreader.network.BookDownloader -> org.geometerplus.android.fbreader.network.BookDownloader:
    boolean acceptsUri(android.net.Uri) -> a
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.network.BookDownloaderInterface -> org.geometerplus.android.fbreader.network.o:
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BookDownloaderInterface$Stub -> org.geometerplus.android.fbreader.network.p:
    org.geometerplus.android.fbreader.network.BookDownloaderInterface asInterface(android.os.IBinder) -> a
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.geometerplus.android.fbreader.network.BookDownloaderInterface$Stub$Proxy -> org.geometerplus.android.fbreader.network.q:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BookDownloaderService -> org.geometerplus.android.fbreader.network.BookDownloaderService:
    java.util.Set myDownloadingURLs -> a
    java.util.Set myOngoingNotifications -> b
    int myServiceCounter -> c
    void doStart() -> b
    void doStop() -> c
    org.geometerplus.zlibrary.core.resources.ZLResource getResource() -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    void onStart(android.content.Intent,int) -> onStart
    void showMessage(java.lang.String,java.lang.String) -> a
    android.content.Intent getFBReaderIntent(java.io.File) -> a
    android.app.Notification createDownloadFinishNotification(java.io.File,java.lang.String,boolean) -> a
    android.app.Notification createDownloadProgressNotification(java.lang.String) -> a
    void sendDownloaderCallback() -> d
    void startFileDownload(java.lang.String,java.lang.String,java.io.File,java.lang.String) -> a
    java.util.Set access$0(org.geometerplus.android.fbreader.network.BookDownloaderService) -> a
    java.util.Set access$1(org.geometerplus.android.fbreader.network.BookDownloaderService) -> b
    android.app.Notification access$2(org.geometerplus.android.fbreader.network.BookDownloaderService,java.io.File,java.lang.String,boolean) -> a
    void access$3(org.geometerplus.android.fbreader.network.BookDownloaderService) -> c
    void access$4(org.geometerplus.android.fbreader.network.BookDownloaderService) -> d
org.geometerplus.android.fbreader.network.BookDownloaderService$1 -> org.geometerplus.android.fbreader.network.r:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BookDownloaderService$2 -> org.geometerplus.android.fbreader.network.s:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    android.app.Notification val$progressNotification -> b
    int val$notificationId -> c
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.BookDownloaderService$3 -> org.geometerplus.android.fbreader.network.t:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    java.lang.String val$urlString -> b
    int val$notificationId -> c
    java.io.File val$file -> d
    java.lang.String val$title -> e
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.BookDownloaderService$4 -> org.geometerplus.android.fbreader.network.u:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    android.os.Handler val$progressHandler -> f
    java.io.File val$file -> g
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.android.fbreader.network.BookDownloaderService$5 -> org.geometerplus.android.fbreader.network.v:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    android.os.Handler val$downloadFinishHandler -> b
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest val$request -> c
    java.io.File val$file -> d
    void run() -> run
org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection -> org.geometerplus.android.fbreader.network.w:
    org.geometerplus.android.fbreader.network.BookDownloaderInterface myInterface -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BuyBooksActivity -> org.geometerplus.android.fbreader.network.BuyBooksActivity:
    org.geometerplus.fbreader.network.NetworkLibrary myLibrary -> a
    org.geometerplus.fbreader.network.INetworkLink myLink -> b
    java.util.List myBooks -> c
    org.geometerplus.zlibrary.core.money.Money myCost -> d
    org.geometerplus.zlibrary.core.money.Money myAccount -> e
    int[] $SWITCH_TABLE$org$geometerplus$android$fbreader$network$BuyBooksActivity$AuthorizationState -> f
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkLibrary$ChangeListener$Code -> g
    void run(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkBookTree) -> a
    void run(android.app.Activity,java.util.List) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void setupUI(org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState) -> a
    void setupUIInternal(org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState) -> b
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    org.geometerplus.zlibrary.core.money.Money calculateCost() -> c
    void refreshAccountInformation() -> d
    void refreshAccountInformationInternal() -> e
    java.lang.Runnable buyRunnable() -> f
    void onLibraryChanged(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code,java.lang.Object[]) -> a
    void updateAuthorizationState() -> g
    void access$0(org.geometerplus.android.fbreader.network.BuyBooksActivity,org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState) -> a
    org.geometerplus.fbreader.network.INetworkLink access$1(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> a
    void access$2(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> b
    org.geometerplus.zlibrary.core.money.Money access$3(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> c
    org.geometerplus.zlibrary.core.money.Money access$4(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> d
    java.lang.Runnable access$5(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> e
    int[] $SWITCH_TABLE$org$geometerplus$android$fbreader$network$BuyBooksActivity$AuthorizationState() -> a
    void access$7(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> f
    void access$8(org.geometerplus.android.fbreader.network.BuyBooksActivity,org.geometerplus.zlibrary.core.money.Money) -> a
    org.geometerplus.zlibrary.core.money.Money access$9(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> g
    void access$10(org.geometerplus.android.fbreader.network.BuyBooksActivity,org.geometerplus.zlibrary.core.money.Money) -> b
    void access$11(org.geometerplus.android.fbreader.network.BuyBooksActivity,org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState) -> b
    org.geometerplus.fbreader.network.NetworkLibrary access$12(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> h
    java.util.List access$13(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> i
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkLibrary$ChangeListener$Code() -> b
org.geometerplus.android.fbreader.network.BuyBooksActivity$1 -> org.geometerplus.android.fbreader.network.x:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState val$state -> b
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$10 -> org.geometerplus.android.fbreader.network.y:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$11 -> org.geometerplus.android.fbreader.network.z:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void run() -> run
    org.geometerplus.android.fbreader.network.BuyBooksActivity access$0(org.geometerplus.android.fbreader.network.BuyBooksActivity$11) -> a
org.geometerplus.android.fbreader.network.BuyBooksActivity$11$1 -> org.geometerplus.android.fbreader.network.aa:
    org.geometerplus.android.fbreader.network.BuyBooksActivity$11 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$12 -> org.geometerplus.android.fbreader.network.ab:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void run() -> run
    org.geometerplus.android.fbreader.network.BuyBooksActivity access$0(org.geometerplus.android.fbreader.network.BuyBooksActivity$12) -> a
org.geometerplus.android.fbreader.network.BuyBooksActivity$12$1 -> org.geometerplus.android.fbreader.network.ac:
    org.geometerplus.android.fbreader.network.BuyBooksActivity$12 this$1 -> a
    org.geometerplus.fbreader.network.NetworkBookItem val$b -> b
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$12$2 -> org.geometerplus.android.fbreader.network.ad:
    org.geometerplus.android.fbreader.network.BuyBooksActivity$12 this$1 -> a
    org.geometerplus.zlibrary.core.resources.ZLResource val$boxResource -> b
    org.geometerplus.zlibrary.core.network.ZLNetworkException val$e -> c
    org.geometerplus.zlibrary.core.resources.ZLResource val$buttonResource -> d
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$13 -> org.geometerplus.android.fbreader.network.ae:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$2 -> org.geometerplus.android.fbreader.network.af:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$3 -> org.geometerplus.android.fbreader.network.ag:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$4 -> org.geometerplus.android.fbreader.network.ah:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$5 -> org.geometerplus.android.fbreader.network.ai:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$6 -> org.geometerplus.android.fbreader.network.aj:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$7 -> org.geometerplus.android.fbreader.network.ak:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$8 -> org.geometerplus.android.fbreader.network.al:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$9 -> org.geometerplus.android.fbreader.network.am:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState -> org.geometerplus.android.fbreader.network.an:
    org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState Authorized -> a
    org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState NotAuthorized -> b
    org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState[] ENUM$VALUES -> c
    org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState[] values() -> values
    org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState valueOf(java.lang.String) -> valueOf
org.geometerplus.android.fbreader.network.ListenerCallback -> org.geometerplus.android.fbreader.network.ListenerCallback:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void processSignup(org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationManager,android.content.Intent) -> b
    void access$0(org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationManager,android.content.Intent) -> a
org.geometerplus.android.fbreader.network.ListenerCallback$1 -> org.geometerplus.android.fbreader.network.ao:
    org.geometerplus.android.fbreader.network.ListenerCallback this$0 -> a
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> b
    android.content.Intent val$intent -> c
    void run() -> run
org.geometerplus.android.fbreader.network.MenuActivity -> org.geometerplus.android.fbreader.network.ap:
    java.util.List myInfos -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean finishInitialization() -> c
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void init() -> a
    java.lang.String getAction() -> b
    void runItem(org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo) -> a
org.geometerplus.android.fbreader.network.MenuActivity$ActionListAdapter -> org.geometerplus.android.fbreader.network.aq:
    org.geometerplus.android.fbreader.network.MenuActivity this$0 -> a
    int getCount() -> getCount
    org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity -> org.geometerplus.android.fbreader.network.NetworkBookInfoActivity:
    org.geometerplus.fbreader.network.tree.NetworkBookTree myTree -> a
    org.geometerplus.fbreader.network.NetworkBookItem myBook -> b
    android.view.View myMainView -> c
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> d
    org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection myConnection -> e
    boolean myInitializerStarted -> f
    java.lang.Runnable myInitializer -> g
    java.lang.Runnable myViewInitializer -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void setTextById(int,java.lang.CharSequence) -> a
    void setTextFromResource(int,java.lang.String) -> a
    void onDestroy() -> onDestroy
    void setupDescription() -> a
    void setupExtraLinks() -> b
    void setPairLabelTextFromResource(int,java.lang.String) -> b
    void setPairValueText(int,java.lang.CharSequence) -> b
    void setupInfo() -> c
    void setupCover() -> d
    void setupButtons() -> e
    void updateView() -> f
    void onStart() -> onStart
    void onStop() -> onStop
    void onLibraryChanged(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code,java.lang.Object[]) -> a
    boolean access$0(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> a
    void access$1(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity,boolean) -> a
    org.geometerplus.fbreader.network.NetworkBookItem access$2(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> b
    void access$3(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity,org.geometerplus.fbreader.network.NetworkBookItem) -> a
    void access$4(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity,org.geometerplus.fbreader.network.tree.NetworkBookTree) -> a
    org.geometerplus.fbreader.network.tree.NetworkBookTree access$5(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> c
    java.lang.Runnable access$6(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> d
    void access$7(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity,org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection) -> a
    org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection access$8(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> e
    void access$9(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> f
    void access$10(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> g
    void access$11(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> h
    void access$12(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> i
    void access$13(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> j
    void access$14(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> k
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$1 -> org.geometerplus.android.fbreader.network.ar:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$2 -> org.geometerplus.android.fbreader.network.as:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$3 -> org.geometerplus.android.fbreader.network.at:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo val$relatedInfo -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$4 -> org.geometerplus.android.fbreader.network.au:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    org.geometerplus.zlibrary.core.image.ZLLoadableImage val$img -> b
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageManager val$mgr -> c
    int val$maxWidth -> d
    int val$maxHeight -> e
    android.widget.ImageView val$coverView -> f
    android.view.View val$rootView -> g
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$5 -> org.geometerplus.android.fbreader.network.av:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    org.geometerplus.android.fbreader.network.action.NetworkBookActions$NBAction val$a -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$6 -> org.geometerplus.android.fbreader.network.aw:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkLibraryActivity -> org.geometerplus.android.fbreader.network.NetworkLibraryActivity:
    org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection Connection -> a
    java.util.List myOptionsMenuActions -> b
    java.util.List myContextMenuActions -> c
    java.util.List myListClickActions -> d
    android.content.Intent myDeferredIntent -> f
    boolean mySingleCatalog -> g
    android.view.accessibility.AccessibilityManager accessibilityManager -> h
    boolean showAccessibilityWarning -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> j
    void onCreate(android.os.Bundle) -> onCreate
    org.geometerplus.fbreader.network.NetworkTree getTreeByKey(org.geometerplus.fbreader.tree.FBTree$Key) -> b
    void onStart() -> onStart
    void onResume() -> onResume
    void onStop() -> onStop
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onDestroy() -> onDestroy
    boolean openTreeByIntent(android.content.Intent) -> b
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onSearchRequested() -> onSearchRequested
    boolean isTreeSelected(org.geometerplus.fbreader.tree.FBTree) -> a
    boolean isTreeInvisible(org.geometerplus.fbreader.tree.FBTree) -> b
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void fillOptionsMenuList() -> f
    void fillContextMenuList() -> g
    void fillListClickList() -> h
    java.util.List getContextMenuActions(org.geometerplus.fbreader.network.NetworkTree) -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void updateLoadingProgress() -> i
    void onLibraryChanged(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code,java.lang.Object[]) -> a
    org.geometerplus.fbreader.network.NetworkTree getLoadableNetworkTree(org.geometerplus.fbreader.network.NetworkTree) -> b
    void onCurrentTreeChanged() -> a
    void showInitLibraryDialog(java.lang.String) -> a
    void checkAndRun(org.geometerplus.android.fbreader.network.action.Action,org.geometerplus.fbreader.network.NetworkTree) -> a
    org.geometerplus.fbreader.tree.FBTree getTreeByKey(org.geometerplus.fbreader.tree.FBTree$Key) -> a
    void access$1(org.geometerplus.android.fbreader.network.NetworkLibraryActivity) -> a
    org.geometerplus.fbreader.tree.FBTree access$2(org.geometerplus.android.fbreader.network.NetworkLibraryActivity) -> b
    void access$3(org.geometerplus.android.fbreader.network.NetworkLibraryActivity,java.lang.String) -> a
    android.content.Intent access$4(org.geometerplus.android.fbreader.network.NetworkLibraryActivity) -> c
    boolean access$5(org.geometerplus.android.fbreader.network.NetworkLibraryActivity,android.content.Intent) -> a
    void access$6(org.geometerplus.android.fbreader.network.NetworkLibraryActivity,android.content.Intent) -> b
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> b
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$1 -> org.geometerplus.android.fbreader.network.ax:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code val$code -> b
    java.lang.Object[] val$params -> c
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkLibrary$ChangeListener$Code -> d
    void run() -> run
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkLibrary$ChangeListener$Code() -> a
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$2 -> org.geometerplus.android.fbreader.network.ay:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$3 -> org.geometerplus.android.fbreader.network.az:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    android.content.DialogInterface$OnClickListener val$listener -> b
    void onCancel(android.content.DialogInterface) -> onCancel
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$4 -> org.geometerplus.android.fbreader.network.ba:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree val$catalogTree -> b
    org.geometerplus.android.fbreader.network.action.Action val$action -> c
    org.geometerplus.fbreader.network.NetworkTree val$tree -> d
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkLibraryAdapter -> org.geometerplus.android.fbreader.network.bb:
    int myCoverWidth -> a
    int myCoverHeight -> b
    java.lang.Runnable myInvalidateViewsRunnable -> c
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setupCover(android.widget.ImageView,org.geometerplus.fbreader.network.NetworkTree,int,int) -> a
    org.geometerplus.android.fbreader.tree.TreeActivity access$0(org.geometerplus.android.fbreader.network.NetworkLibraryAdapter) -> a
org.geometerplus.android.fbreader.network.NetworkLibraryAdapter$1 -> org.geometerplus.android.fbreader.network.bc:
    org.geometerplus.android.fbreader.network.NetworkLibraryAdapter this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkLibraryPrimaryActivity -> org.geometerplus.android.fbreader.network.NetworkLibraryPrimaryActivity:
org.geometerplus.android.fbreader.network.NetworkLibrarySecondaryActivity -> org.geometerplus.android.fbreader.network.NetworkLibrarySecondaryActivity:
org.geometerplus.android.fbreader.network.NetworkNotifications -> org.geometerplus.android.fbreader.network.bd:
    org.geometerplus.android.fbreader.network.NetworkNotifications ourInstance -> a
    int myBookDownloadingId -> b
    org.geometerplus.android.fbreader.network.NetworkNotifications Instance() -> a
    int getBookDownloadingId() -> b
org.geometerplus.android.fbreader.network.NetworkSearchActivity -> org.geometerplus.android.fbreader.network.NetworkSearchActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase -> org.geometerplus.android.fbreader.network.be:
    android.database.sqlite.SQLiteDatabase myDatabase -> a
    android.database.sqlite.SQLiteStatement myInsertCustomLinkStatement -> b
    android.database.sqlite.SQLiteStatement myUpdateCustomLinkStatement -> c
    android.database.sqlite.SQLiteStatement myInsertCustomLinkUrlStatement -> d
    android.database.sqlite.SQLiteStatement myUpdateCustomLinkUrlStatement -> e
    void migrate() -> c
    void executeAsATransaction(java.lang.Runnable) -> a
    java.util.List listLinks() -> a
    void saveLink(org.geometerplus.fbreader.network.INetworkLink) -> a
    void deleteLink(org.geometerplus.fbreader.network.INetworkLink) -> b
    void createTables() -> d
    void updateTables1() -> e
    void updateTables2() -> f
    void updateTables3() -> g
    void updateTables4() -> h
    void updateTables5() -> i
    android.database.sqlite.SQLiteStatement access$0(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> a
    android.database.sqlite.SQLiteDatabase access$1(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> b
    void access$2(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> a
    android.database.sqlite.SQLiteStatement access$3(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> c
    void access$4(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> b
    android.database.sqlite.SQLiteStatement access$5(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> d
    void access$6(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> c
    android.database.sqlite.SQLiteStatement access$7(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> e
    void access$8(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> d
org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase$1 -> org.geometerplus.android.fbreader.network.bf:
    org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase this$0 -> a
    org.geometerplus.fbreader.network.INetworkLink val$link -> b
    void run() -> run
org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase$2 -> org.geometerplus.android.fbreader.network.bg:
    org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase this$0 -> a
    org.geometerplus.fbreader.network.INetworkLink val$link -> b
    void run() -> run
org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity -> org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity:
    java.lang.String[] ourServiceTypes -> a
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> b
    android.net.wifi.WifiManager$MulticastLock myLock -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    java.util.List getLocalIpAddresses() -> b
    void scan() -> c
    void setup(java.util.ArrayList,java.lang.String) -> a
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void access$0(org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity) -> a
    java.util.List access$1(org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity) -> b
    org.geometerplus.zlibrary.core.resources.ZLResource access$2(org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity) -> c
    java.lang.String[] access$3() -> a
    void access$4(org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity,java.util.ArrayList,java.lang.String) -> a
org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity$1 -> org.geometerplus.android.fbreader.network.bh:
    org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity$2 -> org.geometerplus.android.fbreader.network.bi:
    org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity$3 -> org.geometerplus.android.fbreader.network.bj:
    org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity$4 -> org.geometerplus.android.fbreader.network.bk:
    org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity this$0 -> a
    java.util.ArrayList val$services -> b
    java.lang.String val$errorText -> c
    void run() -> run
org.geometerplus.android.fbreader.network.ScanLocalNetworkActivity$ServiceInfoItem -> org.geometerplus.android.fbreader.network.bl:
    javax.jmdns.ServiceInfo myServiceInfo -> a
    java.lang.String toString() -> toString
    java.lang.String getUrl() -> a
org.geometerplus.android.fbreader.network.TopupMenuActivity -> org.geometerplus.android.fbreader.network.TopupMenuActivity:
    org.geometerplus.fbreader.network.INetworkLink myLink -> b
    org.geometerplus.zlibrary.core.money.Money myAmount -> c
    boolean isTopupSupported(org.geometerplus.fbreader.network.INetworkLink) -> a
    void runMenu(android.content.Context,org.geometerplus.fbreader.network.INetworkLink,org.geometerplus.zlibrary.core.money.Money) -> a
    void init() -> a
    java.lang.String getAction() -> b
    void runItem(org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo) -> a
    void doTopup(java.lang.Runnable) -> a
    org.geometerplus.fbreader.network.INetworkLink access$0(org.geometerplus.android.fbreader.network.TopupMenuActivity) -> a
    org.geometerplus.zlibrary.core.money.Money access$1(org.geometerplus.android.fbreader.network.TopupMenuActivity) -> b
org.geometerplus.android.fbreader.network.TopupMenuActivity$1 -> org.geometerplus.android.fbreader.network.bm:
    org.geometerplus.android.fbreader.network.TopupMenuActivity this$0 -> a
    org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo val$info -> b
    void run() -> run
org.geometerplus.android.fbreader.network.Util -> org.geometerplus.android.fbreader.network.bn:
    android.content.Intent intentByLink(android.content.Intent,org.geometerplus.fbreader.network.INetworkLink) -> a
    void initLibrary(android.app.Activity) -> a
    android.content.Intent authorizationIntent(org.geometerplus.fbreader.network.INetworkLink,android.net.Uri) -> a
    android.content.Intent registrationIntent(org.geometerplus.fbreader.network.INetworkLink) -> a
    boolean isRegistrationSupported(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> a
    void runRegistrationDialog(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> b
    void runAuthenticationDialog(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,java.lang.Runnable) -> a
    void openInBrowser(android.app.Activity,java.lang.String) -> a
    void doDownloadBook(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,boolean) -> a
org.geometerplus.android.fbreader.network.Util$1 -> org.geometerplus.android.fbreader.network.bo:
    android.app.Activity val$activity -> a
    org.geometerplus.fbreader.network.NetworkLibrary val$library -> b
    void run() -> run
org.geometerplus.android.fbreader.network.action.Action -> org.geometerplus.android.fbreader.network.a.a:
    int Code -> a
    int IconId -> b
    android.app.Activity myActivity -> c
    java.lang.String myResourceKey -> d
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean isEnabled(org.geometerplus.fbreader.network.NetworkTree) -> b
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
    java.lang.String getContextLabel(org.geometerplus.fbreader.network.NetworkTree) -> d
    java.lang.String getOptionsLabel(org.geometerplus.fbreader.network.NetworkTree) -> e
org.geometerplus.android.fbreader.network.action.AddCustomCatalogAction -> org.geometerplus.android.fbreader.network.a.b:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.BookAction -> org.geometerplus.android.fbreader.network.a.c:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    org.geometerplus.fbreader.network.NetworkBookItem getBook(org.geometerplus.fbreader.network.NetworkTree) -> f
org.geometerplus.android.fbreader.network.action.BuyBasketBooksAction -> org.geometerplus.android.fbreader.network.a.d:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean isEnabled(org.geometerplus.fbreader.network.NetworkTree) -> b
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.CatalogAction -> org.geometerplus.android.fbreader.network.a.e:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
org.geometerplus.android.fbreader.network.action.ClearBasketAction -> org.geometerplus.android.fbreader.network.a.f:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.EditCustomCatalogAction -> org.geometerplus.android.fbreader.network.a.g:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.LanguageFilterAction -> org.geometerplus.android.fbreader.network.a.h:
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.LanguageFilterAction$1 -> org.geometerplus.android.fbreader.network.a.i:
    org.geometerplus.android.fbreader.network.action.LanguageFilterAction this$0 -> a
    boolean[] val$checked -> b
    void onClick(android.content.DialogInterface,int,boolean) -> onClick
org.geometerplus.android.fbreader.network.action.LanguageFilterAction$2 -> org.geometerplus.android.fbreader.network.a.j:
    org.geometerplus.android.fbreader.network.action.LanguageFilterAction this$0 -> a
    boolean[] val$checked -> b
    java.util.List val$allLanguageCodes -> c
    org.geometerplus.fbreader.network.NetworkLibrary val$library -> d
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.action.NetworkBookActions -> org.geometerplus.android.fbreader.network.a.k:
    boolean useFullReferences(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    boolean useDemoReferences(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    int getBookStatus(org.geometerplus.fbreader.network.NetworkBookItem,org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection) -> a
    java.util.List getContextMenuActions(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkBookTree,org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection) -> a
    boolean runActionStatic(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkBookTree,int) -> b
    void doReadBook(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,boolean) -> a
    void tryToDeleteBook(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,boolean) -> b
    void doBuyDirectly(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkBookTree) -> a
    void doBuyInBrowser(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem) -> a
    boolean access$0(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkBookTree,int) -> a
org.geometerplus.android.fbreader.network.action.NetworkBookActions$1 -> org.geometerplus.android.fbreader.network.a.l:
    boolean val$demo -> a
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.action.NetworkBookActions$NBAction -> org.geometerplus.android.fbreader.network.a.m:
    int myId -> d
    java.lang.String myArg -> e
    boolean isEnabled(org.geometerplus.fbreader.network.NetworkTree) -> b
    java.lang.String getContextLabel(org.geometerplus.fbreader.network.NetworkTree) -> d
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
org.geometerplus.android.fbreader.network.action.OpenCatalogAction -> org.geometerplus.android.fbreader.network.a.n:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
    void doOpenTree(org.geometerplus.fbreader.network.NetworkTree) -> f
    void doExpandCatalog(org.geometerplus.fbreader.network.tree.NetworkCatalogTree) -> a
    void doLoadCatalog(org.geometerplus.fbreader.network.tree.NetworkCatalogTree) -> b
    void processExtraData(java.util.Map,java.lang.Runnable) -> a
    void access$0(org.geometerplus.android.fbreader.network.action.OpenCatalogAction,org.geometerplus.fbreader.network.tree.NetworkCatalogTree) -> a
    void access$1(org.geometerplus.android.fbreader.network.action.OpenCatalogAction,org.geometerplus.fbreader.network.NetworkTree) -> a
org.geometerplus.android.fbreader.network.action.OpenCatalogAction$1 -> org.geometerplus.android.fbreader.network.a.o:
    org.geometerplus.android.fbreader.network.action.OpenCatalogAction this$0 -> a
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree val$tree -> b
    void run() -> run
org.geometerplus.android.fbreader.network.action.OpenCatalogAction$2 -> org.geometerplus.android.fbreader.network.a.p:
    org.geometerplus.android.fbreader.network.action.OpenCatalogAction this$0 -> a
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree val$tree -> b
    void run() -> run
org.geometerplus.android.fbreader.network.action.OpenInBrowserAction -> org.geometerplus.android.fbreader.network.a.q:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.OpenInBrowserAction$1 -> org.geometerplus.android.fbreader.network.a.r:
    org.geometerplus.android.fbreader.network.action.OpenInBrowserAction this$0 -> a
    java.lang.String val$url -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.action.RefreshRootCatalogAction -> org.geometerplus.android.fbreader.network.a.s:
    boolean isEnabled(org.geometerplus.fbreader.network.NetworkTree) -> b
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.ReloadCatalogAction -> org.geometerplus.android.fbreader.network.a.t:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean isEnabled(org.geometerplus.fbreader.network.NetworkTree) -> b
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.RemoveCustomCatalogAction -> org.geometerplus.android.fbreader.network.a.u:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.RootAction -> org.geometerplus.android.fbreader.network.a.v:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
org.geometerplus.android.fbreader.network.action.RunSearchAction -> org.geometerplus.android.fbreader.network.a.w:
    boolean myFromContextMenu -> d
    org.geometerplus.fbreader.network.tree.SearchCatalogTree getSearchTree(org.geometerplus.fbreader.tree.FBTree) -> a
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean isEnabled(org.geometerplus.fbreader.network.NetworkTree) -> b
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.ShowBookInfoAction -> org.geometerplus.android.fbreader.network.a.x:
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
    void showBookInfo(org.geometerplus.fbreader.network.NetworkTree) -> g
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void access$1(org.geometerplus.android.fbreader.network.action.ShowBookInfoAction,org.geometerplus.fbreader.network.NetworkTree) -> a
org.geometerplus.android.fbreader.network.action.ShowBookInfoAction$1 -> org.geometerplus.android.fbreader.network.a.y:
    org.geometerplus.android.fbreader.network.action.ShowBookInfoAction this$0 -> a
    org.geometerplus.fbreader.network.NetworkTree val$tree -> b
    void run() -> run
    org.geometerplus.android.fbreader.network.action.ShowBookInfoAction access$0(org.geometerplus.android.fbreader.network.action.ShowBookInfoAction$1) -> a
org.geometerplus.android.fbreader.network.action.ShowBookInfoAction$1$1 -> org.geometerplus.android.fbreader.network.a.z:
    org.geometerplus.android.fbreader.network.action.ShowBookInfoAction$1 this$1 -> a
    org.geometerplus.fbreader.network.NetworkTree val$tree -> b
    void run() -> run
org.geometerplus.android.fbreader.network.action.SignInAction -> org.geometerplus.android.fbreader.network.a.aa:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.SignOutAction -> org.geometerplus.android.fbreader.network.a.ab:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
    java.lang.String getOptionsLabel(org.geometerplus.fbreader.network.NetworkTree) -> e
    java.lang.String getContextLabel(org.geometerplus.fbreader.network.NetworkTree) -> d
org.geometerplus.android.fbreader.network.action.SignOutAction$1 -> org.geometerplus.android.fbreader.network.a.ac:
    org.geometerplus.android.fbreader.network.action.SignOutAction this$0 -> a
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> b
    void run() -> run
org.geometerplus.android.fbreader.network.action.SignOutAction$1$1 -> org.geometerplus.android.fbreader.network.a.ad:
    org.geometerplus.android.fbreader.network.action.SignOutAction$1 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.action.SignUpAction -> org.geometerplus.android.fbreader.network.a.ae:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.TopupAction -> org.geometerplus.android.fbreader.network.a.af:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
    java.lang.String getContextLabel(org.geometerplus.fbreader.network.NetworkTree) -> d
org.geometerplus.android.fbreader.network.bookshare.BookshareDeveloperKey -> org.geometerplus.android.fbreader.network.bookshare.a:
    java.lang.String DEVELOPER_KEY -> a
    java.lang.String BUGSENSE_KEY -> b
    boolean OPT_OUT_GOOGLE_ANALYTICS -> c
    void initialize(android.content.Context) -> a
    void getProperties(android.content.Context) -> b
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details -> org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details:
    java.lang.String LOG_TAG -> e
    android.content.Context mcontext -> a
    java.lang.String username -> f
    java.lang.String password -> g
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Metadata_Bean metadata_bean -> h
    java.io.InputStream inputStream -> i
    org.bookshare.net.BookshareWebservice bws -> j
    int DATA_FETCHED -> k
    android.view.View book_detail_view -> l
    android.widget.TextView bookshare_book_detail_title_text -> m
    android.widget.TextView bookshare_book_detail_authors -> n
    android.widget.TextView bookshare_book_detail_isbn -> o
    android.widget.TextView bookshare_book_detail_language -> p
    android.widget.TextView bookshare_book_detail_category -> q
    android.widget.TextView bookshare_book_detail_publish_date -> r
    android.widget.TextView bookshare_book_detail_publisher -> s
    android.widget.TextView bookshare_book_detail_copyright -> t
    android.widget.TextView bookshare_book_detail_synopsis_text -> u
    android.widget.TextView bookshare_download_not_available_text -> v
    android.widget.TextView subscribe_described_text -> w
    android.widget.Button btnDownload -> x
    android.widget.Button btnDownloadWithImages -> y
    android.widget.Button currentButton -> b
    int downloadType -> z
    android.widget.CheckBox chkbox_subscribe -> A
    boolean imagesAvailable -> c
    boolean isDownloadable -> d
    int BOOKSHARE_BOOK_DETAILS_FINISHED -> B
    boolean isFree -> C
    boolean isOM -> D
    java.lang.String developerKey -> E
    int START_BOOKSHARE_OM_LIST -> F
    java.lang.String memberId -> G
    java.lang.String omDownloadPassword -> H
    java.lang.String firstName -> I
    java.lang.String lastName -> J
    boolean downloadSuccess -> K
    android.content.res.Resources resources -> L
    java.lang.String downloadedBookDir -> M
    java.util.Set myOngoingNotifications -> N
    android.app.Activity myActivity -> O
    void onCreate(android.os.Bundle) -> onCreate
    void onResultsFetched() -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onStart() -> onStart
    void onStop() -> onStop
    void showAlert(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile getOpfFile() -> b
    android.content.Intent getFBReaderIntent(java.io.File) -> a
    android.app.Notification createDownloadFinishNotification(java.io.File,java.lang.String,boolean) -> a
    android.app.Notification createDownloadProgressNotification(java.lang.String) -> b
    void parseResponse(java.lang.String) -> c
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void setIsDownloadable(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Metadata_Bean) -> a
    void setImagesAvailable(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Metadata_Bean) -> b
    void confirmAndClose(java.lang.String,int) -> a
    void onClick(android.view.View) -> onClick
    void downloadPressed() -> c
    org.bookshare.net.BookshareWebservice access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> a
    java.lang.String access$1(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> b
    void access$2(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details,java.io.InputStream) -> a
    java.io.InputStream access$3(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> c
    void access$4(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details,java.lang.String) -> a
    void access$5(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> d
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Metadata_Bean access$6(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> e
    void access$7(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details,java.lang.String) -> b
    boolean access$8(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> f
    int access$9(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> g
    java.lang.String access$10(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> h
    boolean access$11(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> i
    java.lang.String access$12(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> j
    java.lang.String access$13(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> k
    android.app.Notification access$14(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details,java.lang.String) -> c
    java.util.Set access$15(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> l
    java.lang.String access$16(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> m
    java.lang.String access$17(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> n
    java.lang.String access$18(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> o
    void access$19(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details,java.lang.String) -> d
    java.lang.String access$20(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> p
    java.lang.String access$21(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> q
    void access$22(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details,boolean) -> a
    boolean access$23(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> r
    android.content.res.Resources access$24(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> s
    org.geometerplus.zlibrary.core.filesystem.ZLFile access$25(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details) -> t
    android.app.Notification access$26(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details,java.io.File,java.lang.String,boolean) -> a
    void access$27(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details,org.geometerplus.android.fbreader.network.bookshare.Bookshare_Metadata_Bean) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details$BookDetailsTask -> org.geometerplus.android.fbreader.network.bookshare.b:
    java.lang.String uri -> a
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details this$0 -> b
    java.lang.Integer doInBackground(java.lang.Object[]) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Integer) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details$DownloadFilesTask -> org.geometerplus.android.fbreader.network.bookshare.c:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Error_Bean error -> d
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_PackagingStatus_Bean status -> e
    java.lang.String download_uri -> a
    java.lang.String id -> b
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details this$0 -> c
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details access$3(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details$DownloadFilesTask) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details$DownloadFilesTask$1 -> org.geometerplus.android.fbreader.network.bookshare.d:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details$DownloadFilesTask this$1 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details$SAXHandler -> org.geometerplus.android.fbreader.network.bookshare.e:
    boolean metadata -> a
    boolean contentId -> b
    boolean daisy -> c
    boolean brf -> d
    boolean downloadFormats -> e
    boolean images -> f
    boolean isbn -> g
    boolean authors -> h
    boolean title -> i
    boolean publishDate -> j
    boolean publisher -> k
    boolean copyright -> l
    boolean language -> m
    boolean briefSynopsis -> n
    boolean completeSynopsis -> o
    boolean quality -> p
    boolean category -> q
    boolean bookshareId -> r
    boolean freelyAvailable -> s
    boolean authorElementVisited -> t
    boolean downloadFormatElementVisited -> u
    boolean titleElementVisited -> v
    boolean categoryElementVisited -> w
    boolean briefSynopsisElementVisited -> x
    boolean completeSynopsisElementVisited -> y
    java.util.Vector vector_author -> z
    java.util.Vector vector_downloadFormat -> A
    java.util.Vector vector_category -> B
    java.util.Vector vector_briefSynopsis -> C
    java.util.Vector vector_completeSynopsis -> D
    java.util.Vector vector_title -> E
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Book_Details this$0 -> F
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void characters(char[],int,int) -> characters
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing -> org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing:
    java.lang.String URI_BOOKSHARE_ID_SEARCH -> c
    java.lang.String username -> d
    java.lang.String password -> e
    java.lang.String requestURI -> f
    int requestType -> g
    int responseType -> h
    int DATA_FETCHED -> i
    java.util.Vector vectorResults -> j
    android.app.ProgressDialog pd_spinning -> k
    int START_BOOKSHARE_BOOK_DETAILS_ACTIVITY -> l
    int BOOKSHARE_BOOK_DETAILS_FINISHED -> m
    int BOOKSHARE_BOOKS_LISTING_FINISHED -> n
    int PREVIOUS_PAGE_BOOK_ID -> o
    int NEXT_PAGE_BOOK_ID -> p
    java.util.ArrayList list -> q
    java.io.InputStream inputStream -> a
    org.bookshare.net.BookshareWebservice bws -> b
    int total_pages_result -> r
    int current_result_page -> s
    boolean total_pages_count_known -> t
    boolean isFree -> u
    java.lang.String developerKey -> v
    android.content.res.Resources resources -> w
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onStop() -> onStop
    void confirmAndClose(java.lang.String,int) -> a
    void getListing(java.lang.String) -> a
    void createPageChanger(java.lang.String,int,int) -> a
    void onResultsFetched() -> a
    void pageChangeSelected(int) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void parseResponse(java.lang.String) -> b
    java.lang.String access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing) -> a
    void access$1(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing,java.lang.String) -> a
    void access$2(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing) -> b
    boolean access$3(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing) -> c
    void access$4(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing,boolean) -> a
    java.util.Vector access$5(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing) -> d
    void access$6(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing,int) -> a
    boolean access$7(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing) -> e
    java.lang.String access$8(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing) -> f
    java.lang.String access$9(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing) -> g
    java.lang.String access$10(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing) -> h
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing$1 -> org.geometerplus.android.fbreader.network.bookshare.f:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing$BookListingTask -> org.geometerplus.android.fbreader.network.bookshare.g:
    java.lang.String uri -> a
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing this$0 -> b
    java.lang.Integer doInBackground(java.lang.Object[]) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Integer) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing$MySimpleAdapter -> org.geometerplus.android.fbreader.network.bookshare.h:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing$SAXHandler -> org.geometerplus.android.fbreader.network.bookshare.i:
    boolean result -> a
    boolean id -> b
    boolean title -> c
    boolean author -> d
    boolean download_format -> e
    boolean images -> f
    boolean freely_available -> g
    boolean available_to_download -> h
    boolean num_pages -> i
    boolean authorElementVisited -> j
    boolean downloadFormatElementVisited -> k
    java.util.Vector vector_author -> l
    java.util.Vector vector_downloadFormat -> m
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Result_Bean result_bean -> n
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Books_Listing this$0 -> o
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void characters(char[],int,int) -> characters
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean -> org.geometerplus.android.fbreader.network.bookshare.j:
    java.lang.String periodicalId -> a
    java.lang.String contentId -> b
    java.lang.String daisy -> c
    java.lang.String brf -> d
    java.lang.String[] downloadFormats -> e
    java.lang.String images -> f
    java.lang.String edition -> g
    java.lang.String title -> h
    java.lang.String revision -> i
    java.lang.String revisionTime -> j
    java.lang.String category -> k
    java.lang.String freelyAvailable -> l
    java.lang.String getPeriodicalId() -> a
    void setPeriodicalId(java.lang.String) -> a
    java.lang.String getContentId() -> b
    void setContentId(java.lang.String) -> b
    void setDaisy(java.lang.String) -> c
    void setBrf(java.lang.String) -> d
    java.lang.String[] getDownloadFormats() -> c
    void setDownloadFormats(java.lang.String[]) -> a
    void setImages(java.lang.String) -> e
    java.lang.String getEdition() -> d
    void setEdition(java.lang.String) -> f
    java.lang.String getTitle() -> e
    void setTitle(java.lang.String) -> g
    java.lang.String getRevision() -> f
    void setRevision(java.lang.String) -> h
    void setRevisionTime(java.lang.String) -> i
    java.lang.String getCategory() -> g
    void setCategory(java.lang.String) -> j
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Error_Bean -> org.geometerplus.android.fbreader.network.bookshare.k:
    java.lang.String version -> a
    java.lang.String statusCode -> b
    java.util.List messages -> c
    java.lang.String LOG_TAG -> d
    void parseInputStream(java.io.InputStream) -> a
    void access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Error_Bean,java.lang.String) -> a
    void access$1(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Error_Bean,java.lang.String) -> b
    java.util.List access$2(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Error_Bean) -> a
    void access$3(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Error_Bean,java.util.List) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Error_Bean$ErrorHandler -> org.geometerplus.android.fbreader.network.bookshare.l:
    boolean inVersion -> b
    boolean inStatusCode -> c
    boolean inMessages -> d
    boolean inString -> e
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Error_Bean this$0 -> a
    void characters(char[],int,int) -> characters
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void flipBoolean(java.lang.String) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu -> org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu:
    java.util.ArrayList list -> a
    android.app.Dialog dialog -> b
    android.widget.EditText dialog_search_term -> c
    android.widget.TextView dialog_search_title -> d
    android.widget.TextView dialog_example_text -> e
    android.widget.Button dialog_ok -> f
    java.lang.String search_term -> g
    java.lang.String URI_String -> h
    java.lang.String URI_Periodical_String -> i
    int query_type -> j
    android.content.Intent intent -> k
    int START_BOOKSHARE_BOOKS_LISTING_ACTIVITY -> l
    int BOOKSHARE_BOOKS_LISTING_FINISHED -> m
    int BOOKSHARE_MENU_FINISHED -> n
    int START_BOOKSHARE_PERIODICAL_LISTING_ACTIVITY -> o
    int BOOKSHARE_PERIODICAL_LISTING_FINISHED -> p
    java.lang.String username -> q
    java.lang.String password -> r
    boolean isFree -> s
    java.lang.String developerKey -> t
    android.app.Activity myActivity -> u
    void onCreate(android.os.Bundle) -> onCreate
    void showAuthorSearch() -> a
    void showTitleSearch() -> b
    void showISBNSearch() -> c
    void showSearch(int,int,int,int,int,int) -> a
    void onStart() -> onStart
    void onStop() -> onStop
    void doSearch() -> d
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void confirmAndClose(java.lang.String,int) -> a
    boolean isNetworkAvailable() -> e
    void access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> a
    void access$1(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> b
    void access$2(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> c
    boolean access$3(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> d
    java.lang.String access$4(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> e
    java.lang.String access$5(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> f
    void access$6(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu,java.lang.String) -> a
    java.lang.String access$7(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> g
    void access$8(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu,int) -> a
    void access$9(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu,android.content.Intent) -> a
    android.content.Intent access$10(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> h
    java.lang.String access$11(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> i
    java.lang.String access$12(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> j
    java.lang.String access$13(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> k
    android.app.Activity access$14(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> l
    void access$15(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu,java.lang.String,int) -> a
    void access$16(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> m
    android.app.Dialog access$17(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu) -> n
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$1 -> org.geometerplus.android.fbreader.network.bookshare.m:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$2 -> org.geometerplus.android.fbreader.network.bookshare.n:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$3 -> org.geometerplus.android.fbreader.network.bookshare.o:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuClickListener -> org.geometerplus.android.fbreader.network.bookshare.p:
    android.app.Activity activity -> b
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu access$1(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuClickListener) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuClickListener$1 -> org.geometerplus.android.fbreader.network.bookshare.q:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuClickListener this$1 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuClickListener$2 -> org.geometerplus.android.fbreader.network.bookshare.r:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuClickListener this$1 -> a
    android.app.Dialog val$confirmDialog -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuControl -> org.geometerplus.android.fbreader.network.bookshare.s:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuControl title -> a
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuControl author -> b
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuControl isbn -> c
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuControl latest -> d
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuControl popular -> e
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuControl periodicals -> f
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuControl logout -> g
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuControl[] ENUM$VALUES -> h
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuControl[] values() -> values
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MenuControl valueOf(java.lang.String) -> valueOf
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu$MySimpleAdapter -> org.geometerplus.android.fbreader.network.bookshare.t:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Menu this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Metadata_Bean -> org.geometerplus.android.fbreader.network.bookshare.u:
    java.lang.String contentId -> a
    java.lang.String daisy -> b
    java.lang.String brf -> c
    java.lang.String[] downloadFormats -> d
    java.lang.String images -> e
    java.lang.String isbn -> f
    java.lang.String[] authors -> g
    java.lang.String[] title -> h
    java.lang.String publishDate -> i
    java.lang.String publisher -> j
    java.lang.String copyright -> k
    java.lang.String language -> l
    java.lang.String[] briefSynopsis -> m
    java.lang.String[] completeSynopsis -> n
    java.lang.String quality -> o
    java.lang.String[] category -> p
    java.lang.String bookshareId -> q
    java.lang.String freelyAvailable -> r
    void setContentId(java.lang.String) -> a
    java.lang.String getContentId() -> a
    void setDaisy(java.lang.String) -> b
    void setBrf(java.lang.String) -> c
    void setDownloadFormats(java.lang.String[]) -> a
    java.lang.String[] getDownloadFormats() -> b
    void setImages(java.lang.String) -> d
    java.lang.String getImages() -> c
    void setIsbn(java.lang.String) -> e
    java.lang.String getIsbn() -> d
    void setAuthors(java.lang.String[]) -> b
    java.lang.String[] getAuthors() -> e
    void setTitle(java.lang.String[]) -> c
    java.lang.String[] getTitle() -> f
    void setPublishDate(java.lang.String) -> f
    java.lang.String getPublishDate() -> g
    void setPublisher(java.lang.String) -> g
    java.lang.String getPublisher() -> h
    void setCopyright(java.lang.String) -> h
    java.lang.String getCopyright() -> i
    void setLanguage(java.lang.String) -> i
    java.lang.String getLanguage() -> j
    void setBriefSynopsis(java.lang.String[]) -> d
    java.lang.String[] getBriefSynopsis() -> k
    void setCompleteSynopsis(java.lang.String[]) -> e
    java.lang.String[] getCompleteSynopsis() -> l
    void setQuality(java.lang.String) -> j
    void setCategory(java.lang.String[]) -> f
    java.lang.String[] getCategory() -> m
    void setBookshareId(java.lang.String) -> k
    void setFreelyAvailable(java.lang.String) -> l
org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List -> org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List:
    java.lang.String developerKey -> b
    java.lang.String username -> c
    java.lang.String password -> d
    java.io.InputStream inputStream -> e
    int DATA_FETCHED -> f
    org.bookshare.net.BookshareWebservice bws -> g
    android.app.ProgressDialog pd_spinning -> h
    java.util.List list -> i
    java.util.Vector vectorResults -> j
    int START_BOOKSHARE_OM_DOWNLOAD_PASSWORD -> k
    int BOOKSHARE_OM_SELECTED -> l
    int downloadsRemaining -> m
    android.os.Handler handler -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onStop() -> onStop
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void buildDialog(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_Member_Bean) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void parseResponse(java.lang.String) -> a
    android.app.ProgressDialog access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List) -> a
    org.bookshare.net.BookshareWebservice access$1(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List) -> b
    java.io.InputStream access$2(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List) -> c
    void access$3(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List,java.lang.String) -> a
    java.util.List access$4(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List) -> d
    java.util.Vector access$5(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List) -> e
    void access$6(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List,org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_Member_Bean) -> a
    void access$7(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List,int) -> a
    java.lang.String access$8(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List) -> f
    java.lang.String access$9(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List) -> g
    java.lang.String access$10(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List) -> h
    void access$11(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List,java.io.InputStream) -> a
    int access$12(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List) -> i
org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List$1 -> org.geometerplus.android.fbreader.network.bookshare.v:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List$1) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List$1$1 -> org.geometerplus.android.fbreader.network.bookshare.w:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List$1 this$1 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List$2 -> org.geometerplus.android.fbreader.network.bookshare.x:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List$3 -> org.geometerplus.android.fbreader.network.bookshare.y:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List this$0 -> a
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_Member_Bean val$bean -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List$MySimpleAdapter -> org.geometerplus.android.fbreader.network.bookshare.z:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List$SAXHandler -> org.geometerplus.android.fbreader.network.bookshare.aa:
    boolean downloadsRemainingFlag -> a
    boolean member -> b
    boolean memberId -> c
    boolean firstName -> d
    boolean lastName -> e
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_Member_Bean member_bean -> f
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_List this$0 -> g
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void characters(char[],int,int) -> characters
org.geometerplus.android.fbreader.network.bookshare.Bookshare_OM_Member_Bean -> org.geometerplus.android.fbreader.network.bookshare.ab:
    java.lang.String memberId -> a
    java.lang.String firstName -> b
    java.lang.String LastName -> c
    void setMemberId(java.lang.String) -> a
    java.lang.String getMemberId() -> a
    void setFirstName(java.lang.String) -> b
    java.lang.String getFirstName() -> b
    void setLastName(java.lang.String) -> c
    java.lang.String getlastName() -> c
org.geometerplus.android.fbreader.network.bookshare.Bookshare_PackagingStatus_Bean -> org.geometerplus.android.fbreader.network.bookshare.ac:
    java.lang.String LOG_TAG -> a
    java.lang.String version -> b
    java.lang.String contentId -> c
    java.lang.String packagingStatus -> d
    java.util.List messages -> e
    java.lang.String getContentId() -> a
    java.lang.String getPackagingStatus() -> b
    void parseInputStream(java.io.InputStream) -> a
    void access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_PackagingStatus_Bean,java.lang.String) -> a
    java.util.List access$1(org.geometerplus.android.fbreader.network.bookshare.Bookshare_PackagingStatus_Bean) -> a
    void access$2(org.geometerplus.android.fbreader.network.bookshare.Bookshare_PackagingStatus_Bean,java.util.List) -> a
    void access$3(org.geometerplus.android.fbreader.network.bookshare.Bookshare_PackagingStatus_Bean,java.lang.String) -> b
    void access$4(org.geometerplus.android.fbreader.network.bookshare.Bookshare_PackagingStatus_Bean,java.lang.String) -> c
org.geometerplus.android.fbreader.network.bookshare.Bookshare_PackagingStatus_Bean$PackagingStatusHander -> org.geometerplus.android.fbreader.network.bookshare.ad:
    boolean inVersion -> b
    boolean inMessages -> c
    boolean inString -> d
    boolean inContentId -> e
    boolean inStatus -> f
    boolean inBook -> g
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_PackagingStatus_Bean this$0 -> a
    void characters(char[],int,int) -> characters
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void flipBoolean(java.lang.String) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Bean -> org.geometerplus.android.fbreader.network.bookshare.ae:
    java.lang.String id -> a
    java.lang.String title -> b
    java.lang.String getId() -> a
    void setId(java.lang.String) -> a
    java.lang.String getTitle() -> b
    void setTitle(java.lang.String) -> b
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Bean -> org.geometerplus.android.fbreader.network.bookshare.af:
    java.lang.String id -> a
    java.lang.String title -> b
    java.lang.String edition -> c
    java.lang.String revision -> d
    java.lang.String getId() -> a
    void setId(java.lang.String) -> a
    java.lang.String getTitle() -> b
    void setTitle(java.lang.String) -> b
    java.lang.String getEdition() -> c
    void setEdition(java.lang.String) -> c
    java.lang.String getRevision() -> d
    void setRevision(java.lang.String) -> d
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details -> org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details:
    java.lang.String username -> d
    java.lang.String password -> e
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean metadata_bean -> f
    org.geometerplus.android.fbreader.network.bookshare.PeriodicalMetaDataSAXHandler saxHandler -> a
    java.io.InputStream inputStream -> g
    org.bookshare.net.BookshareWebservice bws -> h
    int DATA_FETCHED -> i
    android.view.View book_detail_view -> j
    android.widget.TextView bookshare_book_detail_title_text -> k
    android.widget.TextView bookshare_book_detail_authors -> l
    android.widget.TextView bookshare_book_detail_edition -> m
    android.widget.TextView bookshare_book_detail_category -> n
    android.widget.TextView bookshare_book_detail_publish_date -> o
    android.widget.TextView bookshare_book_detail_publisher -> p
    android.widget.TextView bookshare_book_detail_copyright -> q
    android.widget.TextView bookshare_book_detail_synopsis_text -> r
    android.widget.TextView bookshare_download_not_available_text -> s
    android.widget.CheckBox chkbx_subscribe_periodical -> t
    android.widget.TextView bookshare_subscribe_explained -> u
    java.lang.String selectedPeriodicalTitle -> v
    java.lang.String selectedPeriodicalId -> w
    android.widget.Button btn_download -> x
    boolean isDownloadable -> b
    int BOOKSHARE_PERIODICAL_EDITION_DETAILS_FINISHED -> y
    boolean isFree -> z
    boolean isOM -> A
    int START_BOOKSHARE_OM_LIST -> B
    java.lang.String memberId -> C
    java.lang.String omDownloadPassword -> D
    java.lang.String firstName -> E
    java.lang.String lastName -> F
    boolean downloadSuccess -> G
    android.content.res.Resources resources -> H
    java.lang.String downloadedBookDir -> I
    java.util.Set myOngoingNotifications -> J
    android.app.Activity myActivity -> K
    org.geometerplus.android.fbreader.network.bookshare.subscription.BooksharePeriodicalDataSource dataSource -> L
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalsSQLiteHelper periodicalDBHelper -> M
    android.database.sqlite.SQLiteDatabase periodicalDb -> N
    android.os.Handler handler -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void showAlert(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile getOpfFile() -> a
    android.content.Intent getFBReaderIntent(java.io.File) -> a
    android.app.Notification createDownloadFinishNotification(java.io.File,java.lang.String,boolean) -> a
    android.app.Notification createDownloadProgressNotification(java.lang.String) -> b
    void copyStream(java.io.BufferedInputStream,java.io.FileOutputStream) -> a
    void UnzipNonEncryptedFile(java.lang.String,java.lang.String) -> a
    void UnzipEncryptedFile(java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,android.content.Context) -> a
    void parseResponse(java.lang.String) -> c
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void setIsDownloadable(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean) -> a
    void confirmAndClose(java.lang.String,int) -> a
    org.bookshare.net.BookshareWebservice access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> a
    java.io.InputStream access$1(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> b
    void access$2(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,java.lang.String) -> a
    void access$3(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean) -> a
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean access$4(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> c
    void access$5(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,java.lang.String,int) -> a
    void access$6(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean) -> b
    void access$7(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,android.view.View) -> a
    void access$8(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,android.widget.TextView) -> a
    java.lang.String access$9(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> d
    android.widget.TextView access$10(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> e
    java.lang.String access$11(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> f
    void access$12(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,android.widget.TextView) -> b
    android.widget.TextView access$13(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> g
    void access$14(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,android.widget.TextView) -> c
    android.widget.TextView access$15(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> h
    void access$16(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,android.widget.TextView) -> d
    void access$17(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,android.widget.TextView) -> e
    android.widget.TextView access$18(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> i
    void access$19(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,android.widget.TextView) -> f
    android.widget.TextView access$20(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> j
    void access$21(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,android.widget.TextView) -> g
    android.widget.TextView access$22(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> k
    void access$23(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,android.widget.TextView) -> h
    android.widget.TextView access$24(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> l
    void access$25(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,android.widget.Button) -> a
    void access$26(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,android.widget.TextView) -> i
    void access$27(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,android.widget.CheckBox) -> a
    android.widget.CheckBox access$28(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> m
    org.geometerplus.android.fbreader.network.bookshare.subscription.BooksharePeriodicalDataSource access$29(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> n
    android.database.sqlite.SQLiteDatabase access$30(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> o
    void access$31(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,android.widget.TextView) -> j
    android.widget.TextView access$32(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> p
    android.view.View access$33(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> q
    android.widget.Button access$34(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> r
    android.widget.TextView access$35(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> s
    android.widget.TextView access$36(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> t
    android.content.res.Resources access$37(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> u
    boolean access$38(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> v
    java.lang.String access$39(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> w
    java.lang.String access$40(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> x
    void access$41(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,java.lang.String) -> b
    java.lang.String access$42(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> y
    org.geometerplus.zlibrary.core.filesystem.ZLFile access$43(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> z
    android.app.Activity access$44(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> A
    void access$45(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,java.lang.String) -> c
    boolean access$46(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> B
    java.lang.String access$47(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> C
    android.app.Notification access$48(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,java.lang.String) -> d
    java.util.Set access$49(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> D
    java.lang.String access$50(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> E
    java.lang.String access$51(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> F
    java.lang.String access$52(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> G
    void access$53(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,boolean) -> a
    boolean access$54(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details) -> H
    android.app.Notification access$55(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,java.io.File,java.lang.String,boolean) -> a
    void access$56(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details,java.io.InputStream) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details$1 -> org.geometerplus.android.fbreader.network.bookshare.ag:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details$1) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details$1$1 -> org.geometerplus.android.fbreader.network.bookshare.ah:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details$1 this$1 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details$1$2 -> org.geometerplus.android.fbreader.network.bookshare.ai:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details$1 this$1 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details$2 -> org.geometerplus.android.fbreader.network.bookshare.aj:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details this$0 -> a
    java.lang.String val$uri -> b
    void run() -> run
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details$DownloadFilesTask -> org.geometerplus.android.fbreader.network.bookshare.ak:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Error_Bean error -> b
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details access$3(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details$DownloadFilesTask) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details$DownloadFilesTask$1 -> org.geometerplus.android.fbreader.network.bookshare.al:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Details$DownloadFilesTask this$1 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing -> org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing:
    java.lang.String username -> e
    java.lang.String password -> f
    java.lang.String requestURI -> g
    int requestType -> h
    int responseType -> i
    int DATA_FETCHED -> j
    java.util.ArrayList arrayResults -> k
    android.app.ProgressDialog pd_spinning -> l
    int START_BOOKSHARE_EDITION_DETAILS_ACTIVITY -> m
    int BOOKSHARE_EDITION_DETAILS_FINISHED -> n
    int BOOKSHARE_EDITION_LISTING_FINISHED -> o
    int PREVIOUS_PAGE_BOOK_ID -> p
    int NEXT_PAGE_BOOK_ID -> q
    int current_result_page -> r
    org.geometerplus.android.fbreader.network.bookshare.PeriodicalEditionSAXHandler saxHandler -> a
    java.util.ArrayList list -> s
    java.io.InputStream inputStream -> b
    org.bookshare.net.BookshareWebservice bws -> c
    int total_pages_result -> t
    java.lang.Boolean isFree -> u
    java.lang.String developerKey -> v
    android.content.res.Resources resources -> w
    java.lang.String uri -> x
    java.lang.String bookshare_ID -> y
    java.lang.String bookshare_edition -> z
    java.lang.String bookshare_revision -> A
    java.lang.String bookshare_title -> B
    boolean isOM -> C
    android.os.Handler handler -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onStop() -> onStop
    void confirmAndClose(java.lang.String,int) -> a
    void getListing(java.lang.String) -> a
    void pageChangeSelected(int) -> a
    android.app.AlertDialog createSignupDialogBox() -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void parseResponse(java.lang.String) -> b
    android.app.ProgressDialog access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> a
    void access$1(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing,java.lang.String) -> a
    void access$2(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing,java.util.ArrayList) -> a
    void access$3(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing,int) -> a
    int access$4(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> b
    java.util.ArrayList access$5(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> c
    java.util.ArrayList access$6(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> d
    int access$7(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> e
    int access$8(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> f
    android.app.AlertDialog access$9(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> g
    android.content.res.Resources access$10(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> h
    void access$11(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing,java.lang.String,int) -> a
    void access$12(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing,java.lang.String) -> b
    void access$13(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing,java.lang.String) -> c
    void access$14(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing,java.lang.String) -> d
    void access$15(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing,java.lang.String) -> e
    java.lang.Boolean access$16(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> i
    java.lang.String access$17(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> j
    java.lang.String access$18(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> k
    java.lang.String access$19(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> l
    java.lang.String access$20(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> m
    void access$21(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing,java.lang.String) -> f
    java.lang.String access$22(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> n
    boolean access$23(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> o
    java.lang.String access$24(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> p
    java.lang.String access$25(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> q
    java.lang.String access$26(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing) -> r
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing$1 -> org.geometerplus.android.fbreader.network.bookshare.am:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    void createPageChanger(java.lang.String,int,int) -> a
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing$1) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing$1$1 -> org.geometerplus.android.fbreader.network.bookshare.an:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing$1 this$1 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing$1$2 -> org.geometerplus.android.fbreader.network.bookshare.ao:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing$1 this$1 -> a
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing$2 -> org.geometerplus.android.fbreader.network.bookshare.ap:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing this$0 -> a
    java.lang.String val$uri -> b
    void run() -> run
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing$3 -> org.geometerplus.android.fbreader.network.bookshare.aq:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing$4 -> org.geometerplus.android.fbreader.network.bookshare.ar:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing$MySimpleAdapter -> org.geometerplus.android.fbreader.network.bookshare.as:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Listing this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing -> org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing:
    java.lang.String URI_BOOKSHARE_PERIODICAL_EDITION_SEARCH -> d
    java.lang.String username -> e
    java.lang.String password -> f
    java.lang.String requestURI -> g
    int requestType -> h
    int responseType -> i
    int DATA_FETCHED -> j
    java.util.Vector vectorResults -> k
    android.app.ProgressDialog pd_spinning -> l
    int START_BOOKSHARE_PERIODICAL_EDITION_ACTIVITY -> m
    int BOOKSHARE_PERIODICAL_EDITION_FINISHED -> n
    int BOOKSHARE_PERIODICAL_LISTING_FINISHED -> o
    int PREVIOUS_PAGE_BOOK_ID -> p
    int NEXT_PAGE_BOOK_ID -> q
    int current_result_page -> r
    boolean total_pages_count_known -> s
    java.util.ArrayList list -> t
    java.io.InputStream inputStream -> a
    org.bookshare.net.BookshareWebservice bws -> b
    int total_pages_result -> u
    java.lang.Boolean isFree -> v
    java.lang.String developerKey -> w
    android.content.res.Resources resources -> x
    android.os.Handler handler -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onStop() -> onStop
    void getListing(java.lang.String) -> a
    void pageChangeSelected(int) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void confirmAndClose(java.lang.String,int) -> a
    void parseResponse(java.lang.String) -> b
    android.app.ProgressDialog access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing) -> a
    void access$1(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing,java.lang.String) -> a
    java.util.ArrayList access$2(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing) -> b
    java.util.Vector access$3(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing) -> c
    java.lang.Boolean access$4(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing) -> d
    int access$5(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing) -> e
    int access$6(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing) -> f
    android.content.res.Resources access$7(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing) -> g
    void access$8(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing,java.lang.String,int) -> a
    java.lang.String access$9(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing) -> h
    java.lang.String access$10(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing) -> i
    java.lang.String access$11(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing) -> j
    java.lang.String access$12(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing) -> k
    boolean access$13(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing) -> l
    void access$14(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing,boolean) -> a
    void access$15(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing,int) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing$1 -> org.geometerplus.android.fbreader.network.bookshare.at:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    void createPageChanger(java.lang.String,int,int) -> a
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing$1) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing$1$1 -> org.geometerplus.android.fbreader.network.bookshare.au:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing$1 this$1 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing$2 -> org.geometerplus.android.fbreader.network.bookshare.av:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing this$0 -> a
    java.lang.String val$uri -> b
    void run() -> run
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing$MySimpleAdapter -> org.geometerplus.android.fbreader.network.bookshare.aw:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing$SAXHandler -> org.geometerplus.android.fbreader.network.bookshare.ax:
    boolean result -> a
    boolean id -> b
    boolean title -> c
    boolean num_pages -> d
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Bean result_bean -> e
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Listing this$0 -> f
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void characters(char[],int,int) -> characters
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Result_Bean -> org.geometerplus.android.fbreader.network.bookshare.ay:
    java.lang.String id -> a
    java.lang.String title -> b
    java.lang.String[] author -> c
    java.lang.String[] downloadFormats -> d
    java.lang.String images -> e
    java.lang.String freelyAvailable -> f
    java.lang.String availableToDownload -> g
    void setId(java.lang.String) -> a
    java.lang.String getId() -> a
    void setTitle(java.lang.String) -> b
    java.lang.String getTitle() -> b
    void setAuthor(java.lang.String[]) -> a
    java.lang.String[] getAuthor() -> c
    void setDownloadFormats(java.lang.String[]) -> b
    void setImages(java.lang.String) -> c
    void setFreelyAvailable(java.lang.String) -> d
    java.lang.String getFreelyAvailable() -> d
    void setAvailableToDownload(java.lang.String) -> e
    java.lang.String getAvailableToDownload() -> e
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.android.fbreader.network.bookshare.Bookshare_UserType -> org.geometerplus.android.fbreader.network.bookshare.az:
    java.lang.String downloadPassword -> a
    boolean isOM -> b
    boolean isIM -> c
    boolean isOM(java.lang.String) -> a
    java.lang.String getDownloadPassword() -> a
    void access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_UserType,boolean) -> a
    void access$1(org.geometerplus.android.fbreader.network.bookshare.Bookshare_UserType,boolean) -> b
    void access$2(org.geometerplus.android.fbreader.network.bookshare.Bookshare_UserType,java.lang.String) -> a
org.geometerplus.android.fbreader.network.bookshare.Bookshare_UserType$SAXHandler -> org.geometerplus.android.fbreader.network.bookshare.ba:
    boolean result -> a
    boolean id -> b
    boolean isDownloadPassword -> c
    boolean value -> d
    boolean isUserType -> e
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_UserType this$0 -> f
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void characters(char[],int,int) -> characters
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login -> org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login:
    java.lang.String BOOKSHARE_URL -> a
    java.lang.String FORGOT_PW_URL -> b
    java.lang.String SIGNUP_URL -> c
    android.widget.Button btn_login -> d
    android.widget.Button btn_continue_without_login -> e
    android.widget.TextView text_username -> f
    android.widget.TextView text_password -> g
    android.widget.EditText editText_username -> h
    android.widget.EditText editText_password -> i
    android.content.Intent intent -> j
    java.lang.String username -> k
    java.lang.String password -> l
    int status -> m
    android.app.ProgressDialog pd_spinning -> n
    boolean isFree -> o
    java.lang.String developerKey -> p
    boolean isOM -> q
    java.lang.String response -> r
    int requestType -> s
    java.lang.String uri -> t
    java.lang.String periodicalEdition -> u
    java.lang.String periodicalRevision -> v
    java.lang.String periodicalId -> w
    java.lang.String periodicalTitle -> x
    void onCreate(android.os.Bundle) -> onCreate
    void loginAction() -> a
    void getFreeContent() -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void startProgressDialog() -> c
    void confirmAndClose(java.lang.String) -> a
    android.widget.Button access$0(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> a
    boolean access$1(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> b
    android.widget.EditText access$2(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> c
    android.widget.EditText access$3(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> d
    android.widget.TextView access$4(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> e
    android.widget.TextView access$5(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> f
    void access$6(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login,int) -> a
    java.lang.String access$7(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> g
    java.lang.String access$8(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> h
    void access$9(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login,java.lang.String) -> a
    java.lang.String access$10(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> i
    java.lang.String access$11(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> j
    void access$12(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login,java.lang.String) -> b
    int access$13(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> k
    java.lang.String access$14(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> l
    void access$15(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login,boolean) -> a
    boolean access$16(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> m
    android.app.ProgressDialog access$17(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> n
    void access$18(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login,android.content.Intent) -> a
    int access$19(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> o
    java.lang.String access$20(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> p
    java.lang.String access$21(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> q
    java.lang.String access$22(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> r
    void access$23(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login,java.lang.String) -> c
    android.content.Intent access$24(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> s
    java.lang.String access$25(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> t
    java.lang.String access$26(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> u
    void access$27(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login,java.lang.String) -> d
    void access$28(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> v
    void access$29(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> w
    java.lang.String access$30(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> x
    java.lang.String access$31(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login) -> y
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login$1 -> org.geometerplus.android.fbreader.network.bookshare.bb:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login$2 -> org.geometerplus.android.fbreader.network.bookshare.bc:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login$3 -> org.geometerplus.android.fbreader.network.bookshare.bd:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login this$0 -> a
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login$4 -> org.geometerplus.android.fbreader.network.bookshare.be:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login$5 -> org.geometerplus.android.fbreader.network.bookshare.bf:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login$6 -> org.geometerplus.android.fbreader.network.bookshare.bg:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login$7 -> org.geometerplus.android.fbreader.network.bookshare.bh:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login$8 -> org.geometerplus.android.fbreader.network.bookshare.bi:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login$AuthenticationTask -> org.geometerplus.android.fbreader.network.bookshare.bj:
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Webservice_Login this$0 -> a
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.geometerplus.android.fbreader.network.bookshare.PeriodicalEditionSAXHandler -> org.geometerplus.android.fbreader.network.bookshare.bk:
    boolean result -> a
    boolean id -> b
    boolean title -> c
    boolean edition -> d
    boolean revision -> e
    boolean num_pages -> f
    boolean editionElementVisited -> g
    boolean revisionElementVisited -> h
    boolean total_pages_count_known -> j
    int total_pages_result -> k
    java.util.ArrayList results -> l
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Periodical_Edition_Bean result_bean -> i
    int getTotal_pages_result() -> a
    java.util.ArrayList getResults() -> b
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void characters(char[],int,int) -> characters
org.geometerplus.android.fbreader.network.bookshare.PeriodicalMetaDataSAXHandler -> org.geometerplus.android.fbreader.network.bookshare.bl:
    boolean metadata -> a
    boolean contentId -> b
    boolean daisy -> c
    boolean brf -> d
    boolean downloadFormats -> e
    boolean images -> f
    boolean edition -> g
    boolean revisionTime -> h
    boolean revision -> i
    boolean category -> j
    boolean downloadFormatElementVisited -> k
    boolean categoryElementVisited -> l
    java.util.Vector vector_downloadFormat -> m
    java.util.Vector vector_category -> n
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean metadata_bean -> o
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean getMetadata_bean() -> a
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void characters(char[],int,int) -> characters
org.geometerplus.android.fbreader.network.bookshare.subscription.AllDbPeriodicalEntity -> org.geometerplus.android.fbreader.network.bookshare.subscription.a:
    java.lang.String edition -> a
    int revision -> b
    java.lang.String dwnldDate -> c
    java.lang.String dwnldTime -> d
    java.lang.String getEdition() -> a
    void setEdition(java.lang.String) -> a
    int getRevision() -> b
    void setRevision(int) -> a
    java.lang.String getDwnldDate() -> c
    void setDwnldDate(java.lang.String) -> b
    java.lang.String getDwnldTime() -> d
    void setDwnldTime(java.lang.String) -> c
org.geometerplus.android.fbreader.network.bookshare.subscription.BooksharePeriodicalDataSource -> org.geometerplus.android.fbreader.network.bookshare.subscription.b:
    org.geometerplus.android.fbreader.network.bookshare.subscription.BooksharePeriodicalDataSource dSource -> a
    java.lang.String[] subscribedAllColumns -> b
    java.lang.String[] allPAllColumns -> c
    org.geometerplus.android.fbreader.network.bookshare.subscription.BooksharePeriodicalDataSource getInstance(android.content.Context) -> a
    void insertEntity(android.database.sqlite.SQLiteDatabase,java.lang.String,org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEntity) -> a
    android.content.ContentValues composeCValue(org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEntity) -> a
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEntity getEntity(android.database.sqlite.SQLiteDatabase,java.lang.String,org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEntity) -> b
    java.util.List getEntityByIdOnly(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String) -> a
    boolean doesExist(android.database.sqlite.SQLiteDatabase,java.lang.String,org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEntity) -> c
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEntity deleteEntity(android.database.sqlite.SQLiteDatabase,java.lang.String,org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEntity) -> d
org.geometerplus.android.fbreader.network.bookshare.subscription.MainPeriodicalDownloadService -> org.geometerplus.android.fbreader.network.bookshare.subscription.MainPeriodicalDownloadService:
    org.geometerplus.android.fbreader.network.bookshare.subscription.BooksharePeriodicalDataSource dataSource -> a
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalsSQLiteHelper dbHelper -> b
    java.lang.String username -> c
    java.lang.String password -> d
    java.lang.String developerKey -> e
    android.database.sqlite.SQLiteDatabase periodicalDb -> f
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListFetcher editionFetcher -> g
    int currIdsIndex -> h
    java.lang.String usernameKey -> i
    java.lang.String passwordKey -> j
    org.geometerplus.fbreader.fbreader.FBReaderApp$AutomaticDownloadType downType -> k
    java.util.ArrayList ids -> l
    android.os.IBinder onBind(android.content.Intent) -> onBind
    boolean onUnbind(android.content.Intent) -> onUnbind
    void onDestroy() -> onDestroy
    void onHandleIntent(android.content.Intent) -> onHandleIntent
    boolean downloadPeriodical(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean) -> a
    void runGetUpdatesForCurrentIndex() -> a
    void getUpdates(org.geometerplus.fbreader.fbreader.FBReaderApp$AutomaticDownloadType,java.lang.String) -> a
    void onPeriodicalEditionListResponse(java.util.ArrayList) -> a
    java.lang.String getEditionRequestURL(org.geometerplus.android.fbreader.network.bookshare.subscription.AllDbPeriodicalEntity) -> a
    void onPeriodicalMetadataResponse(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean) -> b
org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalDBUtils -> org.geometerplus.android.fbreader.network.bookshare.subscription.c:
    org.geometerplus.android.fbreader.network.bookshare.subscription.AllDbPeriodicalEntity getMostRecentEdition(java.util.List) -> a
    java.lang.String getRecentEditionString(java.lang.String,java.lang.String) -> a
org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListFetcher -> org.geometerplus.android.fbreader.network.bookshare.subscription.d:
    java.io.InputStream inputStream -> f
    int DATA_FETCHED -> g
    java.util.ArrayList results -> a
    java.lang.String password -> b
    org.bookshare.net.BookshareWebservice bws -> c
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListener callback -> h
    org.geometerplus.android.fbreader.network.bookshare.PeriodicalEditionSAXHandler saxHandler -> d
    android.os.Handler handler -> e
    void getListing(java.lang.String,java.lang.String,org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListener) -> a
    void parseResponse(java.lang.String) -> a
    java.io.InputStream access$0(org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListFetcher) -> a
    void access$1(org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListFetcher,java.lang.String) -> a
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListener access$2(org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListFetcher) -> b
    void access$3(org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListFetcher,java.io.InputStream) -> a
org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListFetcher$1 -> org.geometerplus.android.fbreader.network.bookshare.subscription.e:
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListFetcher this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListFetcher$2 -> org.geometerplus.android.fbreader.network.bookshare.subscription.f:
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListFetcher this$0 -> a
    java.lang.String val$password -> b
    java.lang.String val$uri -> c
    void run() -> run
org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionListener -> org.geometerplus.android.fbreader.network.bookshare.subscription.g:
    void onPeriodicalEditionListResponse(java.util.ArrayList) -> a
org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionMetadataFetcher -> org.geometerplus.android.fbreader.network.bookshare.subscription.h:
    java.io.InputStream inputStream -> f
    int DATA_FETCHED -> g
    org.bookshare.net.BookshareWebservice bws -> a
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean metadata_bean -> b
    org.geometerplus.android.fbreader.network.bookshare.PeriodicalMetaDataSAXHandler saxHandler -> c
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalMetadataListener callback -> d
    java.lang.String periodicalTitle -> h
    java.lang.String periodicalId -> i
    android.os.Handler handler -> e
    void getListing(java.lang.String,java.lang.String,org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalMetadataListener) -> a
    void parseResponse(java.lang.String) -> a
    java.io.InputStream access$0(org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionMetadataFetcher) -> a
    void access$1(org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionMetadataFetcher,java.lang.String) -> a
    java.lang.String access$2() -> a
    java.lang.String access$3() -> b
    void access$4(org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionMetadataFetcher,java.io.InputStream) -> a
org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionMetadataFetcher$1 -> org.geometerplus.android.fbreader.network.bookshare.subscription.i:
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionMetadataFetcher this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionMetadataFetcher$2 -> org.geometerplus.android.fbreader.network.bookshare.subscription.j:
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEditionMetadataFetcher this$0 -> a
    java.lang.String val$password -> b
    java.lang.String val$uri -> c
    void run() -> run
org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEntity -> org.geometerplus.android.fbreader.network.bookshare.subscription.k:
    java.lang.String title -> a
    java.lang.String id -> b
    java.lang.String getTitle() -> e
    void setTitle(java.lang.String) -> d
    java.lang.String getId() -> f
    void setId(java.lang.String) -> e
org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalFromCursorFactory -> org.geometerplus.android.fbreader.network.bookshare.subscription.l:
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalEntity getPeriodicalEntityInstance(java.lang.String,android.database.Cursor) -> a
org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalMetadataListener -> org.geometerplus.android.fbreader.network.bookshare.subscription.m:
    void onPeriodicalMetadataResponse(org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean) -> b
org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalsDatabase -> org.geometerplus.android.fbreader.network.bookshare.subscription.n:
org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalsSQLiteHelper -> org.geometerplus.android.fbreader.network.bookshare.subscription.o:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
org.geometerplus.android.fbreader.network.bookshare.subscription.SubscribedDbPeriodicalEntity -> org.geometerplus.android.fbreader.network.bookshare.subscription.p:
    java.lang.String latestEdition -> a
    int latestRevision -> b
    java.lang.String getLatestEdition() -> a
    void setLatestEdition(java.lang.String) -> a
    int getLatestRevision() -> b
    void setLatestRevision(int) -> a
org.geometerplus.android.fbreader.network.bookshare.subscription.SubscriptionDownloadService -> org.geometerplus.android.fbreader.network.bookshare.subscription.SubscriptionDownloadService:
    org.geometerplus.android.fbreader.network.bookshare.subscription.BooksharePeriodicalDataSource dataSource -> a
    org.geometerplus.android.fbreader.network.bookshare.subscription.PeriodicalsSQLiteHelper dbHelper -> b
    java.lang.String username -> d
    java.lang.String password -> e
    java.lang.String downloadedBookDir -> f
    java.lang.String omDownloadPassword -> g
    boolean isFree -> h
    boolean isOM -> i
    boolean downloadSuccess -> j
    java.lang.String developerKey -> k
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean metadata_bean -> l
    java.util.Set myOngoingNotifications -> m
    android.database.sqlite.SQLiteDatabase periodicalDb -> n
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Error_Bean error -> o
    org.bookshare.net.BookshareWebservice bws -> c
    void onHandleIntent(android.content.Intent) -> onHandleIntent
    void onDestroy() -> onDestroy
    org.geometerplus.zlibrary.core.filesystem.ZLFile getOpfFile() -> a
    android.content.Intent getFBReaderIntent(java.io.File) -> a
    android.app.Notification createDownloadFinishNotification(java.io.File,java.lang.String,boolean) -> a
    android.app.Notification createDownloadProgressNotification(java.lang.String) -> a
    org.geometerplus.android.fbreader.network.bookshare.Bookshare_Edition_Metadata_Bean access$0(org.geometerplus.android.fbreader.network.bookshare.subscription.SubscriptionDownloadService) -> a
    java.util.Set access$1(org.geometerplus.android.fbreader.network.bookshare.subscription.SubscriptionDownloadService) -> b
    boolean access$2(org.geometerplus.android.fbreader.network.bookshare.subscription.SubscriptionDownloadService) -> c
    org.geometerplus.zlibrary.core.filesystem.ZLFile access$3(org.geometerplus.android.fbreader.network.bookshare.subscription.SubscriptionDownloadService) -> d
    java.lang.String access$4(org.geometerplus.android.fbreader.network.bookshare.subscription.SubscriptionDownloadService) -> e
    android.app.Notification access$5(org.geometerplus.android.fbreader.network.bookshare.subscription.SubscriptionDownloadService,java.io.File,java.lang.String,boolean) -> a
org.geometerplus.android.fbreader.network.bookshare.subscription.SubscriptionDownloadService$1 -> org.geometerplus.android.fbreader.network.bookshare.subscription.q:
    org.geometerplus.android.fbreader.network.bookshare.subscription.SubscriptionDownloadService this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference -> org.geometerplus.android.fbreader.preferences.a:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> b
    android.widget.SeekBar mySlider -> c
    void onBindDialogView(android.view.View) -> onBindDialogView
    void onClick(android.content.DialogInterface,int) -> onClick
    android.widget.SeekBar access$0(org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference) -> a
    org.geometerplus.zlibrary.core.resources.ZLResource access$1(org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference) -> b
org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference$SeekBarDrawable -> org.geometerplus.android.fbreader.preferences.b:
    android.graphics.drawable.Drawable myBase -> b
    android.graphics.Paint myPaint -> c
    android.graphics.Paint myOutlinePaint -> d
    org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference this$0 -> a
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    boolean onStateChange(int[]) -> onStateChange
    boolean isStateful() -> isStateful
    boolean onLevelChange(int) -> onLevelChange
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
org.geometerplus.android.fbreader.preferences.BatteryLevelToTurnScreenOffPreference -> org.geometerplus.android.fbreader.preferences.c:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.BookTitlePreference -> org.geometerplus.android.fbreader.preferences.d:
    org.geometerplus.fbreader.library.Book myBook -> a
    void setValue(java.lang.String) -> a
org.geometerplus.android.fbreader.preferences.DictionaryPreference -> org.geometerplus.android.fbreader.preferences.e:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.EditBookInfoActivity -> org.geometerplus.android.fbreader.preferences.EditBookInfoActivity:
    org.geometerplus.fbreader.library.Book myBook -> c
    void init(android.content.Intent) -> a
    void onPause() -> onPause
    android.preference.Preference addPreference(android.preference.Preference) -> a
org.geometerplus.android.fbreader.preferences.FontOption -> org.geometerplus.android.fbreader.preferences.f:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    java.lang.String UNCHANGED -> b
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.FontStylePreference -> org.geometerplus.android.fbreader.preferences.g:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myBoldOption -> a
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myItalicOption -> b
    java.lang.String[] myValues -> d
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.InfoPreference -> org.geometerplus.android.fbreader.preferences.h:
org.geometerplus.android.fbreader.preferences.LanguagePreference -> org.geometerplus.android.fbreader.preferences.i:
    org.geometerplus.fbreader.library.Book myBook -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.PreferenceActivity -> org.geometerplus.android.fbreader.preferences.PreferenceActivity:
    android.view.accessibility.AccessibilityManager accessibilityManager -> c
    void init(android.content.Intent) -> a
    void onStart() -> onStart
    void onStop() -> onStop
    android.preference.Preference addPreference(android.preference.Preference) -> a
org.geometerplus.android.fbreader.preferences.PreferenceActivity$1 -> org.geometerplus.android.fbreader.preferences.j:
    int myLevel -> b
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary val$androidLibrary -> c
    void onClick() -> onClick
org.geometerplus.android.fbreader.preferences.PreferenceActivity$2 -> org.geometerplus.android.fbreader.preferences.k:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$bgPreferences -> b
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.PreferenceActivity$3 -> org.geometerplus.android.fbreader.preferences.l:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$footerPreferences -> d
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.PreferenceActivity$4 -> org.geometerplus.android.fbreader.preferences.m:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.zlibrary.core.application.ZLKeyBindings val$keyBindings -> b
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$volumeKeysPreferences -> c
    void onClick() -> onClick
org.geometerplus.android.fbreader.preferences.PreferenceActivity$5 -> org.geometerplus.android.fbreader.preferences.n:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.zlibrary.core.application.ZLKeyBindings val$keyBindings -> b
    void onClick() -> onClick
org.geometerplus.android.fbreader.preferences.UrlPreference -> org.geometerplus.android.fbreader.preferences.o:
    java.lang.String myUrl -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
org.geometerplus.android.fbreader.preferences.WallpaperPreference -> org.geometerplus.android.fbreader.preferences.p:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLBoolean3Preference -> org.geometerplus.android.fbreader.preferences.q:
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option myOption -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> b
    void onDialogClosed(boolean) -> onDialogClosed
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> a
org.geometerplus.android.fbreader.preferences.ZLBooleanPreference -> org.geometerplus.android.fbreader.preferences.r:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myOption -> a
    void onClick() -> onClick
org.geometerplus.android.fbreader.preferences.ZLCheckBoxPreference -> org.geometerplus.android.fbreader.preferences.s:
org.geometerplus.android.fbreader.preferences.ZLChoicePreference -> org.geometerplus.android.fbreader.preferences.t:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    boolean $assertionsDisabled -> b
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLColorPreference -> org.geometerplus.android.fbreader.preferences.u:
    org.geometerplus.zlibrary.core.options.ZLColorOption myOption -> a
    android.widget.SeekBar myRedSlider -> b
    android.widget.SeekBar myGreenSlider -> c
    android.widget.SeekBar myBlueSlider -> d
    android.graphics.drawable.GradientDrawable myPreviewDrawable -> e
    android.widget.SeekBar createSlider(android.view.View,int,int,java.lang.String) -> a
    void onBindDialogView(android.view.View) -> onBindDialogView
    void onClick(android.content.DialogInterface,int) -> onClick
    android.graphics.drawable.GradientDrawable access$0(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> a
    android.widget.SeekBar access$1(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> b
    android.widget.SeekBar access$2(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> c
    android.widget.SeekBar access$3(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> d
org.geometerplus.android.fbreader.preferences.ZLColorPreference$1 -> org.geometerplus.android.fbreader.preferences.v:
    org.geometerplus.android.fbreader.preferences.ZLColorPreference this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
org.geometerplus.android.fbreader.preferences.ZLColorPreference$SeekBarDrawable -> org.geometerplus.android.fbreader.preferences.w:
    android.widget.SeekBar mySlider -> a
    android.graphics.drawable.Drawable myBase -> b
    java.lang.String myText -> c
    android.graphics.Paint myPaint -> d
    android.graphics.Paint myOutlinePaint -> e
    boolean myLabelOnRight -> f
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    boolean onStateChange(int[]) -> onStateChange
    boolean isStateful() -> isStateful
    boolean onLevelChange(int) -> onLevelChange
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
org.geometerplus.android.fbreader.preferences.ZLEnumPreference -> org.geometerplus.android.fbreader.preferences.x:
    org.geometerplus.zlibrary.core.options.ZLEnumOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLIntegerChoicePreference -> org.geometerplus.android.fbreader.preferences.y:
    org.geometerplus.zlibrary.core.options.ZLIntegerOption myOption -> b
    int[] myValues -> d
    boolean $assertionsDisabled -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLIntegerRangePreference -> org.geometerplus.android.fbreader.preferences.z:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity -> org.geometerplus.android.fbreader.preferences.aa:
    java.lang.String SCREEN_KEY -> a
    java.util.HashMap myScreenMap -> c
    android.preference.PreferenceScreen myScreen -> d
    org.geometerplus.zlibrary.core.resources.ZLResource Resource -> b
    org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen createPreferenceScreen(java.lang.String) -> a
    android.preference.Preference addPreference(android.preference.Preference) -> a
    void init(android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen -> org.geometerplus.android.fbreader.preferences.ab:
    org.geometerplus.zlibrary.core.resources.ZLResource Resource -> a
    android.preference.PreferenceScreen myScreen -> c
    org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity this$0 -> b
    org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen createPreferenceScreen(java.lang.String) -> a
    android.preference.Preference addPreference(android.preference.Preference) -> a
    android.preference.Preference addOption(org.geometerplus.zlibrary.core.options.ZLBooleanOption,java.lang.String) -> a
    android.preference.Preference addOption(org.geometerplus.zlibrary.core.options.ZLStringOption,java.lang.String) -> a
    android.preference.Preference addOption(org.geometerplus.zlibrary.core.options.ZLColorOption,java.lang.String) -> a
    android.preference.Preference addOption(org.geometerplus.zlibrary.core.options.ZLEnumOption,java.lang.String) -> a
    android.preference.PreferenceScreen access$1(org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen) -> a
org.geometerplus.android.fbreader.preferences.ZLPreferenceSet -> org.geometerplus.android.fbreader.preferences.ac:
    java.util.LinkedList myPreferences -> a
    void add(android.preference.Preference) -> a
    void setEnabled(boolean) -> a
org.geometerplus.android.fbreader.preferences.ZLStringChoicePreference -> org.geometerplus.android.fbreader.preferences.ad:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLStringListPreference -> org.geometerplus.android.fbreader.preferences.ae:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    boolean $assertionsDisabled -> c
    void setList(java.lang.String[]) -> a
    void setLists(java.lang.String[],java.lang.String[]) -> a
    boolean setInitialValue(java.lang.String) -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLStringOptionPreference -> org.geometerplus.android.fbreader.preferences.af:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void setValue(java.lang.String) -> a
org.geometerplus.android.fbreader.preferences.ZLStringPreference -> org.geometerplus.android.fbreader.preferences.ag:
    java.lang.String myValue -> a
    void setValue(java.lang.String) -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.tips.TipsActivity -> org.geometerplus.android.fbreader.tips.TipsActivity:
    org.geometerplus.fbreader.tips.TipsManager myManager -> a
    android.view.accessibility.AccessibilityManager accessibilityManager -> b
    void onCreate(android.os.Bundle) -> onCreate
    void showTip(android.widget.Button) -> a
    void showText(java.lang.CharSequence) -> a
    org.geometerplus.fbreader.tips.TipsManager access$0(org.geometerplus.android.fbreader.tips.TipsActivity) -> a
    void access$1(org.geometerplus.android.fbreader.tips.TipsActivity,android.widget.Button) -> a
org.geometerplus.android.fbreader.tips.TipsActivity$1 -> org.geometerplus.android.fbreader.tips.a:
    org.geometerplus.android.fbreader.tips.TipsActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.tips.TipsActivity$2 -> org.geometerplus.android.fbreader.tips.b:
    org.geometerplus.android.fbreader.tips.TipsActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.tips.TipsActivity$3 -> org.geometerplus.android.fbreader.tips.c:
    org.geometerplus.android.fbreader.tips.TipsActivity this$0 -> a
    android.widget.CheckBox val$checkBox -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.tips.TipsActivity$4 -> org.geometerplus.android.fbreader.tips.d:
    org.geometerplus.android.fbreader.tips.TipsActivity this$0 -> a
    android.widget.Button val$nextTipButton -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.tree.TreeActivity -> org.geometerplus.android.fbreader.tree.TreeActivity:
    org.geometerplus.fbreader.tree.FBTree myCurrentTree -> a
    org.geometerplus.fbreader.tree.FBTree$Key myCurrentKey -> b
    java.util.ArrayList myHistory -> c
    android.view.accessibility.AccessibilityManager accessibilityManager -> e
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$tree$FBTree$Status -> d
    void onCreate(android.os.Bundle) -> onCreate
    org.geometerplus.android.fbreader.tree.TreeAdapter getListAdapter() -> c
    org.geometerplus.fbreader.tree.FBTree getCurrentTree() -> d
    void onNewIntent(android.content.Intent) -> onNewIntent
    org.geometerplus.fbreader.tree.FBTree getTreeByKey(org.geometerplus.fbreader.tree.FBTree$Key) -> a
    boolean isTreeSelected(org.geometerplus.fbreader.tree.FBTree) -> a
    boolean isTreeInvisible(org.geometerplus.fbreader.tree.FBTree) -> b
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void openTree(org.geometerplus.fbreader.tree.FBTree) -> c
    void onCurrentTreeChanged() -> a
    void openTree(org.geometerplus.fbreader.tree.FBTree,org.geometerplus.fbreader.tree.FBTree,boolean) -> a
    void init(android.content.Intent) -> a
    void openTreeInternal(org.geometerplus.fbreader.tree.FBTree,org.geometerplus.fbreader.tree.FBTree,boolean) -> b
    android.widget.ListAdapter getListAdapter() -> getListAdapter
    void access$1(org.geometerplus.android.fbreader.tree.TreeActivity,org.geometerplus.fbreader.tree.FBTree,org.geometerplus.fbreader.tree.FBTree,boolean) -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$tree$FBTree$Status() -> e
org.geometerplus.android.fbreader.tree.TreeActivity$1 -> org.geometerplus.android.fbreader.tree.a:
    org.geometerplus.android.fbreader.tree.TreeActivity this$0 -> a
    android.content.Intent val$intent -> b
    void run() -> run
org.geometerplus.android.fbreader.tree.TreeActivity$2 -> org.geometerplus.android.fbreader.tree.b:
    org.geometerplus.android.fbreader.tree.TreeActivity this$0 -> a
    org.geometerplus.fbreader.tree.FBTree val$tree -> b
    void run() -> run
org.geometerplus.android.fbreader.tree.TreeActivity$3 -> org.geometerplus.android.fbreader.tree.c:
    org.geometerplus.android.fbreader.tree.TreeActivity this$0 -> a
    org.geometerplus.fbreader.tree.FBTree val$tree -> b
    org.geometerplus.fbreader.tree.FBTree val$treeToSelect -> c
    boolean val$storeInHistory -> d
    void run() -> run
org.geometerplus.android.fbreader.tree.TreeAdapter -> org.geometerplus.android.fbreader.tree.d:
    org.geometerplus.android.fbreader.tree.TreeActivity myActivity -> a
    java.util.List myItems -> b
    org.geometerplus.android.fbreader.tree.TreeActivity getActivity() -> a
    void remove(org.geometerplus.fbreader.tree.FBTree) -> a
    void replaceAll(java.util.Collection) -> a
    int getCount() -> getCount
    org.geometerplus.fbreader.tree.FBTree getItem(int) -> a
    long getItemId(int) -> getItemId
    int getIndex(org.geometerplus.fbreader.tree.FBTree) -> b
    org.geometerplus.fbreader.tree.FBTree getFirstSelectedItem() -> b
    java.lang.Object getItem(int) -> getItem
    java.util.List access$1(org.geometerplus.android.fbreader.tree.TreeAdapter) -> a
org.geometerplus.android.fbreader.tree.TreeAdapter$1 -> org.geometerplus.android.fbreader.tree.e:
    org.geometerplus.android.fbreader.tree.TreeAdapter this$0 -> a
    org.geometerplus.fbreader.tree.FBTree val$item -> b
    void run() -> run
org.geometerplus.android.fbreader.tree.TreeAdapter$4 -> org.geometerplus.android.fbreader.tree.f:
    org.geometerplus.android.fbreader.tree.TreeAdapter this$0 -> a
    java.util.Collection val$items -> b
    void run() -> run
org.geometerplus.android.util.PackageUtil -> org.geometerplus.android.a.a:
    android.net.Uri marketUri(java.lang.String) -> a
    android.net.Uri homeUri(java.lang.String) -> b
    android.net.Uri homeUri(java.lang.String,java.lang.String) -> a
    boolean isPluginInstalled(android.app.Activity,java.lang.String) -> b
    boolean isPluginInstalled(android.app.Activity,java.lang.String,java.lang.String) -> a
    boolean canBeStarted(android.content.Context,android.content.Intent,boolean) -> a
    boolean installFromMarket(android.app.Activity,java.lang.String) -> a
    void runInstallPluginDialog(android.app.Activity,java.util.Map,java.lang.Runnable) -> a
org.geometerplus.android.util.PackageUtil$1 -> org.geometerplus.android.a.b:
    android.app.Activity val$activity -> a
    java.lang.String val$plugin -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.util.PackageUtil$2 -> org.geometerplus.android.a.c:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption val$doNotInstallOption -> a
    android.widget.CheckBox val$checkBox -> b
    java.lang.Runnable val$postRunnable -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.util.SQLiteUtil -> org.geometerplus.android.a.d:
    void bindString(android.database.sqlite.SQLiteStatement,int,java.lang.String) -> a
    void bindDate(android.database.sqlite.SQLiteStatement,int,java.util.Date) -> a
    java.util.Date getDate(android.database.Cursor,int) -> a
org.geometerplus.android.util.UIUtil -> org.geometerplus.android.a.e:
    java.lang.Object ourMonitor -> a
    android.app.ProgressDialog ourProgress -> b
    java.util.Queue ourTaskQueue -> c
    android.os.Handler ourProgressHandler -> d
    void wait(java.lang.String,java.lang.Runnable,android.content.Context) -> a
    void runWithMessage(android.content.Context,java.lang.String,java.lang.Runnable,java.lang.Runnable) -> a
    void showMessageText(android.content.Context,java.lang.String) -> a
    void showErrorMessage(android.content.Context,java.lang.String) -> b
    void showErrorMessage(android.content.Context,java.lang.String,java.lang.String) -> a
    java.lang.Object access$0() -> a
    java.util.Queue access$1() -> b
    android.app.ProgressDialog access$2() -> c
    void access$3(android.app.ProgressDialog) -> a
    android.os.Handler access$4() -> d
org.geometerplus.android.util.UIUtil$1 -> org.geometerplus.android.a.f:
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.util.UIUtil$2 -> org.geometerplus.android.a.g:
    android.app.ProgressDialog val$currentProgress -> a
    void run() -> run
org.geometerplus.android.util.UIUtil$3 -> org.geometerplus.android.a.h:
    android.app.ProgressDialog val$progress -> a
    java.lang.Runnable val$postAction -> b
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.util.UIUtil$4 -> org.geometerplus.android.a.i:
    java.lang.Runnable val$action -> a
    android.os.Handler val$handler -> b
    void run() -> run
org.geometerplus.android.util.UIUtil$Pair -> org.geometerplus.android.a.j:
    java.lang.Runnable Action -> a
    java.lang.String Message -> b
org.geometerplus.fbreader.Paths -> org.geometerplus.fbreader.a:
    java.lang.String cardDirectory() -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption BooksDirectoryOption() -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption FontsDirectoryOption() -> c
    org.geometerplus.zlibrary.core.options.ZLStringOption WallpapersDirectoryOption() -> d
    java.lang.String cacheDirectory() -> e
    java.lang.String networkCacheDirectory() -> f
    java.lang.String systemShareDirectory() -> g
org.geometerplus.fbreader.bookmodel.BookModel -> org.geometerplus.fbreader.a.a:
    org.geometerplus.zlibrary.core.image.ZLImageMap myImageMap -> d
    org.geometerplus.fbreader.library.Book Book -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel BookTextModel -> b
    org.geometerplus.fbreader.bookmodel.TOCTree TOCTree -> c
    java.util.HashMap myFootnotes -> e
    java.util.LinkedHashMap myDaisyPageMap -> f
    java.lang.String lastDaisyPage -> g
    boolean allIntegerPages -> h
    org.geometerplus.zlibrary.text.model.CharStorage myInternalHyperlinks -> i
    char[] myCurrentLinkBlock -> j
    int myCurrentLinkBlockOffset -> k
    org.geometerplus.fbreader.bookmodel.BookModel$LabelResolver myResolver -> l
    org.geometerplus.fbreader.bookmodel.BookModel createModel(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel getFootnoteModel(java.lang.String) -> a
    void addHyperlinkLabel(java.lang.String,org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
    void setLabelResolver(org.geometerplus.fbreader.bookmodel.BookModel$LabelResolver) -> a
    org.geometerplus.fbreader.bookmodel.BookModel$Label getLabel(java.lang.String) -> b
    org.geometerplus.fbreader.bookmodel.BookModel$Label getLabelInternal(java.lang.String) -> d
    void addImage(java.lang.String,org.geometerplus.zlibrary.core.image.ZLImage) -> a
    void setDaisyPageMap(java.util.LinkedHashMap) -> a
    java.util.LinkedHashMap getDaisyPageMap() -> a
    void setLastDaisyPage(java.lang.String) -> c
    java.lang.String getLastDaisyPage() -> b
    void setAllDaisyPagesIntegers(boolean) -> a
    boolean isAllDaisyPagesIntegers() -> c
org.geometerplus.fbreader.bookmodel.BookModel$Label -> org.geometerplus.fbreader.a.b:
    java.lang.String ModelId -> a
    int ParagraphIndex -> b
org.geometerplus.fbreader.bookmodel.BookModel$LabelResolver -> org.geometerplus.fbreader.a.c:
    java.util.List getCandidates(java.lang.String) -> a
org.geometerplus.fbreader.bookmodel.BookReader -> org.geometerplus.fbreader.a.d:
    org.geometerplus.fbreader.bookmodel.BookModel Model -> a
    org.geometerplus.zlibrary.text.model.ZLTextWritableModel myCurrentTextModel -> b
    boolean myTextParagraphExists -> c
    boolean myTextParagraphIsNonEmpty -> d
    char[] myTextBuffer -> e
    int myTextBufferLength -> f
    java.lang.StringBuilder myContentsBuffer -> g
    byte[] myKindStack -> h
    int myKindStackSize -> i
    byte myHyperlinkKind -> j
    java.lang.String myHyperlinkReference -> k
    boolean myInsideTitle -> l
    boolean mySectionContainsRegularContents -> m
    org.geometerplus.fbreader.bookmodel.TOCTree myCurrentContentsTree -> n
    java.nio.charset.CharsetDecoder myByteDecoder -> o
    byte[] myUnderflowByteBuffer -> p
    int myUnderflowLength -> q
    void setByteDecoder(java.nio.charset.CharsetDecoder) -> a
    void flushTextBufferToParagraph() -> n
    void addControl(byte,boolean) -> a
    void pushKind(byte) -> a
    boolean popKind() -> a
    void beginParagraph() -> b
    void beginParagraph(byte) -> b
    void endParagraph() -> c
    void insertEndParagraph(byte) -> c
    void insertEndOfSectionParagraph() -> d
    void unsetCurrentTextModel() -> e
    void enterTitle() -> f
    void exitTitle() -> g
    void setMainTextModel() -> h
    void setFootnoteTextModel(java.lang.String) -> a
    void addData(char[]) -> a
    void addData(char[],int,int,boolean) -> a
    void addByteData(byte[],int,int) -> a
    byte hyperlinkType(byte) -> d
    void addHyperlinkControl(byte,java.lang.String) -> a
    void addHyperlinkLabel(java.lang.String) -> b
    void addHyperlinkLabel(java.lang.String,int) -> a
    void addContentsData(char[]) -> b
    void addContentsData(char[],int,int) -> a
    boolean hasContentsData() -> i
    void beginContentsParagraph(int) -> a
    void beginContentsParagraph(org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
    void endContentsParagraph() -> j
    boolean paragraphIsOpen() -> k
    boolean paragraphIsNonEmpty() -> l
    void beginContentsParagraph() -> m
    void addImageReference(java.lang.String,boolean) -> a
    void addImageReference(java.lang.String,short,boolean) -> a
    void addImage(java.lang.String,org.geometerplus.zlibrary.core.image.ZLImage) -> a
    void addFixedHSpace(short) -> a
    void setDaisyPageMap(java.util.LinkedHashMap) -> a
    void setLastDaisyPage(java.lang.String) -> c
    void setAllDaisyPagesIntegers(boolean) -> a
org.geometerplus.fbreader.bookmodel.TOCTree -> org.geometerplus.fbreader.a.e:
    java.lang.String myText -> a
    org.geometerplus.fbreader.bookmodel.TOCTree$Reference myReference -> b
    java.lang.String getText() -> a
    void setText(java.lang.String) -> a
    org.geometerplus.fbreader.bookmodel.TOCTree$Reference getReference() -> b
    void setReference(org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
org.geometerplus.fbreader.bookmodel.TOCTree$Reference -> org.geometerplus.fbreader.a.f:
    int ParagraphIndex -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel Model -> b
org.geometerplus.fbreader.fbreader.ChangeFontSizeAction -> org.geometerplus.fbreader.b.a:
    int myDelta -> a
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.ClearFindResultsAction -> org.geometerplus.fbreader.b.b:
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.ColorProfile -> org.geometerplus.fbreader.b.c:
    java.util.ArrayList ourNames -> j
    java.util.HashMap ourProfiles -> k
    org.geometerplus.zlibrary.core.options.ZLStringOption WallpaperOption -> a
    org.geometerplus.zlibrary.core.options.ZLColorOption BackgroundOption -> b
    org.geometerplus.zlibrary.core.options.ZLColorOption SelectionBackgroundOption -> c
    org.geometerplus.zlibrary.core.options.ZLColorOption SelectionForegroundOption -> d
    org.geometerplus.zlibrary.core.options.ZLColorOption HighlightingOption -> e
    org.geometerplus.zlibrary.core.options.ZLColorOption RegularTextOption -> f
    org.geometerplus.zlibrary.core.options.ZLColorOption HyperlinkTextOption -> g
    org.geometerplus.zlibrary.core.options.ZLColorOption VisitedHyperlinkTextOption -> h
    org.geometerplus.zlibrary.core.options.ZLColorOption FooterFillOption -> i
    org.geometerplus.fbreader.fbreader.ColorProfile get(java.lang.String) -> a
    org.geometerplus.zlibrary.core.options.ZLColorOption createOption(java.lang.String,java.lang.String,int,int,int) -> a
org.geometerplus.fbreader.fbreader.ExitAction -> org.geometerplus.fbreader.b.d:
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.FBAction -> org.geometerplus.fbreader.b.e:
    org.geometerplus.fbreader.fbreader.FBReaderApp Reader -> b
org.geometerplus.fbreader.fbreader.FBReaderApp -> org.geometerplus.fbreader.b.f:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption AllowScreenBrightnessAdjustmentOption -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption TextSearchPatternOption -> b
    org.geometerplus.zlibrary.core.options.ZLBooleanOption UseSeparateBindingsOption -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption EnableDoubleTapOption -> d
    org.geometerplus.zlibrary.core.options.ZLBooleanOption NavigateAllWordsOption -> e
    org.geometerplus.zlibrary.core.options.ZLEnumOption WordTappingActionOption -> f
    org.geometerplus.zlibrary.core.options.ZLColorOption ImageViewBackgroundOption -> g
    org.geometerplus.zlibrary.core.options.ZLEnumOption ImageTappingActionOption -> h
    int myDpi -> z
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption LeftMarginOption -> i
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption RightMarginOption -> j
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption TopMarginOption -> k
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption BottomMarginOption -> l
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption ScrollbarTypeOption -> m
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FooterHeightOption -> n
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowTOCMarksOption -> o
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowClockOption -> p
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowBatteryOption -> q
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowProgressOption -> r
    org.geometerplus.zlibrary.core.options.ZLStringOption FooterFontOption -> s
    org.geometerplus.zlibrary.core.options.ZLStringOption ColorProfileOption -> t
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowPreviousBookInCancelMenuOption -> u
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowPositionsInCancelMenuOption -> v
    org.geometerplus.zlibrary.core.application.ZLKeyBindings myBindings -> A
    org.geometerplus.fbreader.fbreader.FBView BookTextView -> w
    org.geometerplus.fbreader.fbreader.FBView FootnoteView -> x
    org.geometerplus.fbreader.bookmodel.BookModel Model -> y
    java.lang.String myArg0 -> B
    org.geometerplus.fbreader.fbreader.ColorProfile myColorProfile -> C
    java.util.ArrayList myCancelActionsList -> D
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$FBReaderApp$CancelActionType -> E
    void initWindow() -> a
    void openBook(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Bookmark) -> a
    void openBook(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Bookmark,android.app.Activity) -> a
    org.geometerplus.fbreader.fbreader.ColorProfile getColorProfile() -> b
    java.lang.String getColorProfileName() -> c
    void setColorProfileName(java.lang.String) -> a
    org.geometerplus.zlibrary.core.application.ZLKeyBindings keyBindings() -> d
    org.geometerplus.fbreader.fbreader.FBView getTextView() -> e
    void tryOpenFootnote(java.lang.String) -> b
    void clearTextCaches() -> f
    void openBookInternal(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Bookmark) -> b
    void gotoBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void showBookTextView() -> g
    org.geometerplus.fbreader.library.Book createBookForFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    void openFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void onWindowClosing() -> h
    java.util.List getCancelActionsList() -> i
    void runCancelAction(int) -> a
    void updateInvisibleBookmarksList(org.geometerplus.fbreader.library.Bookmark) -> b
    void addInvisibleBookmark(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    void addInvisibleBookmark() -> j
    org.geometerplus.fbreader.library.Bookmark addBookmark(int,boolean) -> a
    org.geometerplus.fbreader.bookmodel.TOCTree getCurrentTOCElement() -> k
    java.util.LinkedHashMap getDaisyPageMap() -> l
    java.lang.String getLastDaisyPage() -> m
    boolean isAllDaisyPagesIntegers() -> n
    java.lang.String access$0(org.geometerplus.fbreader.fbreader.FBReaderApp) -> a
    org.geometerplus.fbreader.library.Book access$1(org.geometerplus.fbreader.fbreader.FBReaderApp,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$FBReaderApp$CancelActionType() -> o
org.geometerplus.fbreader.fbreader.FBReaderApp$1 -> org.geometerplus.fbreader.b.g:
    org.geometerplus.fbreader.fbreader.FBReaderApp this$0 -> a
    void run() -> run
org.geometerplus.fbreader.fbreader.FBReaderApp$2 -> org.geometerplus.fbreader.b.h:
    org.geometerplus.fbreader.fbreader.FBReaderApp this$0 -> a
    org.geometerplus.fbreader.library.Book val$book -> b
    org.geometerplus.fbreader.library.Bookmark val$bookmark -> c
    void run() -> run
org.geometerplus.fbreader.fbreader.FBReaderApp$3 -> org.geometerplus.fbreader.b.i:
    org.geometerplus.fbreader.fbreader.FBReaderApp this$0 -> a
    org.geometerplus.fbreader.library.Book val$book -> b
    org.geometerplus.fbreader.library.Bookmark val$bookmark -> c
    android.app.Activity val$activity -> d
    void run() -> run
org.geometerplus.fbreader.fbreader.FBReaderApp$AutomaticDownloadType -> org.geometerplus.fbreader.b.j:
    org.geometerplus.fbreader.fbreader.FBReaderApp$AutomaticDownloadType downloadAll -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp$AutomaticDownloadType downloadMostRecent -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp$AutomaticDownloadType[] ENUM$VALUES -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp$AutomaticDownloadType[] values() -> values
    org.geometerplus.fbreader.fbreader.FBReaderApp$AutomaticDownloadType valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.FBReaderApp$BookmarkDescription -> org.geometerplus.fbreader.b.k:
    org.geometerplus.fbreader.library.Bookmark Bookmark -> a
org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionDescription -> org.geometerplus.fbreader.b.l:
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType Type -> b
    java.lang.String Title -> c
    java.lang.String Summary -> d
org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType -> org.geometerplus.fbreader.b.m:
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType previousBook -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType returnTo -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType close -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType[] values() -> values
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction -> org.geometerplus.fbreader.b.n:
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction doNothing -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction selectImage -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction openImageView -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction[] values() -> values
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction -> org.geometerplus.fbreader.b.o:
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction doNothing -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction selectSingleWord -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction startSelecting -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction openDictionary -> d
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction[] ENUM$VALUES -> e
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction[] values() -> values
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.FBView -> org.geometerplus.fbreader.b.p:
    org.geometerplus.fbreader.fbreader.FBReaderApp myReader -> d
    int myStartY -> e
    boolean myIsBrightnessAdjustmentInProgress -> f
    int myStartBrightness -> g
    java.lang.String myZoneMapId -> h
    org.geometerplus.fbreader.fbreader.TapZoneMap myZoneMap -> i
    org.geometerplus.fbreader.fbreader.FBView$Footer myFooter -> j
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$FBReaderApp$WordTappingAction -> k
    void setModel(org.geometerplus.zlibrary.text.model.ZLTextModel) -> a
    org.geometerplus.fbreader.fbreader.TapZoneMap getZoneMap() -> ac
    boolean onFingerSingleTap(int,int) -> a
    boolean isDoubleTapSupported() -> a
    boolean onFingerDoubleTap(int,int) -> b
    boolean onFingerPress(int,int) -> c
    boolean isFlickScrollingEnabled() -> ad
    void startManualScrolling(int,int) -> l
    boolean onFingerMove(int,int) -> d
    boolean onFingerRelease(int,int) -> e
    boolean onFingerLongPress(int,int) -> f
    boolean onFingerMoveAfterLongPress(int,int) -> g
    boolean onFingerReleaseAfterLongPress(int,int) -> h
    boolean onTrackballRotated(int,int) -> i
    int getLeftMargin() -> b
    int getRightMargin() -> c
    int getTopMargin() -> d
    int getBottomMargin() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLFile getWallpaperFile() -> f
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> g
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedBackgroundColor() -> h
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedForegroundColor() -> i
    org.geometerplus.zlibrary.core.util.ZLColor getTextColor(org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getHighlightingColor() -> j
    org.geometerplus.fbreader.fbreader.FBView$Footer getFooterArea() -> k
    void releaseSelectionCursor() -> l
    java.lang.String getSelectedText() -> m
    int getCountOfSelectedWords() -> n
    int scrollbarType() -> o
    org.geometerplus.zlibrary.core.view.ZLView$Animation getAnimationType() -> p
    org.geometerplus.zlibrary.core.view.ZLView$FooterArea getFooterArea() -> q
    org.geometerplus.fbreader.fbreader.FBReaderApp access$1(org.geometerplus.fbreader.fbreader.FBView) -> a
    int access$2(org.geometerplus.fbreader.fbreader.FBView) -> b
    int access$3(org.geometerplus.fbreader.fbreader.FBView,int) -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$FBReaderApp$WordTappingAction() -> r
org.geometerplus.fbreader.fbreader.FBView$Footer -> org.geometerplus.fbreader.b.q:
    java.lang.Runnable UpdateTask -> c
    java.util.ArrayList myTOCMarks -> d
    int MAX_TOC_MARKS_NUMBER -> e
    int myGaugeWidth -> a
    org.geometerplus.fbreader.fbreader.FBView this$0 -> b
    int getHeight() -> a
    void resetTOCMarks() -> b
    void updateTOCMarks(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
    java.lang.Runnable access$1(org.geometerplus.fbreader.fbreader.FBView$Footer) -> a
    org.geometerplus.fbreader.fbreader.FBView access$2(org.geometerplus.fbreader.fbreader.FBView$Footer) -> b
org.geometerplus.fbreader.fbreader.FBView$Footer$1 -> org.geometerplus.fbreader.b.r:
    org.geometerplus.fbreader.fbreader.FBView$Footer this$1 -> a
    void run() -> run
org.geometerplus.fbreader.fbreader.FindNextAction -> org.geometerplus.fbreader.b.s:
    boolean isEnabled() -> a
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.FindPreviousAction -> org.geometerplus.fbreader.b.t:
    boolean isEnabled() -> a
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.MoveCursorAction -> org.geometerplus.fbreader.b.u:
    org.geometerplus.zlibrary.core.view.ZLView$Direction myDirection -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> c
    void run(java.lang.Object[]) -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> d
org.geometerplus.fbreader.fbreader.ScrollingPreferences -> org.geometerplus.fbreader.b.v:
    org.geometerplus.fbreader.fbreader.ScrollingPreferences ourInstance -> f
    org.geometerplus.zlibrary.core.options.ZLEnumOption FingerScrollingOption -> a
    org.geometerplus.zlibrary.core.options.ZLEnumOption AnimationOption -> b
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption AnimationSpeedOption -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption HorizontalOption -> d
    org.geometerplus.zlibrary.core.options.ZLEnumOption TapZonesSchemeOption -> e
    org.geometerplus.fbreader.fbreader.ScrollingPreferences Instance() -> a
org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling -> org.geometerplus.fbreader.b.w:
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling byTap -> a
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling byFlick -> b
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling byTapAndFlick -> c
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling[] values() -> values
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme -> org.geometerplus.fbreader.b.x:
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme left_to_right -> a
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme right_to_left -> b
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme up -> c
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme down -> d
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme custom -> e
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme[] ENUM$VALUES -> f
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme[] values() -> values
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.SelectionClearAction -> org.geometerplus.fbreader.b.y:
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.SwitchProfileAction -> org.geometerplus.fbreader.b.z:
    java.lang.String myProfileName -> a
    boolean isVisible() -> b
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.TapZoneMap -> org.geometerplus.fbreader.b.aa:
    int myVerticalSize -> a
    int myHorizontalSize -> b
    java.util.HashMap myZoneMap -> c
    java.util.HashMap myZoneMap2 -> d
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$TapZoneMap$Tap -> e
    java.lang.String getActionByCoordinates(int,int,int,int,org.geometerplus.fbreader.fbreader.TapZoneMap$Tap) -> a
    java.util.HashMap access$0(org.geometerplus.fbreader.fbreader.TapZoneMap) -> a
    java.util.HashMap access$1(org.geometerplus.fbreader.fbreader.TapZoneMap) -> b
    void access$2(org.geometerplus.fbreader.fbreader.TapZoneMap,int) -> a
    void access$3(org.geometerplus.fbreader.fbreader.TapZoneMap,int) -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$TapZoneMap$Tap() -> a
org.geometerplus.fbreader.fbreader.TapZoneMap$Reader -> org.geometerplus.fbreader.b.ab:
    org.geometerplus.fbreader.fbreader.TapZoneMap this$0 -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.fbreader.TapZoneMap$Tap -> org.geometerplus.fbreader.b.ac:
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap singleTap -> a
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap singleNotDoubleTap -> b
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap doubleTap -> c
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap[] values() -> values
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.TapZoneMap$Zone -> org.geometerplus.fbreader.b.ad:
    int HIndex -> a
    int VIndex -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.fbreader.TextBuildTraverser -> org.geometerplus.fbreader.b.ae:
    java.lang.StringBuilder myBuffer -> a
    void processWord(org.geometerplus.zlibrary.text.view.ZLTextWord) -> a
    void processSpace() -> a
    void processEndOfParagraph() -> b
    java.lang.String getText() -> c
org.geometerplus.fbreader.fbreader.TurnPageAction -> org.geometerplus.fbreader.b.af:
    boolean myForward -> a
    boolean isEnabled() -> a
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.VolumeKeyTurnPageAction -> org.geometerplus.fbreader.b.ag:
    boolean myForward -> a
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.WallpapersUtil -> org.geometerplus.fbreader.b.ah:
    java.util.List predefinedWallpaperFiles() -> a
    java.util.List externalWallpaperFiles() -> b
org.geometerplus.fbreader.fbreader.WordCountTraverser -> org.geometerplus.fbreader.b.ai:
    int myCount -> a
    void processWord(org.geometerplus.zlibrary.text.view.ZLTextWord) -> a
    void processSpace() -> a
    void processEndOfParagraph() -> b
    int getCount() -> c
org.geometerplus.fbreader.formats.FormatPlugin -> org.geometerplus.fbreader.c.a:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.formats.PluginCollection -> org.geometerplus.fbreader.c.b:
    org.geometerplus.fbreader.formats.PluginCollection ourInstance -> d
    java.util.ArrayList myPlugins -> e
    org.geometerplus.zlibrary.core.options.ZLStringOption DefaultLanguageOption -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption DefaultEncodingOption -> b
    org.geometerplus.zlibrary.core.options.ZLBooleanOption LanguageAutoDetectOption -> c
    org.geometerplus.fbreader.formats.PluginCollection Instance() -> a
    org.geometerplus.fbreader.formats.FormatPlugin getPlugin(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
org.geometerplus.fbreader.formats.daisy3.Daisy3MetaInfoReader -> org.geometerplus.fbreader.c.a.a:
    org.geometerplus.fbreader.library.Book myBook -> a
    java.lang.String myDCMetadataTag -> b
    java.lang.String myMetadataTag -> c
    java.lang.String myOpfMetadataTag -> d
    java.lang.String myMetadataTagRealName -> e
    java.lang.String myTitleTag -> f
    java.lang.String myAuthorTag -> g
    java.lang.String mySubjectTag -> h
    java.lang.String myLanguageTag -> i
    java.lang.String myMetaTag -> j
    java.lang.String mySeriesTitle -> k
    int mySeriesIndex -> l
    java.util.ArrayList myAuthorList -> m
    java.util.ArrayList myAuthorList2 -> n
    int myReadState -> o
    boolean myReadMetaData -> p
    java.lang.StringBuffer myBuffer -> q
    boolean readMetaInfo(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.daisy3.Daisy3OPFReader -> org.geometerplus.fbreader.c.a.b:
    char[] Dots -> b
    org.geometerplus.fbreader.bookmodel.BookReader myModelReader -> c
    java.util.HashMap myIdToHref -> d
    java.lang.String daisy3XMLFileName -> e
    java.lang.String myFilePrefix -> f
    java.lang.String myNCXTOCFileName -> g
    java.util.Map navigationMap -> a
    java.util.TreeMap myFileNumbers -> h
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader reader -> i
    boolean readBook(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void generateTOC() -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    boolean dontCacheAttributeValues() -> a
org.geometerplus.fbreader.formats.daisy3.Daisy3Plugin -> org.geometerplus.fbreader.c.a.c:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile getOpfFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    boolean readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader -> org.geometerplus.fbreader.c.a.d:
    java.util.HashMap ourTagActions -> f
    org.geometerplus.fbreader.bookmodel.BookReader myModelReader -> g
    java.lang.String myPathPrefix -> a
    java.lang.String myLocalPathPrefix -> b
    java.lang.String myReferencePrefix -> c
    boolean myPreformatted -> d
    boolean myInsideBody -> e
    java.util.Map myFileNumbers -> h
    java.lang.String[] BLOCK_ELEMENTS -> i
    java.lang.String[] NO_FORMAT_ELEMENTS -> j
    java.util.ArrayList ourExternalDTDs -> k
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagAction addAction(java.lang.String,org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagAction) -> a
    void fillTagTable() -> c
    org.geometerplus.fbreader.bookmodel.BookReader getModelReader() -> d
    boolean readFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    java.util.List xhtmlDTDs() -> a_
    java.util.List externalDTDs() -> f
    boolean dontCacheAttributeValues() -> a
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    java.lang.String getFileAlias(java.lang.String) -> b
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagAction -> org.geometerplus.fbreader.c.a.e:
    void doAtStart(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader) -> a
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagAnnotatedWithControlAction -> org.geometerplus.fbreader.c.a.f:
    byte myControl -> a
    java.lang.String myPrelude -> b
    java.lang.String myPostlude -> c
    void doAtStart(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader) -> a
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagControlAction -> org.geometerplus.fbreader.c.a.g:
    byte myControl -> a
    void doAtStart(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader) -> a
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagHyperlinkAction -> org.geometerplus.fbreader.c.a.h:
    byte kind -> a
    void doAtStart(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader) -> a
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagImageAction -> org.geometerplus.fbreader.c.a.i:
    java.lang.String myNamespace -> a
    java.lang.String myNameAttribute -> b
    void doAtStart(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader) -> a
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagLevelControlAction -> org.geometerplus.fbreader.c.a.j:
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagLevelControlAction instance -> a
    java.util.LinkedHashMap toc_paragraph_map -> b
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagLevelControlAction getInstance() -> a
    void storeParagraphNumforLevel(java.lang.String,int) -> a
    java.util.LinkedHashMap getToc_paragraph_map() -> b
    void doAtStart(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader) -> a
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagListAction -> org.geometerplus.fbreader.c.a.k:
    char[] BULLET -> a
    char[] BASE26CHARS -> b
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagListAction instance -> c
    java.util.Stack listStack -> d
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagListAction getInstance() -> a
    void doAtStart(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader) -> a
    void startList(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> b
    void endList(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader) -> b
    java.lang.String getAlphabeticValue(java.lang.Integer) -> a
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagListAction$ListType -> org.geometerplus.fbreader.c.a.l:
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagListAction$ListType UL -> a
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagListAction$ListType OL -> b
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagListAction$ListType PL -> c
    java.lang.String name -> d
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagListAction$ListType[] ENUM$VALUES -> e
    java.lang.String getName() -> a
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagListAction$ListType[] values() -> values
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagListAction$ListType valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagListAction$ListTypeItem -> org.geometerplus.fbreader.c.a.m:
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagListAction$ListType listType -> a
    boolean alphabetic -> b
    java.lang.Integer itemNumber -> c
    void incrementItemNumber() -> a
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagListAction$ListType getListType() -> b
    java.lang.Integer getItemNumber() -> c
    boolean isAlphabetic() -> d
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagPageControlAction -> org.geometerplus.fbreader.c.a.n:
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagPageControlAction instance -> a
    java.util.LinkedHashMap pageNumToParagraph -> b
    org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagPageControlAction getInstance() -> a
    void storeParagraphNumforPage(java.lang.String,int) -> a
    java.util.LinkedHashMap getPageNumToParagraphMap() -> b
    void doAtStart(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader) -> a
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagParagraphAction -> org.geometerplus.fbreader.c.a.o:
    void doAtStart(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader) -> a
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagParagraphWithControlAction -> org.geometerplus.fbreader.c.a.p:
    byte myControl -> a
    void doAtStart(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader) -> a
org.geometerplus.fbreader.formats.daisy3.Daisy3XMLTagRestartParagraphAction -> org.geometerplus.fbreader.c.a.q:
    void doAtStart(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.daisy3.Daisy3XMLReader) -> a
org.geometerplus.fbreader.formats.daisy3.NCXReader -> org.geometerplus.fbreader.c.a.r:
    java.util.TreeMap myNavigationMap -> c
    java.util.LinkedHashMap pageIdToPageText -> d
    org.geometerplus.fbreader.formats.daisy3.NCXReader$Page currentPage -> e
    java.util.ArrayList myPointStack -> f
    org.geometerplus.fbreader.bookmodel.BookReader myModelReader -> g
    int myReadState -> a
    int myPlayIndex -> b
    java.lang.String myLocalPathPrefix -> h
    boolean readFile(java.lang.String) -> b
    java.util.Map navigationMap() -> c
    java.util.LinkedHashMap pageMap() -> d
    int atoi(java.lang.String) -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean dontCacheAttributeValues() -> a
org.geometerplus.fbreader.formats.daisy3.NCXReader$NavPoint -> org.geometerplus.fbreader.c.a.s:
    int Order -> a
    int Level -> b
    java.lang.String Text -> c
    java.lang.String id -> d
org.geometerplus.fbreader.formats.daisy3.NCXReader$Page -> org.geometerplus.fbreader.c.a.t:
    java.lang.String text -> a
    java.lang.String id -> b
org.geometerplus.fbreader.formats.fb2.Base64EncodedImage -> org.geometerplus.fbreader.c.b.a:
    int ourCounter -> a
    java.lang.String myDirName -> b
    int myFileNumber -> c
    java.io.OutputStreamWriter myStreamWriter -> d
    void resetCounter() -> a
    java.lang.String encodedFileName() -> b
    java.lang.String decodedFileName() -> c
    void addData(char[],int,int) -> a
    void close() -> d
org.geometerplus.fbreader.formats.fb2.FB2AnnotationReader -> org.geometerplus.fbreader.c.b.b:
    int myReadState -> a
    java.lang.StringBuilder myBuffer -> b
    boolean dontCacheAttributeValues() -> a
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean readDocument(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
org.geometerplus.fbreader.formats.fb2.FB2CoverImage -> org.geometerplus.fbreader.c.b.c:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> a
    int sourceType() -> b
    java.lang.String getId() -> c
org.geometerplus.fbreader.formats.fb2.FB2CoverImage$BackgroundReader -> org.geometerplus.fbreader.c.b.d:
    boolean myReadCoverPage -> a
    java.lang.String myImageReference -> b
    org.geometerplus.fbreader.formats.fb2.Base64EncodedImage myImage -> c
    org.geometerplus.fbreader.formats.fb2.Base64EncodedImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.fbreader.formats.fb2.FB2CoverReader -> org.geometerplus.fbreader.c.b.e:
    org.geometerplus.fbreader.formats.fb2.FB2CoverImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
org.geometerplus.fbreader.formats.fb2.FB2MetaInfoReader -> org.geometerplus.fbreader.c.b.f:
    org.geometerplus.fbreader.library.Book myBook -> a
    int myReadState -> b
    java.lang.String[] myAuthorNames -> c
    java.lang.StringBuilder myBuffer -> d
    boolean dontCacheAttributeValues() -> a
    boolean readMetaInfo() -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean readDocument(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
org.geometerplus.fbreader.formats.fb2.FB2Plugin -> org.geometerplus.fbreader.c.b.g:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.formats.fb2.FB2Reader -> org.geometerplus.fbreader.c.b.h:
    org.geometerplus.fbreader.bookmodel.BookReader myBookReader -> a
    boolean myInsidePoem -> b
    boolean myInsideTitle -> c
    int myBodyCounter -> d
    boolean myReadMainText -> e
    int mySectionDepth -> f
    boolean mySectionStarted -> g
    byte myHyperlinkType -> h
    org.geometerplus.fbreader.formats.fb2.Base64EncodedImage myCurrentImage -> i
    boolean myInsideCoverpage -> j
    java.lang.String myCoverImageReference -> k
    int myParagraphsBeforeBodyNumber -> l
    char[] SPACE -> m
    byte[] myTagStack -> n
    int myTagStackSize -> o
    int myFootnoteIdDepth -> p
    boolean readBook() -> c
    void startDocumentHandler() -> b_
    void endDocumentHandler() -> e
    boolean dontCacheAttributeValues() -> a
    void characterDataHandler(char[],int,int) -> a
    void characterDataHandlerFinal(char[],int,int) -> b
    boolean endElementHandler(java.lang.String) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean processNamespaces() -> b
    void addExternalEntities(java.util.HashMap) -> a
    java.util.List externalDTDs() -> f
org.geometerplus.fbreader.formats.fb2.FB2Tag -> org.geometerplus.fbreader.c.b.i:
    java.util.HashMap ourTagByName -> a
    java.lang.Byte ourUnknownTag -> b
    byte getTagByName(java.lang.String) -> a
org.geometerplus.fbreader.formats.fb2.FB2TagManager -> org.geometerplus.fbreader.c.b.j:
    java.util.HashMap ourMap -> a
    java.util.ArrayList humanReadableTags(java.lang.String) -> a
    java.util.HashMap access$0() -> a
org.geometerplus.fbreader.formats.fb2.FB2TagManager$FB2TagInfoReader -> org.geometerplus.fbreader.c.b.k:
    java.lang.String myLanguage -> a
    org.geometerplus.fbreader.library.Tag myCategoryTag -> b
    org.geometerplus.fbreader.library.Tag mySubCategoryTag -> c
    java.util.ArrayList myGenreIds -> d
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.html.HtmlReader -> org.geometerplus.fbreader.c.c.a:
    byte[] myStyleTable -> c
    java.nio.charset.CharsetDecoder myAttributeDecoder -> b
    boolean myInsideTitle -> d
    boolean mySectionStarted -> e
    byte myHyperlinkType -> f
    char[] SPACE -> g
    java.lang.String myHrefAttribute -> h
    boolean myOrderedListIsStarted -> i
    int myOLCounter -> j
    byte[] myControls -> k
    byte myControlsNumber -> l
    java.util.HashMap myEntityMap -> m
    java.nio.charset.CharsetDecoder createDecoder() -> n
    boolean readBook() -> o
    java.io.InputStream getInputStream() -> p
    void startDocumentHandler() -> q
    void endDocumentHandler() -> r
    void byteDataHandler(byte[],int,int) -> b
    void entityDataHandler(java.lang.String) -> d
    void openControl(byte) -> d
    void closeControl(byte) -> e
    void startNewParagraph() -> s
    void endElementHandler(java.lang.String) -> e
    void endElementHandler(byte) -> c
    void startElementHandler(java.lang.String,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void startElementHandler(byte,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
org.geometerplus.fbreader.formats.html.HtmlTag -> org.geometerplus.fbreader.c.c.b:
    java.util.HashMap ourTagByName -> a
    java.lang.Byte ourUnknownTag -> b
    byte getTagByName(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.ContainerFileReader -> org.geometerplus.fbreader.c.d.a:
    java.lang.String myRootPath -> a
    java.lang.String getRootPath() -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.formats.oeb.NCXReader -> org.geometerplus.fbreader.c.d.b:
    java.util.TreeMap myNavigationMap -> c
    java.util.ArrayList myPointStack -> d
    int myReadState -> a
    int myPlayIndex -> b
    java.lang.String myLocalPathPrefix -> e
    boolean readFile(java.lang.String) -> b
    java.util.Map navigationMap() -> c
    int atoi(java.lang.String) -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean dontCacheAttributeValues() -> a
org.geometerplus.fbreader.formats.oeb.NCXReader$NavPoint -> org.geometerplus.fbreader.c.d.c:
    int Order -> a
    int Level -> b
    java.lang.String Text -> c
    java.lang.String ContentHRef -> d
org.geometerplus.fbreader.formats.oeb.OEBAnnotationReader -> org.geometerplus.fbreader.c.d.d:
    java.lang.String myDescriptionTag -> a
    int myReadState -> b
    java.lang.StringBuilder myBuffer -> c
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.OEBBookReader -> org.geometerplus.fbreader.c.d.e:
    char[] Dots -> a
    org.geometerplus.fbreader.bookmodel.BookReader myModelReader -> b
    java.util.HashMap myIdToHref -> c
    java.util.ArrayList myHtmlFileNames -> d
    java.util.ArrayList myTourTOC -> e
    java.util.ArrayList myGuideTOC -> f
    java.lang.String myOPFSchemePrefix -> g
    java.lang.String myFilePrefix -> h
    java.lang.String myNCXTOCFileName -> i
    java.lang.String myCoverFileName -> j
    java.util.TreeMap myFileNumbers -> k
    java.util.TreeMap myTOCLabels -> l
    int myState -> m
    boolean readBook(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.fbreader.bookmodel.BookModel$Label getTOCLabel(java.lang.String) -> b
    void generateTOC() -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    boolean dontCacheAttributeValues() -> a
org.geometerplus.fbreader.formats.oeb.OEBBookReader$1 -> org.geometerplus.fbreader.c.d.f:
    org.geometerplus.fbreader.formats.oeb.OEBBookReader this$0 -> a
    java.util.List getCandidates(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.OEBCoverBackgroundReader -> org.geometerplus.fbreader.c.d.g:
    org.geometerplus.zlibrary.core.image.ZLFileImage myImage -> a
    java.lang.String myPathPrefix -> b
    boolean myReadGuide -> c
    org.geometerplus.zlibrary.core.image.ZLFileImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.OEBCoverReader -> org.geometerplus.fbreader.c.d.h:
    org.geometerplus.zlibrary.core.image.ZLImageProxy readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
org.geometerplus.fbreader.formats.oeb.OEBCoverReader$OEBCoverImage -> org.geometerplus.fbreader.c.d.i:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> a
    int sourceType() -> b
    java.lang.String getId() -> c
org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader -> org.geometerplus.fbreader.c.d.j:
    org.geometerplus.fbreader.library.Book myBook -> a
    java.lang.String myDCMetadataTag -> b
    java.lang.String myMetadataTag -> c
    java.lang.String myOpfMetadataTag -> d
    java.lang.String myMetadataTagRealName -> e
    java.lang.String myTitleTag -> f
    java.lang.String myAuthorTag -> g
    java.lang.String mySubjectTag -> h
    java.lang.String myLanguageTag -> i
    java.lang.String myMetaTag -> j
    java.lang.String mySeriesTitle -> k
    float mySeriesIndex -> l
    java.util.ArrayList myAuthorList -> m
    java.util.ArrayList myAuthorList2 -> n
    int myReadState -> o
    boolean myReadMetaData -> p
    java.lang.StringBuilder myBuffer -> q
    boolean readMetaInfo(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.OEBPlugin -> org.geometerplus.fbreader.c.d.k:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile getOpfFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    boolean readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.formats.oeb.Reference -> org.geometerplus.fbreader.c.d.l:
    java.lang.String Title -> a
    java.lang.String HRef -> b
org.geometerplus.fbreader.formats.oeb.XHTMLImageFinder -> org.geometerplus.fbreader.c.d.m:
    java.lang.String myXHTMLPathPrefix -> a
    org.geometerplus.zlibrary.core.image.ZLFileImage myImage -> b
    org.geometerplus.zlibrary.core.image.ZLFileImage getCoverImage(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.zlibrary.core.image.ZLFileImage readImage(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    boolean processNamespaces() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.formats.pdb.DocDecompressor -> org.geometerplus.fbreader.c.e.a:
    int decompress(java.io.InputStream,byte[],int) -> a
org.geometerplus.fbreader.formats.pdb.MobipocketHtmlBookReader -> org.geometerplus.fbreader.c.e.b:
    java.nio.charset.CharsetDecoder myTocDecoder -> c
    org.geometerplus.fbreader.formats.pdb.MobipocketStream myMobipocketStream -> d
    boolean myReadGuide -> e
    int myTocStartOffset -> f
    int myTocEndOffset -> g
    java.util.TreeMap myTocEntries -> h
    java.util.TreeMap myPositionToParagraph -> i
    java.util.TreeSet myFileposReferences -> j
    int myCurrentTocPosition -> k
    org.geometerplus.zlibrary.core.html.ZLByteBuffer myTocBuffer -> l
    java.io.InputStream getInputStream() -> p
    boolean tocRangeContainsPosition(int) -> b
    void startElementHandler(byte,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void endElementHandler(byte) -> c
    void byteDataHandler(byte[],int,int) -> b
    void startDocumentHandler() -> q
    void endDocumentHandler() -> r
org.geometerplus.fbreader.formats.pdb.MobipocketPlugin -> org.geometerplus.fbreader.c.e.c:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.formats.pdb.MobipocketStream -> org.geometerplus.fbreader.c.e.d:
    int myFileSize -> i
    int myImageStartIndex -> j
    int getImageOffset(int) -> a
    int getImageLength(int) -> b
org.geometerplus.fbreader.formats.pdb.PalmDocLikeStream -> org.geometerplus.fbreader.c.e.e:
    int myMaxRecordIndex -> a
    int myRecordIndex -> b
    int myCompressionType -> c
    long myFileSize -> i
    boolean fillBuffer() -> a
org.geometerplus.fbreader.formats.pdb.PdbHeader -> org.geometerplus.fbreader.c.e.f:
    java.lang.String DocName -> a
    int Flags -> b
    java.lang.String Id -> c
    int[] Offsets -> d
    int length() -> a
org.geometerplus.fbreader.formats.pdb.PdbPlugin -> org.geometerplus.fbreader.c.e.g:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.lang.String fileType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
org.geometerplus.fbreader.formats.pdb.PdbStream -> org.geometerplus.fbreader.c.e.h:
    org.geometerplus.zlibrary.core.util.ZLInputStreamWithOffset myBase -> d
    org.geometerplus.fbreader.formats.pdb.PdbHeader myHeader -> e
    byte[] myBuffer -> f
    short myBufferLength -> g
    short myBufferOffset -> h
    int read() -> read
    int read(byte[],int,int) -> read
    void close() -> close
    boolean fillBuffer() -> a
org.geometerplus.fbreader.formats.pdb.PdbUtil -> org.geometerplus.fbreader.c.e.i:
    void skip(java.io.InputStream,int) -> a
    int readShort(java.io.InputStream) -> a
    long readInt(java.io.InputStream) -> b
org.geometerplus.fbreader.formats.util.MiscUtil -> org.geometerplus.fbreader.c.f.a:
    java.lang.String htmlDirectoryPrefix(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.lang.String archiveEntryName(java.lang.String) -> a
    boolean isHexDigit(char) -> a
    java.lang.String decodeHtmlReference(java.lang.String) -> b
org.geometerplus.fbreader.formats.xhtml.XHTMLReader -> org.geometerplus.fbreader.c.g.a:
    java.util.HashMap ourTagActions -> f
    org.geometerplus.fbreader.bookmodel.BookReader myModelReader -> g
    java.lang.String myPathPrefix -> a
    java.lang.String myLocalPathPrefix -> b
    java.lang.String myReferencePrefix -> c
    boolean myPreformatted -> d
    boolean myInsideBody -> e
    java.util.Map myFileNumbers -> h
    java.util.ArrayList ourExternalDTDs -> i
    org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction addAction(java.lang.String,org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction) -> a
    void fillTagTable() -> c
    org.geometerplus.fbreader.bookmodel.BookReader getModelReader() -> g
    java.lang.String getFileAlias(java.lang.String) -> b
    boolean readFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    java.util.List xhtmlDTDs() -> h
    java.util.List externalDTDs() -> f
    boolean dontCacheAttributeValues() -> a
    boolean processNamespaces() -> b
org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction -> org.geometerplus.fbreader.c.g.b:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagBodyAction -> org.geometerplus.fbreader.c.g.c:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagControlAction -> org.geometerplus.fbreader.c.g.d:
    byte myControl -> a
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagHyperlinkAction -> org.geometerplus.fbreader.c.g.e:
    byte[] myHyperlinkStack -> a
    int myHyperlinkStackSize -> b
    boolean isReference(java.lang.String) -> a
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagImageAction -> org.geometerplus.fbreader.c.g.f:
    java.lang.String myNamespace -> a
    java.lang.String myNameAttribute -> b
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagItemAction -> org.geometerplus.fbreader.c.g.g:
    char[] BULLET -> a
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagParagraphAction -> org.geometerplus.fbreader.c.g.h:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagParagraphWithControlAction -> org.geometerplus.fbreader.c.g.i:
    byte myControl -> a
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagPreAction -> org.geometerplus.fbreader.c.g.j:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagRestartParagraphAction -> org.geometerplus.fbreader.c.g.k:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.library.Author -> org.geometerplus.fbreader.d.a:
    java.lang.String DisplayName -> a
    java.lang.String SortKey -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.library.AuthorTree -> org.geometerplus.fbreader.d.b:
    org.geometerplus.fbreader.library.Author Author -> a
    java.lang.String getName() -> a
    java.lang.String getStringId() -> b
    java.lang.String getSortKey() -> c
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
org.geometerplus.fbreader.library.Book -> org.geometerplus.fbreader.d.c:
    org.geometerplus.zlibrary.core.filesystem.ZLFile File -> a
    long myId -> b
    java.lang.String myEncoding -> c
    java.lang.String myLanguage -> d
    java.lang.String myTitle -> e
    java.util.List myAuthors -> f
    java.util.List myTags -> g
    org.geometerplus.fbreader.library.SeriesInfo mySeriesInfo -> h
    boolean myIsSaved -> i
    java.util.Set myVisitedHyperlinks -> j
    org.geometerplus.fbreader.library.Book getById(long) -> a
    org.geometerplus.fbreader.library.Book getByFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void reloadInfoFromFile() -> a
    void reloadInfoFromDatabase() -> b
    boolean readMetaInfo() -> c
    void loadLists() -> o
    java.util.List authors() -> d
    void addAuthorWithNoCheck(org.geometerplus.fbreader.library.Author) -> a
    void addAuthor(org.geometerplus.fbreader.library.Author) -> b
    void addAuthor(java.lang.String) -> a
    void addAuthor(java.lang.String,java.lang.String) -> a
    long getId() -> e
    java.lang.String getTitle() -> f
    void setTitle(java.lang.String) -> b
    org.geometerplus.fbreader.library.SeriesInfo getSeriesInfo() -> g
    void setSeriesInfoWithNoCheck(java.lang.String,float) -> a
    void setSeriesInfo(java.lang.String,float) -> b
    java.lang.String getLanguage() -> h
    void setLanguage(java.lang.String) -> c
    java.lang.String getEncoding() -> i
    void setEncoding(java.lang.String) -> d
    java.util.List tags() -> j
    void addTagWithNoCheck(org.geometerplus.fbreader.library.Tag) -> a
    void addTag(org.geometerplus.fbreader.library.Tag) -> b
    void addTag(java.lang.String) -> e
    boolean matches(java.lang.String) -> f
    boolean save() -> k
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStoredPosition() -> l
    void storePosition(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    void initHyperlinkSet() -> p
    boolean isHyperlinkVisited(java.lang.String) -> g
    void markHyperlinkAsVisited(java.lang.String) -> h
    void storeAllVisitedHyperinks() -> q
    void insertIntoBookList() -> m
    java.lang.String getContentHashCode() -> n
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    long access$0(org.geometerplus.fbreader.library.Book) -> a
    java.lang.String access$1(org.geometerplus.fbreader.library.Book) -> b
    java.lang.String access$2(org.geometerplus.fbreader.library.Book) -> c
    java.lang.String access$3(org.geometerplus.fbreader.library.Book) -> d
    void access$4(org.geometerplus.fbreader.library.Book,long) -> a
    void access$5(org.geometerplus.fbreader.library.Book) -> e
    org.geometerplus.fbreader.library.SeriesInfo access$6(org.geometerplus.fbreader.library.Book) -> f
org.geometerplus.fbreader.library.Book$1 -> org.geometerplus.fbreader.d.d:
    org.geometerplus.fbreader.library.Book this$0 -> a
    org.geometerplus.fbreader.library.BooksDatabase val$database -> b
    void run() -> run
org.geometerplus.fbreader.library.BookInSeriesTree -> org.geometerplus.fbreader.d.e:
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
org.geometerplus.fbreader.library.BookTree -> org.geometerplus.fbreader.d.f:
    org.geometerplus.fbreader.library.Book Book -> a
    boolean myShowAuthors -> b
    java.lang.String getName() -> a
    org.geometerplus.fbreader.library.Book getBook() -> d
    java.lang.String getStringId() -> b
    java.lang.String getSummary() -> e
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
    boolean equals(java.lang.Object) -> equals
org.geometerplus.fbreader.library.Bookmark -> org.geometerplus.fbreader.d.g:
    long myId -> c
    long myBookId -> d
    java.lang.String myBookTitle -> e
    java.lang.String myText -> f
    java.util.Date myCreationDate -> g
    java.util.Date myModificationDate -> h
    java.util.Date myAccessDate -> i
    int myAccessCount -> m
    java.util.Date myLatestDate -> n
    java.lang.String ModelId -> a
    boolean IsVisible -> b
    boolean myIsChanged -> o
    java.lang.String myPageNumber -> p
    java.util.List bookmarks() -> a
    java.util.List invisibleBookmarks(org.geometerplus.fbreader.library.Book) -> a
    java.lang.String getPage() -> n
    long getId() -> b
    long getBookId() -> c
    java.lang.String getText() -> d
    java.lang.String getBookTitle() -> e
    java.lang.String getPageNumber() -> f
    java.util.Date getTime(int) -> a
    int getAccessCount() -> g
    void onOpen() -> h
    void save() -> i
    void delete() -> j
    java.lang.String createBookmarkText(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int) -> a
org.geometerplus.fbreader.library.Bookmark$ByTimeComparator -> org.geometerplus.fbreader.d.h:
    int compare(org.geometerplus.fbreader.library.Bookmark,org.geometerplus.fbreader.library.Bookmark) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.library.BooksDatabase -> org.geometerplus.fbreader.d.i:
    org.geometerplus.fbreader.library.BooksDatabase ourInstance -> a
    org.geometerplus.fbreader.library.BooksDatabase Instance() -> e
    org.geometerplus.fbreader.library.Book createBook(long,long,java.lang.String,java.lang.String,java.lang.String) -> b
    org.geometerplus.fbreader.library.Book createBook(long,org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String,java.lang.String,java.lang.String) -> a
    void addAuthor(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Author) -> a
    void addTag(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Tag) -> a
    void setSeriesInfo(org.geometerplus.fbreader.library.Book,java.lang.String,float) -> a
    void executeAsATransaction(java.lang.Runnable) -> a
    java.util.Map loadBooks(org.geometerplus.fbreader.library.FileInfoSet,boolean) -> a
    void setExistingFlag(java.util.Collection,boolean) -> a
    org.geometerplus.fbreader.library.Book loadBook(long) -> a
    void reloadBook(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.fbreader.library.Book loadBookByFile(long,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.List loadAuthors(long) -> c
    java.util.List loadTags(long) -> e
    org.geometerplus.fbreader.library.SeriesInfo loadSeriesInfo(long) -> f
    void updateBookInfo(long,long,java.lang.String,java.lang.String,java.lang.String) -> a
    long insertBookInfo(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String,java.lang.String,java.lang.String) -> a
    void deleteAllBookAuthors(long) -> b
    void saveBookAuthorInfo(long,long,org.geometerplus.fbreader.library.Author) -> a
    void deleteAllBookTags(long) -> d
    void saveBookTagInfo(long,org.geometerplus.fbreader.library.Tag) -> a
    void saveBookSeriesInfo(long,org.geometerplus.fbreader.library.SeriesInfo) -> a
    org.geometerplus.fbreader.library.FileInfo createFileInfo(long,java.lang.String,org.geometerplus.fbreader.library.FileInfo) -> a
    java.util.Collection loadFileInfos() -> a
    java.util.Collection loadFileInfos(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.Collection loadFileInfos(long) -> h
    void removeFileInfo(long) -> g
    void saveFileInfo(org.geometerplus.fbreader.library.FileInfo) -> a
    java.util.List loadRecentBookIds() -> b
    void saveRecentBookIds(java.util.List) -> a
    java.util.List loadFavoritesIds() -> c
    void addToFavorites(long) -> i
    void removeFromFavorites(long) -> j
    org.geometerplus.fbreader.library.Bookmark createBookmark(long,long,java.lang.String,java.lang.String,java.util.Date,java.util.Date,java.util.Date,int,java.lang.String,int,int,int,boolean) -> a
    java.util.List loadBookmarks(long,boolean) -> a
    java.util.List loadAllVisibleBookmarks() -> d
    long saveBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void deleteBookmark(org.geometerplus.fbreader.library.Bookmark) -> b
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStoredPosition(long) -> k
    void storePosition(long,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    boolean insertIntoBookList(long) -> l
    boolean deleteFromBookList(long) -> m
    java.util.Collection loadVisitedHyperlinks(long) -> n
    void addVisitedHyperlink(long,java.lang.String) -> a
org.geometerplus.fbreader.library.FavoritesTree -> org.geometerplus.fbreader.d.j:
    org.geometerplus.fbreader.tree.FBTree$Status getOpeningStatus() -> g
    java.lang.String getOpeningStatusMessage() -> h
org.geometerplus.fbreader.library.FileFirstLevelTree -> org.geometerplus.fbreader.d.k:
    void addChild(java.lang.String,java.lang.String) -> a
    java.lang.String getTreeTitle() -> i
    org.geometerplus.fbreader.tree.FBTree$Status getOpeningStatus() -> g
org.geometerplus.fbreader.library.FileInfo -> org.geometerplus.fbreader.d.l:
    java.lang.String Name -> a
    long Id -> b
    long FileSize -> c
org.geometerplus.fbreader.library.FileInfoSet -> org.geometerplus.fbreader.d.m:
    java.util.HashMap myInfosByFile -> a
    java.util.HashMap myFilesByInfo -> b
    java.util.HashMap myInfosByPair -> c
    java.util.HashMap myInfosById -> d
    java.util.LinkedHashSet myInfosToSave -> e
    java.util.LinkedHashSet myInfosToRemove -> f
    void load(java.util.Collection) -> a
    void save() -> a
    boolean check(org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile,boolean) -> a
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.fbreader.library.FileInfo get(java.lang.String,org.geometerplus.fbreader.library.FileInfo) -> a
    org.geometerplus.fbreader.library.FileInfo get(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    long getId(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    org.geometerplus.zlibrary.core.filesystem.ZLFile getFile(org.geometerplus.fbreader.library.FileInfo) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile getFile(long) -> a
    void removeChildren(org.geometerplus.fbreader.library.FileInfo) -> b
    void addChildren(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    java.util.LinkedHashSet access$0(org.geometerplus.fbreader.library.FileInfoSet) -> a
    java.util.HashMap access$1(org.geometerplus.fbreader.library.FileInfoSet) -> b
    java.util.LinkedHashSet access$2(org.geometerplus.fbreader.library.FileInfoSet) -> c
org.geometerplus.fbreader.library.FileInfoSet$1 -> org.geometerplus.fbreader.d.n:
    org.geometerplus.fbreader.library.FileInfoSet this$0 -> a
    org.geometerplus.fbreader.library.BooksDatabase val$database -> b
    void run() -> run
org.geometerplus.fbreader.library.FileInfoSet$Pair -> org.geometerplus.fbreader.d.o:
    java.lang.String myName -> a
    org.geometerplus.fbreader.library.FileInfo myParent -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.geometerplus.fbreader.library.FileTree -> org.geometerplus.fbreader.d.p:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    java.lang.String myName -> b
    java.lang.String mySummary -> c
    boolean myIsSelectable -> f
    java.util.Comparator ourFileComparator -> g
    java.lang.String getName() -> a
    java.lang.String getTreeTitle() -> i
    java.lang.String getStringId() -> b
    java.lang.String getSummary() -> e
    boolean isSelectable() -> d_
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    org.geometerplus.zlibrary.core.filesystem.ZLFile getFile() -> k
    org.geometerplus.fbreader.library.Book getBook() -> d
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.fbreader.tree.FBTree$Status getOpeningStatus() -> g
    java.lang.String getOpeningStatusMessage() -> h
    void waitForOpening() -> l
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
org.geometerplus.fbreader.library.FileTree$1 -> org.geometerplus.fbreader.d.q:
    int compare(org.geometerplus.zlibrary.core.filesystem.ZLFile,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.library.FirstLevelTree -> org.geometerplus.fbreader.d.r:
    java.lang.String myId -> a
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> b
    java.lang.String getName() -> a
    java.lang.String getTreeTitle() -> i
    java.lang.String getSummary() -> e
    java.lang.String getStringId() -> b
    boolean isSelectable() -> d_
org.geometerplus.fbreader.library.Library -> org.geometerplus.fbreader.d.s:
    org.geometerplus.fbreader.library.Library ourInstance -> a
    java.util.List myBooks -> b
    org.geometerplus.fbreader.library.RootTree myRootTree -> c
    boolean myDoGroupTitlesByFirstLetter -> d
    java.util.List myListeners -> e
    int myStatusMask -> f
    java.util.List myNullList -> g
    boolean myBuildStarted -> h
    java.util.HashMap ourCoverMap -> i
    java.lang.ref.WeakReference NULL_IMAGE -> j
    org.geometerplus.fbreader.library.Library Instance() -> a
    org.geometerplus.zlibrary.core.resources.ZLResource resource() -> b
    void setStatus(int) -> a
    org.geometerplus.fbreader.library.LibraryTree getRootTree() -> c
    org.geometerplus.fbreader.library.FirstLevelTree getFirstLevelTree(java.lang.String) -> a
    void addChangeListener(org.geometerplus.fbreader.library.Library$ChangeListener) -> a
    void removeChangeListener(org.geometerplus.fbreader.library.Library$ChangeListener) -> b
    org.geometerplus.fbreader.library.LibraryTree getLibraryTree(org.geometerplus.fbreader.tree.FBTree$Key) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile getHelpFile() -> d
    void collectBooks(org.geometerplus.zlibrary.core.filesystem.ZLFile,org.geometerplus.fbreader.library.FileInfoSet,java.util.Map,java.util.Map,java.util.Set,boolean) -> a
    java.util.List collectPhysicalFiles() -> i
    void addBookToLibrary(org.geometerplus.fbreader.library.Book) -> g
    void fireModelChangedEvent(org.geometerplus.fbreader.library.Library$ChangeListener$Code) -> a
    void removeFromTree(java.lang.String,org.geometerplus.fbreader.library.Book) -> a
    void refreshInTree(java.lang.String,org.geometerplus.fbreader.library.Book) -> b
    void refreshBookInfo(org.geometerplus.fbreader.library.Book) -> a
    void build() -> j
    void startBuild() -> e
    boolean isUpToDate() -> f
    org.geometerplus.fbreader.library.Book getRecentBook() -> g
    org.geometerplus.fbreader.library.Book getPreviousBook() -> h
    void startBookSearch(java.lang.String) -> b
    void searchBooks(java.lang.String) -> c
    void addBookToRecentList(org.geometerplus.fbreader.library.Book) -> b
    boolean isBookInFavorites(org.geometerplus.fbreader.library.Book) -> c
    void addBookToFavorites(org.geometerplus.fbreader.library.Book) -> d
    void removeBookFromFavorites(org.geometerplus.fbreader.library.Book) -> e
    int getRemoveBookMode(org.geometerplus.fbreader.library.Book) -> f
    boolean canDeleteBookFile(org.geometerplus.fbreader.library.Book) -> h
    void removeBook(org.geometerplus.fbreader.library.Book,int) -> a
    org.geometerplus.zlibrary.core.image.ZLImage getCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.lang.String getAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    int access$0(org.geometerplus.fbreader.library.Library) -> a
    void access$1(org.geometerplus.fbreader.library.Library,int) -> a
    void access$2(org.geometerplus.fbreader.library.Library) -> b
    void access$3(org.geometerplus.fbreader.library.Library,java.lang.String) -> a
org.geometerplus.fbreader.library.Library$1 -> org.geometerplus.fbreader.d.t:
    org.geometerplus.fbreader.library.Library this$0 -> a
    java.util.Set val$newBooks -> b
    void run() -> run
org.geometerplus.fbreader.library.Library$2 -> org.geometerplus.fbreader.d.u:
    org.geometerplus.fbreader.library.Library this$0 -> a
    void run() -> run
org.geometerplus.fbreader.library.Library$3 -> org.geometerplus.fbreader.d.v:
    org.geometerplus.fbreader.library.Library this$0 -> a
    java.lang.String val$pattern -> b
    void run() -> run
org.geometerplus.fbreader.library.Library$ChangeListener -> org.geometerplus.fbreader.d.w:
    void onLibraryChanged(org.geometerplus.fbreader.library.Library$ChangeListener$Code) -> a
org.geometerplus.fbreader.library.Library$ChangeListener$Code -> org.geometerplus.fbreader.d.x:
    org.geometerplus.fbreader.library.Library$ChangeListener$Code BookAdded -> a
    org.geometerplus.fbreader.library.Library$ChangeListener$Code BookRemoved -> b
    org.geometerplus.fbreader.library.Library$ChangeListener$Code StatusChanged -> c
    org.geometerplus.fbreader.library.Library$ChangeListener$Code Found -> d
    org.geometerplus.fbreader.library.Library$ChangeListener$Code NotFound -> e
    org.geometerplus.fbreader.library.Library$ChangeListener$Code[] ENUM$VALUES -> f
    org.geometerplus.fbreader.library.Library$ChangeListener$Code[] values() -> values
    org.geometerplus.fbreader.library.Library$ChangeListener$Code valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.library.LibraryTree -> org.geometerplus.fbreader.d.y:
    org.geometerplus.fbreader.library.Book getBook() -> d
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
    boolean isSelectable() -> d_
    org.geometerplus.fbreader.library.TitleTree getTitleSubTree(java.lang.String) -> a
    org.geometerplus.fbreader.library.AuthorTree getAuthorSubTree(org.geometerplus.fbreader.library.Author) -> a
    org.geometerplus.fbreader.library.BookTree getBookSubTree(org.geometerplus.fbreader.library.Book,boolean) -> a
    org.geometerplus.fbreader.library.SeriesTree getSeriesSubTree(java.lang.String) -> b
    boolean removeBook(org.geometerplus.fbreader.library.Book,boolean) -> b
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
org.geometerplus.fbreader.library.RootTree -> org.geometerplus.fbreader.d.z:
    org.geometerplus.fbreader.library.Library myLibrary -> a
    java.lang.String getName() -> a
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.library.SearchResultsTree -> org.geometerplus.fbreader.d.aa:
    java.lang.String myPattern -> a
    java.lang.String getPattern() -> k
    java.lang.String getSummary() -> e
org.geometerplus.fbreader.library.SeriesInfo -> org.geometerplus.fbreader.d.ab:
    java.lang.String Name -> a
    float Index -> b
org.geometerplus.fbreader.library.SeriesTree -> org.geometerplus.fbreader.d.ac:
    java.lang.String Series -> a
    java.lang.String getName() -> a
    java.lang.String getStringId() -> b
    org.geometerplus.fbreader.library.BookTree getBookInSeriesSubTree(org.geometerplus.fbreader.library.Book) -> b
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
org.geometerplus.fbreader.library.Tag -> org.geometerplus.fbreader.d.ad:
    java.util.HashMap ourTagSet -> c
    org.geometerplus.fbreader.library.Tag Parent -> a
    java.lang.String Name -> b
    org.geometerplus.fbreader.library.Tag getTag(org.geometerplus.fbreader.library.Tag,java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.library.TagTree -> org.geometerplus.fbreader.d.ae:
    org.geometerplus.fbreader.library.Tag Tag -> a
    java.lang.String getName() -> a
    java.lang.String getStringId() -> b
    java.lang.String getSortKey() -> c
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
org.geometerplus.fbreader.library.TitleTree -> org.geometerplus.fbreader.d.af:
    java.lang.String Title -> a
    java.lang.String firstTitleLetter(org.geometerplus.fbreader.library.Book) -> b
    java.lang.String getName() -> a
    java.lang.String getStringId() -> b
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
org.geometerplus.fbreader.network.AbstractNetworkLink -> org.geometerplus.fbreader.network.a:
    int myId -> f
    java.lang.String mySiteName -> a
    java.lang.String myTitle -> b
    java.lang.String mySummary -> c
    java.lang.String myLanguage -> d
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection myInfos -> e
    int getId() -> a
    void setId(int) -> a
    java.lang.String getSiteName() -> b
    java.lang.String getTitle() -> c
    java.lang.String getSummary() -> d
    java.lang.String getLanguage() -> e
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate getUrlInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.util.Set getUrlKeys() -> f
    org.geometerplus.fbreader.network.BasketItem getBasketItem() -> g
    org.geometerplus.fbreader.network.NetworkOperationData createOperationData(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
    java.lang.String toString() -> toString
    java.lang.String getTitleForComparison() -> h
    int getLanguageOrder(java.lang.String) -> a
    int compareTo(org.geometerplus.fbreader.network.INetworkLink) -> a
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.AllCatalogsSearchItem -> org.geometerplus.fbreader.network.b:
    void runSearch(org.geometerplus.fbreader.network.tree.NetworkItemsLoader,java.lang.String) -> a
org.geometerplus.fbreader.network.Base64EncodedImage -> org.geometerplus.fbreader.network.c:
    java.lang.String myDecodedFileName -> a
    java.lang.String makeImagesDir() -> a
    void setData(java.lang.String) -> a
    boolean isCacheValid(java.io.File) -> a
    java.lang.String encodedFileName() -> b
    java.lang.String decodedFileName() -> c
org.geometerplus.fbreader.network.BasketItem -> org.geometerplus.fbreader.network.d:
    long myGeneration -> a
    org.geometerplus.zlibrary.core.options.ZLStringListOption myBooksInBasketOption -> b
    java.util.Map myBooks -> c
    void addItem(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    java.lang.CharSequence getSummary() -> a
    boolean canBeOpened() -> b
    java.lang.String getStringId() -> c
    long getGeneration() -> d
    void add(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    void remove(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    void clear() -> e
    boolean contains(org.geometerplus.fbreader.network.NetworkBookItem) -> d
    java.util.List bookIds() -> f
    org.geometerplus.fbreader.network.NetworkBookItem getBook(java.lang.String) -> a
    boolean isFullyLoaded() -> g
    org.geometerplus.zlibrary.core.money.Money cost() -> o
org.geometerplus.fbreader.network.HtmlUtil -> org.geometerplus.fbreader.network.e:
    java.lang.CharSequence getHtmlText(java.lang.String) -> a
org.geometerplus.fbreader.network.ICustomNetworkLink -> org.geometerplus.fbreader.network.f:
    void setTitle(java.lang.String) -> a
    void setSummary(java.lang.String) -> b
    void setUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type,java.lang.String) -> a
    boolean isObsolete(long) -> a
    void reloadInfo(boolean,boolean) -> a
    boolean hasChanges() -> h
org.geometerplus.fbreader.network.INetworkLink -> org.geometerplus.fbreader.network.g:
    int getId() -> a
    void setId(int) -> a
    java.lang.String getSiteName() -> b
    java.lang.String getTitle() -> c
    java.lang.String getSummary() -> d
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate getUrlInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.util.Set getUrlKeys() -> f
    java.lang.String getLanguage() -> e
    org.geometerplus.fbreader.network.NetworkOperationData createOperationData(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
    org.geometerplus.fbreader.network.BasketItem getBasketItem() -> g
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest simpleSearchRequest(java.lang.String,org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest resume(org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem libraryItem() -> i
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager authenticationManager() -> j
    java.lang.String rewriteUrl(java.lang.String,boolean) -> a
org.geometerplus.fbreader.network.IPredefinedNetworkLink -> org.geometerplus.fbreader.network.h:
    java.lang.String getPredefinedId() -> h
org.geometerplus.fbreader.network.NetworkBookItem -> org.geometerplus.fbreader.network.i:
    int Index -> a
    java.lang.String Id -> b
    java.util.LinkedList Authors -> c
    java.util.LinkedList Tags -> d
    java.lang.String SeriesTitle -> e
    float IndexInSeries -> f
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$urlInfo$UrlInfo$Type -> i
    boolean isFullyLoaded() -> b
    void loadFullInformation() -> c
    org.geometerplus.fbreader.network.NetworkCatalogItem createRelatedCatalogItem(org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo) -> a
    org.geometerplus.fbreader.network.NetworkBookItem$Status getStatus() -> d
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo getReferenceInternal(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> d
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo reference(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    org.geometerplus.fbreader.network.urlInfo.BookBuyUrlInfo buyInfo() -> e
    java.lang.String localCopyFileName() -> f
    void removeLocalFiles() -> g
    java.lang.String getStringId() -> h
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$urlInfo$UrlInfo$Type() -> i
org.geometerplus.fbreader.network.NetworkBookItem$AuthorData -> org.geometerplus.fbreader.network.j:
    java.lang.String DisplayName -> a
    java.lang.String SortKey -> b
    int compareTo(org.geometerplus.fbreader.network.NetworkBookItem$AuthorData) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.NetworkBookItem$Status -> org.geometerplus.fbreader.network.k:
    org.geometerplus.fbreader.network.NetworkBookItem$Status NotAvailable -> a
    org.geometerplus.fbreader.network.NetworkBookItem$Status Downloaded -> b
    org.geometerplus.fbreader.network.NetworkBookItem$Status ReadyForDownload -> c
    org.geometerplus.fbreader.network.NetworkBookItem$Status CanBePurchased -> d
    org.geometerplus.fbreader.network.NetworkBookItem$Status[] ENUM$VALUES -> e
    org.geometerplus.fbreader.network.NetworkBookItem$Status[] values() -> values
    org.geometerplus.fbreader.network.NetworkBookItem$Status valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.network.NetworkBookItemComparator -> org.geometerplus.fbreader.network.l:
    int compare(org.geometerplus.fbreader.network.NetworkItem,org.geometerplus.fbreader.network.NetworkItem) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.NetworkCatalogItem -> org.geometerplus.fbreader.network.m:
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility myAccessibility -> a
    int myFlags -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkCatalogItem$Accessibility -> c
    java.util.Map extraData() -> h
    boolean canBeOpened() -> b
    void loadChildren(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
    boolean supportsResumeLoading() -> i
    void resumeLoading(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> b
    int getFlags() -> j
    void setFlags(int) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getVisibility() -> k
    java.lang.String getStringId() -> c
    void doLoadChildren(org.geometerplus.fbreader.network.NetworkOperationData,org.geometerplus.zlibrary.core.network.ZLNetworkRequest) -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkCatalogItem$Accessibility() -> l
org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility -> org.geometerplus.fbreader.network.n:
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility NEVER -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility ALWAYS -> b
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility SIGNED_IN -> c
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility HAS_BOOKS -> d
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility[] ENUM$VALUES -> e
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility[] values() -> values
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.network.NetworkDatabase -> org.geometerplus.fbreader.network.o:
    org.geometerplus.fbreader.network.NetworkDatabase ourInstance -> a
    org.geometerplus.fbreader.network.NetworkDatabase Instance() -> b
    org.geometerplus.fbreader.network.INetworkLink createLink(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    java.util.List listLinks() -> a
    void saveLink(org.geometerplus.fbreader.network.INetworkLink) -> a
    void deleteLink(org.geometerplus.fbreader.network.INetworkLink) -> b
org.geometerplus.fbreader.network.NetworkException -> org.geometerplus.fbreader.network.NetworkException:
org.geometerplus.fbreader.network.NetworkImage -> org.geometerplus.fbreader.network.p:
    java.lang.String Url -> a
    org.geometerplus.zlibrary.core.image.ZLFileImage myFileImage -> b
    java.lang.String makeImageFilePath(java.lang.String,org.geometerplus.zlibrary.core.util.MimeType) -> a
    java.lang.String getFilePath() -> a
    int sourceType() -> b
    java.lang.String getId() -> c
    java.lang.String getURI() -> c_
    void synchronize() -> e
    void synchronizeFast() -> f
    void synchronizeInternal(boolean) -> a
    java.io.InputStream inputStream() -> g
org.geometerplus.fbreader.network.NetworkItem -> org.geometerplus.fbreader.network.q:
    org.geometerplus.fbreader.network.INetworkLink Link -> g
    java.lang.CharSequence Title -> h
    java.lang.CharSequence mySummary -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection myURLs -> b
    void setSummary(java.lang.CharSequence) -> a
    java.lang.CharSequence getSummary() -> a
    void addUrls(org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    java.util.List getAllInfos() -> m
    java.util.List getAllInfos(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> c
    java.lang.String getImageUrl() -> n
org.geometerplus.fbreader.network.NetworkLibrary -> org.geometerplus.fbreader.network.r:
    org.geometerplus.fbreader.network.NetworkLibrary ourInstance -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption NetworkSearchPatternOption -> a
    java.util.List myLinks -> c
    java.util.Set myListeners -> d
    java.util.Map myLoaders -> e
    org.geometerplus.zlibrary.core.options.ZLStringOption myActiveLanguageCodesOption -> f
    org.geometerplus.fbreader.network.tree.RootTree myRootTree -> g
    org.geometerplus.fbreader.network.tree.RootTree myFakeRootTree -> h
    boolean myChildrenAreInvalid -> i
    boolean myUpdateVisibility -> j
    boolean myIsInitialized -> k
    org.geometerplus.fbreader.network.SearchItem mySearchItem -> l
    boolean myUpdateInProgress -> m
    java.lang.Object myUpdateLock -> n
    org.geometerplus.fbreader.network.NetworkLibrary Instance() -> a
    org.geometerplus.zlibrary.core.resources.ZLResource resource() -> b
    java.util.List languageCodes() -> c
    org.geometerplus.zlibrary.core.options.ZLStringOption activeLanguageCodesOption() -> l
    java.util.Collection activeLanguageCodes() -> d
    void setActiveLanguageCodes(java.util.Collection) -> a
    java.lang.String commaSeparatedString(java.util.Collection) -> b
    java.util.List activeLinks() -> e
    org.geometerplus.fbreader.network.INetworkLink getLinkByUrl(java.lang.String) -> a
    org.geometerplus.fbreader.network.NetworkTree getCatalogTreeByUrl(java.lang.String) -> b
    org.geometerplus.fbreader.network.INetworkLink getLinkBySiteName(java.lang.String) -> c
    boolean isInitialized() -> f
    void initialize() -> g
    void removeAllLoadedLinks() -> m
    void runBackgroundUpdate(boolean) -> a
    void runBackgroundUpdateInternal(boolean) -> b
    java.lang.String rewriteUrl(java.lang.String,boolean) -> a
    void invalidateChildren() -> n
    void invalidateVisibility() -> h
    void makeUpToDate() -> o
    void updateVisibility() -> p
    void synchronize() -> i
    org.geometerplus.fbreader.network.NetworkTree getRootTree() -> j
    org.geometerplus.fbreader.network.tree.NetworkBookTree getFakeBookTree(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    org.geometerplus.fbreader.network.tree.BasketCatalogTree getFakeBasketTree(org.geometerplus.fbreader.network.BasketItem) -> a
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree getFakeCatalogTree(org.geometerplus.fbreader.network.NetworkCatalogItem) -> a
    org.geometerplus.fbreader.network.NetworkTree getTreeByKey(org.geometerplus.fbreader.tree.FBTree$Key) -> a
    void addCustomLink(org.geometerplus.fbreader.network.ICustomNetworkLink) -> a
    void removeCustomLink(org.geometerplus.fbreader.network.ICustomNetworkLink) -> b
    void addChangeListener(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener) -> a
    void removeChangeListener(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener) -> b
    void fireModelChangedEvent(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code,java.lang.Object[]) -> a
    void storeLoader(org.geometerplus.fbreader.network.NetworkTree,org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader getStoredLoader(org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean isUpdateInProgress() -> k
    void removeStoredLoader(org.geometerplus.fbreader.network.NetworkTree) -> b
    void access$0(org.geometerplus.fbreader.network.NetworkLibrary,boolean) -> a
    void access$1(org.geometerplus.fbreader.network.NetworkLibrary,boolean) -> b
org.geometerplus.fbreader.network.NetworkLibrary$1 -> org.geometerplus.fbreader.network.s:
    org.geometerplus.fbreader.network.NetworkLibrary this$0 -> a
    boolean val$clearCache -> b
    void run() -> run
org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener -> org.geometerplus.fbreader.network.t:
    void onLibraryChanged(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code,java.lang.Object[]) -> a
org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code -> org.geometerplus.fbreader.network.u:
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code InitializationFinished -> a
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code InitializationFailed -> b
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code SomeCode -> c
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code SignedIn -> d
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code Found -> e
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code NotFound -> f
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code EmptyCatalog -> g
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code NetworkError -> h
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code[] ENUM$VALUES -> i
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code[] values() -> values
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.network.NetworkOperationData -> org.geometerplus.fbreader.network.v:
    org.geometerplus.fbreader.network.INetworkLink Link -> a
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader Loader -> b
    java.lang.String ResumeURI -> c
    void clear() -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest resume() -> b
org.geometerplus.fbreader.network.NetworkTree -> org.geometerplus.fbreader.network.w:
    org.geometerplus.fbreader.network.INetworkLink getLink() -> d
    org.geometerplus.zlibrary.core.image.ZLImage createCover(org.geometerplus.fbreader.network.NetworkItem) -> a
    org.geometerplus.zlibrary.core.image.ZLImage createCover(java.lang.String,org.geometerplus.zlibrary.core.util.MimeType) -> a
    void removeTrees(java.util.Set) -> a
org.geometerplus.fbreader.network.NetworkURLCatalogItem -> org.geometerplus.fbreader.network.x:
    java.lang.String getCatalogUrl() -> d
    boolean canBeOpened() -> b
    java.lang.String getStringId() -> c
org.geometerplus.fbreader.network.SearchItem -> org.geometerplus.fbreader.network.y:
    java.lang.String myPattern -> a
    void setPattern(java.lang.String) -> a
    java.lang.String getPattern() -> d
    boolean canBeOpened() -> b
    void loadChildren(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
    void runSearch(org.geometerplus.fbreader.network.tree.NetworkItemsLoader,java.lang.String) -> a
    java.lang.String getStringId() -> c
org.geometerplus.fbreader.network.SingleCatalogSearchItem -> org.geometerplus.fbreader.network.z:
    void runSearch(org.geometerplus.fbreader.network.tree.NetworkItemsLoader,java.lang.String) -> a
org.geometerplus.fbreader.network.TopUpItem -> org.geometerplus.fbreader.network.aa:
org.geometerplus.fbreader.network.atom.ATOMAuthor -> org.geometerplus.fbreader.network.a.a:
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMCategory -> org.geometerplus.fbreader.network.a.b:
    java.lang.String getTerm() -> a
    java.lang.String getLabel() -> b
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMCommonAttributes -> org.geometerplus.fbreader.network.a.c:
    org.geometerplus.zlibrary.core.xml.ZLStringMap myAttributes -> a
    void readAttribute(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    java.lang.String getAttribute(java.lang.String) -> a
    void addAttribute(java.lang.String,java.lang.String) -> a
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMDateConstruct -> org.geometerplus.fbreader.network.a.d:
    int Year -> a
    int Month -> b
    int Day -> c
    int Hour -> d
    int Minutes -> e
    int Seconds -> f
    float SecondFraction -> g
    int TZHour -> h
    int TZMinutes -> i
    int[] DAYS_IN_MONTHS -> j
    boolean parse(java.lang.String,org.geometerplus.fbreader.network.atom.ATOMDateConstruct) -> a
    void appendChars(java.lang.StringBuilder,char,int) -> a
    java.lang.String getDateTime(boolean) -> a
    java.lang.String toString() -> toString
    int daysInMonth(int,int) -> a
    int compareTo(org.geometerplus.fbreader.network.atom.ATOMDateConstruct) -> a
    boolean equals(java.lang.Object) -> equals
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.atom.ATOMEntry -> org.geometerplus.fbreader.network.a.e:
    org.geometerplus.fbreader.network.atom.ATOMId Id -> a
    java.util.LinkedList Authors -> b
    java.util.LinkedList Categories -> c
    java.util.LinkedList Contributors -> d
    java.util.LinkedList Links -> e
    org.geometerplus.fbreader.network.atom.ATOMPublished Published -> f
    java.lang.CharSequence Summary -> g
    java.lang.CharSequence Content -> h
    java.lang.CharSequence Title -> i
    org.geometerplus.fbreader.network.atom.ATOMUpdated Updated -> j
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMFeedHandler -> org.geometerplus.fbreader.network.a.f:
    void processFeedStart() -> a
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
    void processFeedEnd() -> b
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata createFeed(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    org.geometerplus.fbreader.network.atom.ATOMEntry createEntry(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> b
    org.geometerplus.fbreader.network.atom.ATOMLink createLink(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> c
org.geometerplus.fbreader.network.atom.ATOMFeedMetadata -> org.geometerplus.fbreader.network.a.g:
    org.geometerplus.fbreader.network.atom.ATOMId Id -> a
    java.util.LinkedList Authors -> b
    java.util.LinkedList Categories -> c
    org.geometerplus.fbreader.network.atom.ATOMIcon Icon -> d
    java.util.LinkedList Links -> e
    java.lang.CharSequence Subtitle -> f
    java.lang.CharSequence Title -> g
    org.geometerplus.fbreader.network.atom.ATOMUpdated Updated -> h
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMIcon -> org.geometerplus.fbreader.network.a.h:
    java.lang.String Uri -> a
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMId -> org.geometerplus.fbreader.network.a.i:
    java.lang.String Uri -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMLink -> org.geometerplus.fbreader.network.a.j:
    java.lang.String getHref() -> a
    java.lang.String getRel() -> b
    java.lang.String getType() -> c
    java.lang.String getTitle() -> d
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMPersonConstruct -> org.geometerplus.fbreader.network.a.k:
    java.lang.String Name -> a
    java.lang.String Uri -> b
    java.lang.String Email -> c
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMPublished -> org.geometerplus.fbreader.network.a.l:
org.geometerplus.fbreader.network.atom.ATOMUpdated -> org.geometerplus.fbreader.network.a.m:
org.geometerplus.fbreader.network.atom.ATOMXMLReader -> org.geometerplus.fbreader.network.a.n:
    org.geometerplus.fbreader.network.atom.ATOMFeedHandler myFeedHandler -> d
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata myFeed -> e
    org.geometerplus.fbreader.network.atom.ATOMEntry myEntry -> f
    org.geometerplus.fbreader.network.atom.ATOMAuthor myAuthor -> g
    org.geometerplus.fbreader.network.atom.ATOMId myId -> h
    org.geometerplus.fbreader.network.atom.ATOMLink myLink -> i
    org.geometerplus.fbreader.network.atom.ATOMCategory myCategory -> j
    org.geometerplus.fbreader.network.atom.ATOMUpdated myUpdated -> k
    org.geometerplus.fbreader.network.atom.ATOMPublished myPublished -> l
    org.geometerplus.fbreader.network.atom.ATOMIcon myIcon -> m
    java.util.Map myNamespaceMap -> n
    int myState -> a
    java.lang.StringBuilder myBuffer -> o
    org.geometerplus.fbreader.network.atom.FormattedBuffer myFormattedBuffer -> b
    boolean myFeedMetadataProcessed -> c
    org.geometerplus.fbreader.network.atom.ATOMFeedHandler getATOMFeedHandler() -> c
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata getATOMFeed() -> g
    org.geometerplus.fbreader.network.atom.ATOMEntry getATOMEntry() -> h
    org.geometerplus.fbreader.network.atom.ATOMLink getATOMLink() -> i
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    java.lang.String getNamespace(java.lang.String) -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    java.lang.String extractBufferContent() -> j
    boolean startElementHandler(java.lang.String,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
    boolean endElementHandler(java.lang.String,java.lang.String,java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    void setFormattingType(java.lang.String) -> c
org.geometerplus.fbreader.network.atom.AbstractATOMFeedHandler -> org.geometerplus.fbreader.network.a.o:
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata createFeed(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    org.geometerplus.fbreader.network.atom.ATOMEntry createEntry(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> b
    org.geometerplus.fbreader.network.atom.ATOMLink createLink(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> c
org.geometerplus.fbreader.network.atom.FormattedBuffer -> org.geometerplus.fbreader.network.a.p:
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type myType -> a
    java.lang.StringBuilder myBuffer -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$atom$FormattedBuffer$Type -> c
    void appendText(java.lang.CharSequence) -> a
    void appendStartTag(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void appendEndTag(java.lang.String) -> a
    void reset(org.geometerplus.fbreader.network.atom.FormattedBuffer$Type) -> a
    void reset() -> a
    java.lang.CharSequence getText() -> b
    java.lang.String toString() -> toString
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$atom$FormattedBuffer$Type() -> c
org.geometerplus.fbreader.network.atom.FormattedBuffer$Type -> org.geometerplus.fbreader.network.a.q:
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type Text -> a
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type Html -> b
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type XHtml -> c
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type[] ENUM$VALUES -> d
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type[] values() -> values
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager -> org.geometerplus.fbreader.network.b.a:
    java.util.HashMap ourManagers -> c
    org.geometerplus.fbreader.network.INetworkLink Link -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption UserNameOption -> b
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager createManager(org.geometerplus.fbreader.network.INetworkLink,java.lang.Class) -> a
    java.lang.String getUserName() -> a
    java.lang.String getVisibleUserName() -> b
    boolean isAuthorised(boolean) -> a
    void authorise(java.lang.String,java.lang.String) -> a
    void logOut() -> c
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo downloadReference(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    void refreshAccountInformation() -> d
    boolean mayBeAuthorised(boolean) -> b
    boolean needsInitialization() -> e
    void initialize() -> f
    boolean needPurchase(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    void purchaseBook(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.util.List purchasedBooks() -> g
    org.geometerplus.zlibrary.core.money.Money currentAccount() -> h
    java.lang.String topupLink(org.geometerplus.zlibrary.core.money.Money) -> a
    java.util.Map getTopupData() -> i
org.geometerplus.fbreader.network.authentication.litres.ByAuthorCatalogItem -> org.geometerplus.fbreader.network.b.a.a:
    java.util.Comparator getComparator() -> d
    java.lang.String getStringId() -> c
org.geometerplus.fbreader.network.authentication.litres.ByDateCatalogItem -> org.geometerplus.fbreader.network.b.a.b:
    java.util.Comparator getComparator() -> d
    java.lang.String getStringId() -> c
org.geometerplus.fbreader.network.authentication.litres.BySeriesCatalogItem -> org.geometerplus.fbreader.network.b.a.c:
    java.util.Comparator getComparator() -> d
    boolean accepts(org.geometerplus.fbreader.network.NetworkItem) -> a
    java.lang.String getStringId() -> c
org.geometerplus.fbreader.network.authentication.litres.BySeriesCatalogItem$1 -> org.geometerplus.fbreader.network.b.a.d:
    org.geometerplus.fbreader.network.authentication.litres.BySeriesCatalogItem this$0 -> a
    int compare(org.geometerplus.fbreader.network.NetworkItem,org.geometerplus.fbreader.network.NetworkItem) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.authentication.litres.ByTitleCatalogItem -> org.geometerplus.fbreader.network.b.a.e:
    java.util.Comparator getComparator() -> d
    java.lang.String getStringId() -> c
org.geometerplus.fbreader.network.authentication.litres.ByTitleCatalogItem$1 -> org.geometerplus.fbreader.network.b.a.f:
    org.geometerplus.fbreader.network.authentication.litres.ByTitleCatalogItem this$0 -> a
    int compare(org.geometerplus.fbreader.network.NetworkItem,org.geometerplus.fbreader.network.NetworkItem) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationManager -> org.geometerplus.fbreader.network.b.a.g:
    boolean myFullyInitialized -> c
    org.geometerplus.zlibrary.core.options.ZLStringOption mySidOption -> d
    org.geometerplus.zlibrary.core.options.ZLStringOption myUserIdOption -> e
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myCanRebillOption -> f
    java.lang.String myInitializedDataSid -> g
    org.geometerplus.zlibrary.core.money.Money myAccount -> h
    org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationManager$BookCollection myPurchasedBooks -> i
    boolean initUser(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void logOut() -> c
    void logOut(boolean) -> c
    boolean isAuthorised(boolean) -> a
    void authorise(java.lang.String,java.lang.String) -> a
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo downloadReference(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    boolean needPurchase(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    void purchaseBook(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.lang.String topupLink(org.geometerplus.zlibrary.core.money.Money) -> a
    org.geometerplus.zlibrary.core.money.Money currentAccount() -> h
    void reloadPurchasedBooks() -> j
    java.util.List purchasedBooks() -> g
    boolean needsInitialization() -> e
    void initialize() -> f
    void refreshAccountInformation() -> d
    org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest loadPurchasedBooksRequest(java.lang.String) -> a
    void loadPurchasedBooksOnError() -> k
    void loadPurchasedBooksOnSuccess(org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest) -> a
    org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest loadAccountRequest(java.lang.String) -> b
    java.util.Map getTopupData() -> i
    java.lang.String parseUrl(java.lang.String,java.util.Map) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationManager$BookCollection -> org.geometerplus.fbreader.network.b.a.h:
    java.util.Map myMap -> b
    java.util.List myList -> c
    org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationManager this$0 -> a
    void clear() -> a
    boolean isEmpty() -> b
    void addToStart(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    void addToEnd(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    boolean contains(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.util.List list() -> c
org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationXMLReader -> org.geometerplus.fbreader.network.b.a.i:
    java.lang.String HostName -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkException myException -> b
    void setException(org.geometerplus.zlibrary.core.network.ZLNetworkException) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkException getException() -> c
org.geometerplus.fbreader.network.authentication.litres.LitResBookshelfItem -> org.geometerplus.fbreader.network.b.a.j:
    boolean myForceReload -> a
    void loadChildren(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResLoginXMLReader -> org.geometerplus.fbreader.network.b.a.k:
    java.lang.String FirstName -> b
    java.lang.String LastName -> c
    java.lang.String UserId -> d
    java.lang.String Sid -> e
    boolean CanRebill -> f
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest -> org.geometerplus.fbreader.network.b.a.l:
    org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationXMLReader Reader -> a
    java.lang.String clean(java.lang.String) -> a
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResPurchaseXMLReader -> org.geometerplus.fbreader.network.b.a.m:
    java.lang.String Account -> b
    java.lang.String BookId -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResRecommendationsItem -> org.geometerplus.fbreader.network.b.a.n:
    java.lang.String getCatalogUrl() -> d
org.geometerplus.fbreader.network.authentication.litres.LitResUtil -> org.geometerplus.fbreader.network.b.a.o:
    java.lang.String url(java.lang.String) -> a
    java.lang.String url(org.geometerplus.fbreader.network.INetworkLink,java.lang.String) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResXMLReader -> org.geometerplus.fbreader.network.b.a.p:
    org.geometerplus.fbreader.network.opds.OPDSNetworkLink Link -> b
    java.util.List Books -> c
    int myIndex -> d
    java.lang.String myBookId -> e
    java.lang.String myTitle -> f
    java.lang.String mySeriesTitle -> g
    int myIndexInSeries -> h
    java.lang.CharSequence mySummary -> i
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection myUrls -> j
    java.lang.String myAuthorFirstName -> k
    java.lang.String myAuthorMiddleName -> l
    java.lang.String myAuthorLastName -> m
    java.util.LinkedList myAuthors -> n
    java.util.LinkedList myTags -> o
    int myState -> p
    java.lang.StringBuilder myBuffer -> q
    org.geometerplus.fbreader.network.atom.FormattedBuffer myAnnotationBuffer -> r
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.fbreader.network.authentication.litres.SortedCatalogItem -> org.geometerplus.fbreader.network.b.a.q:
    java.util.List myChildren -> a
    boolean canBeOpened() -> b
    boolean isEmpty() -> e
    java.util.Comparator getComparator() -> d
    boolean accepts(org.geometerplus.fbreader.network.NetworkItem) -> a
    void loadChildren(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
org.geometerplus.fbreader.network.opds.AbstractOPDSFeedHandler -> org.geometerplus.fbreader.network.c.a:
    org.geometerplus.fbreader.network.opds.OPDSFeedMetadata createFeed(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> d
    org.geometerplus.fbreader.network.opds.OPDSEntry createEntry(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> e
    org.geometerplus.fbreader.network.opds.OPDSLink createLink(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> f
    org.geometerplus.fbreader.network.atom.ATOMLink createLink(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> c
    org.geometerplus.fbreader.network.atom.ATOMEntry createEntry(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> b
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata createFeed(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.network.opds.DCDate -> org.geometerplus.fbreader.network.c.b:
org.geometerplus.fbreader.network.opds.OPDSBasketItem -> org.geometerplus.fbreader.network.c.c:
    void loadChildren(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem -> org.geometerplus.fbreader.network.c.d:
    boolean myInformationIsFull -> i
    org.geometerplus.fbreader.network.opds.OPDSBookItem create(org.geometerplus.fbreader.network.INetworkLink,java.lang.String) -> a
    java.lang.CharSequence getAnnotation(org.geometerplus.fbreader.network.opds.OPDSEntry) -> b
    java.util.List getAuthors(org.geometerplus.fbreader.network.opds.OPDSEntry) -> c
    java.util.List getTags(org.geometerplus.fbreader.network.opds.OPDSEntry) -> d
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection getUrls(org.geometerplus.fbreader.network.opds.OPDSNetworkLink,org.geometerplus.fbreader.network.opds.OPDSEntry,java.lang.String) -> b
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type typeByRelation(java.lang.String) -> a
    void collectReferences(org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection,org.geometerplus.fbreader.network.opds.OPDSLink,java.lang.String,org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type,org.geometerplus.zlibrary.core.money.Money,boolean) -> a
    int formatByMimeType(org.geometerplus.zlibrary.core.util.MimeType) -> a
    boolean isFullyLoaded() -> b
    void loadFullInformation() -> c
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem createRelatedCatalogItem(org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo) -> b
    org.geometerplus.fbreader.network.NetworkCatalogItem createRelatedCatalogItem(org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection access$1(org.geometerplus.fbreader.network.opds.OPDSNetworkLink,org.geometerplus.fbreader.network.opds.OPDSEntry,java.lang.String) -> a
    void access$2(org.geometerplus.fbreader.network.opds.OPDSBookItem,org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    java.lang.CharSequence access$3(org.geometerplus.fbreader.network.opds.OPDSEntry) -> a
    void access$4(org.geometerplus.fbreader.network.opds.OPDSBookItem,java.lang.CharSequence) -> a
    void access$5(org.geometerplus.fbreader.network.opds.OPDSBookItem,boolean) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$1 -> org.geometerplus.fbreader.network.c.e:
    org.geometerplus.fbreader.network.opds.OPDSBookItem$CreateBookHandler val$handler -> a
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$2 -> org.geometerplus.fbreader.network.c.f:
    org.geometerplus.fbreader.network.opds.OPDSBookItem this$0 -> a
    java.lang.String val$url -> f
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$CreateBookHandler -> org.geometerplus.fbreader.network.c.g:
    org.geometerplus.fbreader.network.INetworkLink myLink -> a
    org.geometerplus.fbreader.network.opds.OPDSBookItem myBook -> c
    org.geometerplus.fbreader.network.opds.OPDSBookItem getBook() -> c
    boolean processFeedEntry(org.geometerplus.fbreader.network.opds.OPDSEntry) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$LoadInfoHandler -> org.geometerplus.fbreader.network.c.h:
    org.geometerplus.fbreader.network.opds.OPDSBookItem this$0 -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.opds.OPDSEntry) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$SingleEntryFeedHandler -> org.geometerplus.fbreader.network.c.i:
    java.lang.String myUrl -> b
    void processFeedStart() -> a
    boolean processFeedMetadata(org.geometerplus.fbreader.network.opds.OPDSFeedMetadata,boolean) -> a
    void processFeedEnd() -> b
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
org.geometerplus.fbreader.network.opds.OPDSCatalogInfoHandler -> org.geometerplus.fbreader.network.c.j:
    boolean FeedStarted -> a
    java.lang.String Icon -> b
    java.lang.CharSequence Title -> c
    java.lang.CharSequence Summary -> d
    org.geometerplus.fbreader.network.opds.OpenSearchDescription DirectOpenSearchDescription -> e
    java.util.List myOpensearchDescriptionURLs -> f
    java.lang.String myBaseURL -> g
    org.geometerplus.fbreader.network.opds.OPDSNetworkLink myLink -> h
    boolean processFeedMetadata(org.geometerplus.fbreader.network.opds.OPDSFeedMetadata,boolean) -> a
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean processFeedEntry(org.geometerplus.fbreader.network.opds.OPDSEntry) -> a
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSCatalogItem -> org.geometerplus.fbreader.network.c.k:
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State myLoadingState -> a
    java.util.Map myExtraData -> b
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection createSimpleCollection(java.lang.String) -> a
    void doLoadChildren(org.geometerplus.zlibrary.core.network.ZLNetworkRequest) -> a
    java.util.Map extraData() -> h
    void loadChildren(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
    boolean supportsResumeLoading() -> i
    void resumeLoading(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> b
org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State -> org.geometerplus.fbreader.network.c.l:
    java.lang.String LastLoadedId -> d
    java.util.HashSet LoadedIds -> e
org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink -> org.geometerplus.fbreader.network.c.m:
    boolean myHasChanges -> f
    java.lang.String removeWWWPrefix(java.lang.String) -> c
    boolean hasChanges() -> h
    void setSummary(java.lang.String) -> b
    void setTitle(java.lang.String) -> a
    void setUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type,java.lang.String) -> a
    boolean isObsolete(long) -> a
    void reloadInfo(boolean,boolean) -> a
    void access$0(org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink,java.lang.String) -> a
    void access$1(org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink,java.lang.String) -> b
org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink$1 -> org.geometerplus.fbreader.network.c.n:
    org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink this$0 -> a
    java.util.LinkedList val$opensearchDescriptionURLs -> f
    java.util.List val$descriptions -> g
    boolean val$urlsOnly -> h
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink$2 -> org.geometerplus.fbreader.network.c.o:
    org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink this$0 -> a
    java.util.List val$descriptions -> f
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSEntry -> org.geometerplus.fbreader.network.c.p:
    java.lang.String DCLanguage -> k
    java.lang.String DCPublisher -> l
    org.geometerplus.fbreader.network.opds.DCDate DCIssued -> m
    java.lang.String SeriesTitle -> n
    float SeriesIndex -> o
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.opds.OPDSFeedHandler -> org.geometerplus.fbreader.network.c.q:
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem myCatalog -> a
    java.lang.String myBaseURL -> b
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State myData -> c
    int myIndex -> d
    java.lang.String myNextURL -> e
    java.lang.String mySkipUntilId -> f
    boolean myFoundNewIds -> g
    int myItemsToLoad -> h
    void processFeedStart() -> a
    boolean processFeedMetadata(org.geometerplus.fbreader.network.opds.OPDSFeedMetadata,boolean) -> a
    void processFeedEnd() -> b
    boolean tryInterrupt() -> c
    java.lang.String calculateEntryId(org.geometerplus.fbreader.network.opds.OPDSEntry) -> b
    boolean processFeedEntry(org.geometerplus.fbreader.network.opds.OPDSEntry) -> a
    org.geometerplus.fbreader.network.NetworkItem readCatalogItem(org.geometerplus.fbreader.network.opds.OPDSEntry) -> c
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSFeedMetadata -> org.geometerplus.fbreader.network.c.r:
    int OpensearchTotalResults -> i
    int OpensearchItemsPerPage -> j
    int OpensearchStartIndex -> k
    java.lang.String ViewType -> l
org.geometerplus.fbreader.network.opds.OPDSLink -> org.geometerplus.fbreader.network.c.s:
    java.util.LinkedList Prices -> a
    java.util.LinkedList Formats -> b
    org.geometerplus.zlibrary.core.money.Money getPrice(java.lang.String) -> b
    org.geometerplus.zlibrary.core.money.Money selectBestPrice() -> e
org.geometerplus.fbreader.network.opds.OPDSLinkReader -> org.geometerplus.fbreader.network.c.t:
    java.lang.String FILE_NAME -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$opds$OPDSLinkReader$CacheMode -> b
    java.util.List loadOPDSLinks(org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode) -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$opds$OPDSLinkReader$CacheMode() -> a
org.geometerplus.fbreader.network.opds.OPDSLinkReader$1 -> org.geometerplus.fbreader.network.c.u:
    org.geometerplus.fbreader.network.opds.OPDSLinkXMLReader val$xmlReader -> a
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode -> org.geometerplus.fbreader.network.c.v:
    org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode LOAD -> a
    org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode UPDATE -> b
    org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode CLEAR -> c
    org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode[] ENUM$VALUES -> d
    org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode[] values() -> values
    org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.network.opds.OPDSLinkXMLReader -> org.geometerplus.fbreader.network.c.w:
    java.util.List links() -> j
    org.geometerplus.fbreader.network.opds.OPDSLinkXMLReader$FeedHandler getFeedHandler() -> n
    boolean startElementHandler(java.lang.String,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
org.geometerplus.fbreader.network.opds.OPDSLinkXMLReader$FeedHandler -> org.geometerplus.fbreader.network.c.x:
    java.util.List myLinks -> a
    java.lang.String myAuthenticationType -> b
    java.util.LinkedList myUrlRewritingRules -> c
    java.util.HashMap myRelationAliases -> d
    java.util.LinkedHashMap myExtraData -> e
    java.util.List links() -> c
    void setAuthenticationType(java.lang.String) -> a
    void addUrlRewritingRule(org.geometerplus.fbreader.network.opds.URLRewritingRule) -> a
    void addRelationAlias(org.geometerplus.fbreader.network.opds.RelationAlias,java.lang.String) -> a
    void putExtraData(java.lang.String,java.lang.String) -> a
    void clear() -> d
    boolean processFeedEntry(org.geometerplus.fbreader.network.opds.OPDSEntry) -> a
    org.geometerplus.fbreader.network.INetworkLink link(java.lang.String,java.lang.String,java.lang.CharSequence,java.lang.CharSequence,java.lang.String,org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    boolean processFeedMetadata(org.geometerplus.fbreader.network.opds.OPDSFeedMetadata,boolean) -> a
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSNetworkLink -> org.geometerplus.fbreader.network.c.y:
    java.util.TreeMap myRelationAliases -> f
    java.util.LinkedList myUrlRewritingRules -> g
    java.util.Map myExtraData -> h
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager myAuthenticationManager -> i
    org.geometerplus.fbreader.network.BasketItem myBasketItem -> j
    void setRelationAliases(java.util.Map) -> a
    void setUrlRewritingRules(java.util.List) -> a
    void setExtraData(java.util.Map) -> b
    void setAuthenticationManager(org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest createNetworkData(org.geometerplus.fbreader.network.opds.OPDSCatalogItem,java.lang.String,org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State) -> a
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State createOperationData(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> b
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest simpleSearchRequest(java.lang.String,org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest resume(org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem libraryItem() -> i
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager authenticationManager() -> j
    java.lang.String rewriteUrl(java.lang.String,boolean) -> a
    java.lang.String relation(java.lang.String,org.geometerplus.zlibrary.core.util.MimeType) -> a
    org.geometerplus.fbreader.network.BasketItem getBasketItem() -> g
    java.lang.String toString() -> toString
    org.geometerplus.fbreader.network.NetworkOperationData createOperationData(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
org.geometerplus.fbreader.network.opds.OPDSNetworkLink$1 -> org.geometerplus.fbreader.network.c.z:
    org.geometerplus.fbreader.network.opds.OPDSNetworkLink this$0 -> a
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State val$result -> f
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem val$catalog -> g
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSPredefinedNetworkLink -> org.geometerplus.fbreader.network.c.aa:
    java.lang.String myPredefinedId -> f
    java.lang.String getPredefinedId() -> h
org.geometerplus.fbreader.network.opds.OPDSXMLReader -> org.geometerplus.fbreader.network.c.ab:
    org.geometerplus.fbreader.network.opds.DCDate myDCIssued -> d
    java.lang.String myPriceCurrency -> e
    org.geometerplus.fbreader.network.opds.OPDSFeedMetadata getOPDSFeed() -> k
    org.geometerplus.fbreader.network.opds.OPDSEntry getOPDSEntry() -> l
    org.geometerplus.fbreader.network.opds.OPDSLink getOPDSLink() -> m
    boolean startElementHandler(java.lang.String,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
    boolean endElementHandler(java.lang.String,java.lang.String,java.lang.String) -> a
org.geometerplus.fbreader.network.opds.OpenSearchDescription -> org.geometerplus.fbreader.network.c.ac:
    java.lang.String Template -> a
    int IndexOffset -> b
    int PageOffset -> c
    int ItemsPerPage -> d
    org.geometerplus.fbreader.network.opds.OpenSearchDescription createDefault(java.lang.String) -> a
    boolean isValid() -> a
    java.lang.String makeQuery(java.lang.String) -> b
org.geometerplus.fbreader.network.opds.OpenSearchXMLReader -> org.geometerplus.fbreader.network.c.ad:
    java.util.List myDescriptions -> a
    java.lang.String myBaseURL -> b
    java.lang.String myOpenSearchNamespaceId -> c
    int myState -> d
    boolean processNamespaces() -> b
    java.lang.String intern(java.lang.String) -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    int parseInt(java.lang.String) -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.network.opds.RelationAlias -> org.geometerplus.fbreader.network.c.ae:
    java.lang.String Alias -> a
    java.lang.String Type -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(org.geometerplus.fbreader.network.opds.RelationAlias) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.opds.URLRewritingRule -> org.geometerplus.fbreader.network.c.af:
    int myType -> a
    int myApply -> b
    java.util.HashMap myParameters -> c
    int whereToApply() -> a
    java.lang.String apply(java.lang.String) -> a
org.geometerplus.fbreader.network.tree.AddCustomCatalogItemTree -> org.geometerplus.fbreader.network.d.a:
    java.lang.String getName() -> a
    java.lang.String getSummary() -> e
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.tree.BasketCatalogTree -> org.geometerplus.fbreader.network.d.b:
    long myGeneration -> c
    boolean canUseParentCover() -> j
    java.util.List subTrees() -> e_
    void addItem(org.geometerplus.fbreader.network.NetworkItem) -> b
org.geometerplus.fbreader.network.tree.CatalogExpander -> org.geometerplus.fbreader.network.d.c:
    boolean myCheckAuthentication -> a
    boolean myResumeNotLoad -> b
    void doBefore() -> a
    void doLoading() -> b
    void onFinish(org.geometerplus.zlibrary.core.network.ZLNetworkException,boolean) -> a
org.geometerplus.fbreader.network.tree.NetworkAuthorTree -> org.geometerplus.fbreader.network.d.d:
    org.geometerplus.fbreader.network.NetworkBookItem$AuthorData Author -> a
    java.lang.String getName() -> a
    java.lang.String getSortKey() -> c
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.tree.NetworkBookTree -> org.geometerplus.fbreader.network.d.e:
    org.geometerplus.fbreader.network.NetworkBookItem Book -> a
    boolean myShowAuthors -> b
    boolean canUseParentCover() -> j
    java.lang.String getName() -> a
    java.lang.String getSummary() -> e
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.tree.NetworkCatalogRootTree -> org.geometerplus.fbreader.network.d.f:
    java.lang.String getTreeTitle() -> i
    void addSpecialTrees() -> m
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
org.geometerplus.fbreader.network.tree.NetworkCatalogTree -> org.geometerplus.fbreader.network.d.g:
    org.geometerplus.fbreader.network.INetworkLink myLink -> c
    org.geometerplus.fbreader.network.NetworkCatalogItem Item -> a
    java.util.ArrayList myChildrenItems -> b
    long myLoadedTime -> f
    org.geometerplus.fbreader.network.SearchItem mySearchItem -> g
    java.util.Set myUnconfirmedTrees -> h
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> i
    org.geometerplus.fbreader.network.INetworkLink getLink() -> d
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getVisibility() -> n
    boolean canBeOpened() -> o
    void addSpecialTrees() -> m
    void addItem(org.geometerplus.fbreader.network.NetworkItem) -> b
    java.lang.String getName() -> a
    java.lang.String getSummary() -> e
    java.lang.String getTreeTitle() -> i
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    boolean isContentValid() -> p
    void updateLoadedTime() -> q
    void updateVisibility() -> r
    void removeTrees(java.util.Set) -> a
    java.lang.String getStringId() -> b
    void startItemsLoader(boolean,boolean) -> a
    void clearCatalog() -> s
    void confirmAllItems() -> t
    void removeUnconfirmedItems() -> u
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> v
org.geometerplus.fbreader.network.tree.NetworkItemsLoader -> org.geometerplus.fbreader.network.d.h:
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree myTree -> a
    java.lang.Runnable myPostRunnable -> b
    boolean myFinishedFlag -> c
    java.lang.Object myInterruptLock -> d
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader$InterruptionState myInterruptionState -> e
    void start() -> c
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree getTree() -> d
    void run() -> run
    boolean canResumeLoading() -> e
    boolean isLoadingInterrupted() -> f
    void interrupt() -> g
    boolean confirmInterruption() -> h
    void onNewItem(org.geometerplus.fbreader.network.NetworkItem) -> a
    void setPostRunnable(java.lang.Runnable) -> a
    void onFinish(org.geometerplus.zlibrary.core.network.ZLNetworkException,boolean) -> a
    void doBefore() -> a
    void doLoading() -> b
org.geometerplus.fbreader.network.tree.NetworkItemsLoader$InterruptionState -> org.geometerplus.fbreader.network.d.i:
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader$InterruptionState NONE -> a
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader$InterruptionState REQUESTED -> b
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader$InterruptionState CONFIRMED -> c
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader$InterruptionState[] ENUM$VALUES -> d
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader$InterruptionState[] values() -> values
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader$InterruptionState valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.network.tree.NetworkSeriesTree -> org.geometerplus.fbreader.network.d.j:
    java.lang.String SeriesTitle -> a
    boolean myShowAuthors -> b
    java.lang.String getName() -> a
    java.lang.String getSummary() -> e
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    void removeTrees(java.util.Set) -> a
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.tree.NetworkTreeFactory -> org.geometerplus.fbreader.network.d.k:
    org.geometerplus.fbreader.network.NetworkTree createNetworkTree(org.geometerplus.fbreader.network.tree.NetworkCatalogTree,org.geometerplus.fbreader.network.NetworkItem) -> a
    org.geometerplus.fbreader.network.NetworkTree createNetworkTree(org.geometerplus.fbreader.network.tree.NetworkCatalogTree,org.geometerplus.fbreader.network.NetworkItem,int) -> a
org.geometerplus.fbreader.network.tree.RootTree -> org.geometerplus.fbreader.network.d.l:
    boolean IsFake -> a
    java.lang.String myId -> b
    java.lang.String getName() -> a
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.tree.SearchCatalogTree -> org.geometerplus.fbreader.network.d.m:
    void setPattern(java.lang.String) -> a
    boolean canUseParentCover() -> j
    boolean isContentValid() -> p
    java.lang.String getName() -> a
    java.lang.String getTreeTitle() -> i
    java.lang.String getSummary() -> e
    void startItemsLoader(java.lang.String) -> b
org.geometerplus.fbreader.network.tree.Searcher -> org.geometerplus.fbreader.network.d.n:
    java.lang.String myPattern -> a
    boolean myItemFound -> b
    void doBefore() -> a
    void interrupt() -> g
    void doLoading() -> b
    void onNewItem(org.geometerplus.fbreader.network.NetworkItem) -> a
    void onFinish(org.geometerplus.zlibrary.core.network.ZLNetworkException,boolean) -> a
org.geometerplus.fbreader.network.tree.TopUpTree -> org.geometerplus.fbreader.network.d.o:
    org.geometerplus.fbreader.network.TopUpItem Item -> a
    java.lang.String getName() -> a
    java.lang.String getSummary() -> e
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.urlInfo.BookBuyUrlInfo -> org.geometerplus.fbreader.network.e.a:
    org.geometerplus.zlibrary.core.money.Money Price -> a
org.geometerplus.fbreader.network.urlInfo.BookUrlInfo -> org.geometerplus.fbreader.network.e.b:
    int BookFormat -> b
    java.lang.String makeBookFileName(java.lang.String,int,org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.lang.String cleanUrl() -> a
    java.lang.String makeBookFileName(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.lang.String localCopyFileName(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.urlInfo.DecoratedBookUrlInfo -> org.geometerplus.fbreader.network.e.c:
    java.lang.String myCleanUrl -> a
    java.lang.String cleanUrl() -> a
org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo -> org.geometerplus.fbreader.network.e.d:
    java.lang.String Title -> a
    org.geometerplus.zlibrary.core.util.MimeType Mime -> b
org.geometerplus.fbreader.network.urlInfo.UrlInfo -> org.geometerplus.fbreader.network.e.e:
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type InfoType -> c
    java.lang.String Url -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type -> org.geometerplus.fbreader.network.e.f:
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Catalog -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type HtmlPage -> b
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SingleEntry -> c
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Related -> d
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Image -> e
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Thumbnail -> f
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Search -> g
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type ListBooks -> h
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SignIn -> i
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SignOut -> j
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SignUp -> k
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type TopUp -> l
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type RecoverPassword -> m
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Book -> n
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookConditional -> o
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookDemo -> p
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookFullOrDemo -> q
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookBuy -> r
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookBuyInBrowser -> s
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type TOC -> t
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Comments -> u
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type[] ENUM$VALUES -> v
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type[] values() -> values
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection -> org.geometerplus.fbreader.network.e.g:
    java.util.LinkedList myInfos -> a
    void upgrade(org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    void addInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfo getInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.util.List getAllInfos() -> a
    java.util.List getAllInfos(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> c
    void clear() -> b
    void removeAllInfos(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> d
    boolean isEmpty() -> c
org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate -> org.geometerplus.fbreader.network.e.h:
    org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate NULL -> a
    java.util.Date Updated -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.tips.Tip -> org.geometerplus.fbreader.e.a:
    java.lang.CharSequence Title -> a
    java.lang.CharSequence Content -> b
org.geometerplus.fbreader.tips.TipsFeedHandler -> org.geometerplus.fbreader.e.b:
    java.util.List Tips -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.tips.TipsManager -> org.geometerplus.fbreader.e.c:
    org.geometerplus.fbreader.tips.TipsManager ourInstance -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption TipsAreInitializedOption -> a
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowTipsOption -> b
    org.geometerplus.zlibrary.core.options.ZLIntegerOption myLastShownOption -> d
    org.geometerplus.zlibrary.core.options.ZLIntegerOption myIndexOption -> e
    boolean myDownloadInProgress -> f
    java.util.List myTips -> g
    int DELAY -> h
    org.geometerplus.fbreader.tips.TipsManager Instance() -> a
    java.lang.String getUrl() -> f
    java.lang.String getLocalFilePath() -> g
    java.util.List getTips() -> h
    boolean hasNextTip() -> b
    org.geometerplus.fbreader.tips.Tip getNextTip() -> c
    int currentTime() -> i
    org.geometerplus.fbreader.tips.TipsManager$Action requiredAction() -> d
    void startDownloading() -> e
    void access$0(org.geometerplus.fbreader.tips.TipsManager,boolean) -> a
    java.lang.String access$1(org.geometerplus.fbreader.tips.TipsManager) -> a
    java.lang.String access$2(org.geometerplus.fbreader.tips.TipsManager) -> b
org.geometerplus.fbreader.tips.TipsManager$1 -> org.geometerplus.fbreader.e.d:
    org.geometerplus.fbreader.tips.TipsManager this$0 -> a
    void run() -> run
org.geometerplus.fbreader.tips.TipsManager$Action -> org.geometerplus.fbreader.e.e:
    org.geometerplus.fbreader.tips.TipsManager$Action Initialize -> a
    org.geometerplus.fbreader.tips.TipsManager$Action Show -> b
    org.geometerplus.fbreader.tips.TipsManager$Action Download -> c
    org.geometerplus.fbreader.tips.TipsManager$Action None -> d
    org.geometerplus.fbreader.tips.TipsManager$Action[] ENUM$VALUES -> e
    org.geometerplus.fbreader.tips.TipsManager$Action[] values() -> values
    org.geometerplus.fbreader.tips.TipsManager$Action valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.tree.FBTree -> org.geometerplus.fbreader.f.a:
    org.geometerplus.zlibrary.core.image.ZLImage myCover -> a
    boolean myCoverRequested -> b
    org.geometerplus.fbreader.tree.FBTree$Key myKey -> c
    org.geometerplus.fbreader.tree.FBTree$Key getUniqueKey() -> w
    java.lang.String getStringId() -> b
    org.geometerplus.fbreader.tree.FBTree getSubTree(java.lang.String) -> c
    int indexOf(org.geometerplus.fbreader.tree.FBTree) -> b
    java.lang.String getName() -> a
    java.lang.String getTreeTitle() -> i
    java.lang.String getSortKey() -> c
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
    java.lang.String getSummary() -> e
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    boolean canUseParentCover() -> j
    org.geometerplus.zlibrary.core.image.ZLImage getCover() -> x
    org.geometerplus.fbreader.tree.FBTree$Status getOpeningStatus() -> g
    java.lang.String getOpeningStatusMessage() -> h
    void waitForOpening() -> l
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.tree.FBTree$Key -> org.geometerplus.fbreader.f.b:
    org.geometerplus.fbreader.tree.FBTree$Key Parent -> a
    java.lang.String Id -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.geometerplus.fbreader.tree.FBTree$Status -> org.geometerplus.fbreader.f.c:
    org.geometerplus.fbreader.tree.FBTree$Status READY_TO_OPEN -> a
    org.geometerplus.fbreader.tree.FBTree$Status WAIT_FOR_OPEN -> b
    org.geometerplus.fbreader.tree.FBTree$Status ALWAYS_RELOAD_BEFORE_OPENING -> c
    org.geometerplus.fbreader.tree.FBTree$Status CANNOT_OPEN -> d
    org.geometerplus.fbreader.tree.FBTree$Status[] ENUM$VALUES -> e
    org.geometerplus.fbreader.tree.FBTree$Status[] values() -> values
    org.geometerplus.fbreader.tree.FBTree$Status valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.core.application.ZLApplication -> org.geometerplus.zlibrary.core.a.a:
    org.geometerplus.zlibrary.core.application.ZLApplication ourInstance -> a
    org.geometerplus.zlibrary.core.application.ZLApplicationWindow myWindow -> b
    org.geometerplus.zlibrary.core.view.ZLView myView -> c
    java.util.HashMap myIdToActionMap -> d
    java.util.HashMap myPopups -> e
    org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel myActivePopup -> f
    java.util.Timer myTimer -> g
    java.util.HashMap myTimerTaskPeriods -> h
    java.util.HashMap myTimerTasks -> i
    org.geometerplus.zlibrary.core.application.ZLApplication Instance() -> p
    void setView(org.geometerplus.zlibrary.core.view.ZLView) -> a
    org.geometerplus.zlibrary.core.view.ZLView getCurrentView() -> q
    void setWindow(org.geometerplus.zlibrary.core.application.ZLApplicationWindow) -> a
    void initWindow() -> a
    void setTitle(java.lang.String) -> c
    void wait(java.lang.String,java.lang.Runnable) -> a
    org.geometerplus.zlibrary.core.view.ZLViewWidget getViewWidget() -> r
    void onRepaintFinished() -> s
    void onViewChanged() -> t
    void hideActivePopup() -> u
    void showPopup(java.lang.String) -> d
    void addAction(java.lang.String,org.geometerplus.zlibrary.core.application.ZLApplication$ZLAction) -> a
    void removeAction(java.lang.String) -> e
    boolean isActionVisible(java.lang.String) -> f
    boolean isActionEnabled(java.lang.String) -> g
    org.geometerplus.zlibrary.core.util.ZLBoolean3 isActionChecked(java.lang.String) -> h
    void doAction(java.lang.String,java.lang.Object[]) -> a
    org.geometerplus.zlibrary.core.application.ZLKeyBindings keyBindings() -> d
    boolean hasActionForKey(int,boolean) -> b
    boolean doActionByKey(int,boolean) -> c
    boolean closeWindow() -> v
    void onWindowClosing() -> h
    void openFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.Collection popupPanels() -> w
    org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel getActivePopup() -> x
    org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel getPopupById(java.lang.String) -> i
    int getBatteryLevel() -> y
    void addTimerTaskInternal(java.lang.Runnable,long) -> b
    void startTimer() -> z
    void stopTimer() -> A
    void addTimerTask(java.lang.Runnable,long) -> a
    void removeTimerTask(java.lang.Runnable) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.core.application.ZLApplication) -> a
org.geometerplus.zlibrary.core.application.ZLApplication$MyTimerTask -> org.geometerplus.zlibrary.core.a.b:
    java.lang.Runnable myRunnable -> a
    void run() -> run
org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel -> org.geometerplus.zlibrary.core.a.c:
    org.geometerplus.zlibrary.core.application.ZLApplication Application -> c
    java.lang.String getId() -> c
    void update() -> a
    void hide_() -> f
    void show_() -> d
org.geometerplus.zlibrary.core.application.ZLApplication$ZLAction -> org.geometerplus.zlibrary.core.a.d:
    boolean isVisible() -> b
    boolean isEnabled() -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 isChecked() -> c
    boolean checkAndRun(java.lang.Object[]) -> b
    void run(java.lang.Object[]) -> a
org.geometerplus.zlibrary.core.application.ZLApplicationWindow -> org.geometerplus.zlibrary.core.a.e:
    org.geometerplus.zlibrary.core.application.ZLApplication myApplication -> a
    org.geometerplus.zlibrary.core.application.ZLApplication getApplication() -> a
    void setTitle(java.lang.String) -> a
    void wait(java.lang.String,java.lang.Runnable) -> a
    void refreshMenu() -> b
    org.geometerplus.zlibrary.core.view.ZLViewWidget getViewWidget() -> c
    void close() -> d
    int getBatteryLevel() -> e
org.geometerplus.zlibrary.core.application.ZLKeyBindings -> org.geometerplus.zlibrary.core.a.f:
    java.lang.String myName -> a
    org.geometerplus.zlibrary.core.options.ZLStringListOption myKeysOption -> b
    java.util.TreeMap myActionMap -> c
    java.util.TreeMap myLongPressActionMap -> d
    org.geometerplus.zlibrary.core.options.ZLStringOption createOption(int,boolean,java.lang.String) -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption getOption(int,boolean) -> a
    void bindKey(int,boolean,java.lang.String) -> a
    java.lang.String getBinding(int,boolean) -> b
    java.util.TreeMap access$0(org.geometerplus.zlibrary.core.application.ZLKeyBindings) -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption access$1(org.geometerplus.zlibrary.core.application.ZLKeyBindings,int,boolean,java.lang.String) -> a
org.geometerplus.zlibrary.core.application.ZLKeyBindings$Reader -> org.geometerplus.zlibrary.core.a.g:
    java.util.Set myKeySet -> b
    org.geometerplus.zlibrary.core.application.ZLKeyBindings this$0 -> a
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.zlibrary.core.config.ZLConfig -> org.geometerplus.zlibrary.core.b.a:
    org.geometerplus.zlibrary.core.config.ZLConfig ourInstance -> a
    org.geometerplus.zlibrary.core.config.ZLConfig Instance() -> a
    java.util.List listGroups() -> b
    java.util.List listNames(java.lang.String) -> a
    java.lang.String getValue(java.lang.String,java.lang.String,java.lang.String) -> a
    void setValue(java.lang.String,java.lang.String,java.lang.String) -> b
    void unsetValue(java.lang.String,java.lang.String) -> a
    void removeGroup(java.lang.String) -> b
org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection -> org.geometerplus.zlibrary.core.c.a:
    org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection ourInstance -> a
    java.util.HashMap myEncodingByAlias -> b
    org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection Instance() -> a
    java.lang.String getEncodingName(int) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection) -> a
org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection$ZLEncodingCollectionReader -> org.geometerplus.zlibrary.core.c.b:
    java.lang.String myCurrentEncodingName -> b
    org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection this$0 -> a
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.zlibrary.core.filesystem.ZLArchiveEntryFile -> org.geometerplus.zlibrary.core.d.a:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myParent -> a
    java.lang.String myName -> b
    java.lang.String normalizeEntryName(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLArchiveEntryFile createArchiveEntryFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String) -> a
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean exists() -> a
    boolean isDirectory() -> b
    java.lang.String getPath() -> c
    java.lang.String getLongName() -> d
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> f
org.geometerplus.zlibrary.core.filesystem.ZLFile -> org.geometerplus.zlibrary.core.d.b:
    java.util.HashMap ourCachedFiles -> a
    java.lang.String myExtension -> b
    java.lang.String myShortName -> d
    int myArchiveType -> c
    boolean myIsCached -> e
    void init() -> g
    org.geometerplus.zlibrary.core.filesystem.ZLFile createFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String) -> b
    org.geometerplus.zlibrary.core.filesystem.ZLFile createFileByPath(java.lang.String) -> b
    long size() -> h
    boolean exists() -> a
    boolean isDirectory() -> b
    java.lang.String getPath() -> c
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> f
    java.io.InputStream getInputStream() -> i
    boolean isReadable() -> j
    boolean isArchive() -> k
    java.lang.String getLongName() -> d
    java.lang.String getShortName() -> l
    java.lang.String getExtension() -> m
    java.util.List directoryEntries() -> n
    java.util.List children() -> o
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isCached() -> p
    void setCached(boolean) -> a
org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile -> org.geometerplus.zlibrary.core.d.c:
    java.io.File myFile -> a
    boolean exists() -> a
    long size() -> h
    boolean isDirectory() -> b
    boolean isReadable() -> j
    boolean delete() -> q
    java.lang.String getPath() -> c
    java.lang.String getLongName() -> d
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> f
    java.io.InputStream getInputStream() -> i
    java.util.List directoryEntries() -> n
org.geometerplus.zlibrary.core.filesystem.ZLResourceFile -> org.geometerplus.zlibrary.core.d.d:
    java.lang.String myPath -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(org.geometerplus.zlibrary.core.filesystem.ZLResourceFile,java.lang.String) -> a
    java.lang.String getPath() -> c
    java.lang.String getLongName() -> d
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> f
org.geometerplus.zlibrary.core.filesystem.ZLZipEntryFile -> org.geometerplus.zlibrary.core.d.e:
    java.util.HashMap ourZipFileMap -> d
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    org.amse.ys.zip.ZipFile getZipFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    void removeFromCache(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    long size() -> h
    java.io.InputStream getInputStream() -> i
org.geometerplus.zlibrary.core.filesystem.ZLZipEntryFile$1 -> org.geometerplus.zlibrary.core.d.f:
    org.geometerplus.zlibrary.core.filesystem.ZLFile val$file -> a
    java.io.InputStream getInputStream() -> a
org.geometerplus.zlibrary.core.filesystem.tar.ZLTarEntryFile -> org.geometerplus.zlibrary.core.d.a.a:
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    long size() -> h
    java.io.InputStream getInputStream() -> i
org.geometerplus.zlibrary.core.filesystem.tar.ZLTarHeader -> org.geometerplus.zlibrary.core.d.a.b:
    java.lang.String Name -> a
    int Size -> b
    boolean IsRegularFile -> c
    java.lang.String getStringFromByteArray(byte[]) -> a
    boolean read(java.io.InputStream) -> a
    void erase() -> a
org.geometerplus.zlibrary.core.filesystem.tar.ZLTarInputStream -> org.geometerplus.zlibrary.core.d.a.c:
    java.io.InputStream myBase -> a
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
org.geometerplus.zlibrary.core.html.ZLByteBuffer -> org.geometerplus.zlibrary.core.e.a:
    byte[] myData -> a
    int myLength -> b
    java.lang.Object myConverterLock -> c
    char[] myConverterBuffer -> d
    java.lang.String myStringValue -> e
    boolean isEmpty() -> a
    void append(byte[],int,int) -> a
    void clear() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean equalsToLCString(java.lang.String) -> a
    java.lang.String toString(java.nio.charset.CharsetDecoder) -> a
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap -> org.geometerplus.zlibrary.core.e.b:
    org.geometerplus.zlibrary.core.html.ZLByteBuffer[] myKeys -> a
    org.geometerplus.zlibrary.core.html.ZLByteBuffer[] myValues -> b
    int mySize -> c
    void put(org.geometerplus.zlibrary.core.html.ZLByteBuffer,org.geometerplus.zlibrary.core.html.ZLByteBuffer) -> a
    org.geometerplus.zlibrary.core.html.ZLByteBuffer getValue(java.lang.String) -> a
    java.lang.String getStringValue(java.lang.String,java.nio.charset.CharsetDecoder) -> a
    void clear() -> a
org.geometerplus.zlibrary.core.html.ZLHtmlParser -> org.geometerplus.zlibrary.core.e.c:
    org.geometerplus.zlibrary.core.html.ZLHtmlReader myReader -> a
    java.io.InputStream myStream -> b
    org.geometerplus.zlibrary.core.html.ZLByteBuffer unique(java.util.HashMap,org.geometerplus.zlibrary.core.html.ZLByteBuffer) -> a
    void doIt() -> a
    void processFullTag(org.geometerplus.zlibrary.core.html.ZLHtmlReader,org.geometerplus.zlibrary.core.html.ZLByteBuffer,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void processStartTag(org.geometerplus.zlibrary.core.html.ZLHtmlReader,org.geometerplus.zlibrary.core.html.ZLByteBuffer,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> b
    void processEndTag(org.geometerplus.zlibrary.core.html.ZLHtmlReader,org.geometerplus.zlibrary.core.html.ZLByteBuffer) -> a
org.geometerplus.zlibrary.core.html.ZLHtmlProcessor -> org.geometerplus.zlibrary.core.e.d:
    boolean read(org.geometerplus.zlibrary.core.html.ZLHtmlReader,java.io.InputStream) -> a
org.geometerplus.zlibrary.core.html.ZLHtmlReader -> org.geometerplus.zlibrary.core.e.e:
    void startDocumentHandler() -> q
    void endDocumentHandler() -> r
    void startElementHandler(java.lang.String,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void endElementHandler(java.lang.String) -> e
    void byteDataHandler(byte[],int,int) -> b
    void entityDataHandler(java.lang.String) -> d
org.geometerplus.zlibrary.core.image.ZLBase64EncodedImage -> org.geometerplus.zlibrary.core.f.a:
    boolean myIsDecoded -> a
    byte decodeByte(byte) -> a
    java.lang.String getURI() -> c_
    java.lang.String encodedFileName() -> b
    java.lang.String decodedFileName() -> c
    boolean isCacheValid(java.io.File) -> a
    void decode() -> a
    java.io.InputStream inputStream() -> g
org.geometerplus.zlibrary.core.image.ZLFileImage -> org.geometerplus.zlibrary.core.f.b:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    int myOffset -> b
    int myLength -> c
    java.lang.String getURI() -> c_
    java.io.InputStream inputStream() -> g
org.geometerplus.zlibrary.core.image.ZLImage -> org.geometerplus.zlibrary.core.f.c:
    java.lang.String getURI() -> c_
org.geometerplus.zlibrary.core.image.ZLImageData -> org.geometerplus.zlibrary.core.f.d:
org.geometerplus.zlibrary.core.image.ZLImageManager -> org.geometerplus.zlibrary.core.f.e:
    org.geometerplus.zlibrary.core.image.ZLImageManager ourInstance -> b
    int[][] PalmImage8bitColormap -> a
    org.geometerplus.zlibrary.core.image.ZLImageManager Instance() -> a
    org.geometerplus.zlibrary.core.image.ZLImageData getImageData(org.geometerplus.zlibrary.core.image.ZLImage) -> a
    void startImageLoading(org.geometerplus.zlibrary.core.image.ZLLoadableImage,java.lang.Runnable) -> a
org.geometerplus.zlibrary.core.image.ZLImageMap -> org.geometerplus.zlibrary.core.f.f:
    org.geometerplus.zlibrary.core.image.ZLImage getImage(java.lang.String) -> a
org.geometerplus.zlibrary.core.image.ZLImageProxy -> org.geometerplus.zlibrary.core.f.g:
    org.geometerplus.zlibrary.core.image.ZLSingleImage myImage -> a
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> a
    java.lang.String getURI() -> c_
    java.io.InputStream inputStream() -> g
    void synchronize() -> e
    void synchronizeFast() -> f
org.geometerplus.zlibrary.core.image.ZLLoadableImage -> org.geometerplus.zlibrary.core.f.h:
    boolean myIsSynchronized -> a
    boolean isSynchronized() -> h
    void setSynchronized() -> i
    void startSynchronization(java.lang.Runnable) -> a
    int sourceType() -> b
    void synchronize() -> e
    void synchronizeFast() -> f
    java.lang.String getId() -> c
org.geometerplus.zlibrary.core.image.ZLSingleImage -> org.geometerplus.zlibrary.core.f.i:
    org.geometerplus.zlibrary.core.util.MimeType myMimeType -> a
    java.io.InputStream inputStream() -> g
    org.geometerplus.zlibrary.core.util.MimeType mimeType() -> j
org.geometerplus.zlibrary.core.language.ZLLanguageUtil -> org.geometerplus.zlibrary.core.g.a:
    java.util.ArrayList ourLanguageCodes -> a
    java.util.List languageCodes() -> a
    java.lang.String languageName(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile patternsFile() -> b
    java.lang.String languageByIntCode(int,int) -> a
org.geometerplus.zlibrary.core.language.ZLLanguageUtil$CodeComparator -> org.geometerplus.zlibrary.core.g.b:
    int compare(java.lang.String,java.lang.String) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.zlibrary.core.library.ZLibrary -> org.geometerplus.zlibrary.core.h.a:
    org.geometerplus.zlibrary.core.library.ZLibrary ourImplementation -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption OrientationOption -> a
    org.geometerplus.zlibrary.core.library.ZLibrary Instance() -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(org.geometerplus.zlibrary.core.filesystem.ZLResourceFile,java.lang.String) -> a
    java.lang.String getVersionName() -> b
    java.lang.String getCurrentTimeString() -> c
    void setScreenBrightness(int) -> a
    int getScreenBrightness() -> d
    int getDisplayDPI() -> e
    java.util.Collection defaultLanguageCodes() -> f
    boolean supportsAllOrientations() -> g
    java.lang.String[] allOrientations() -> h
org.geometerplus.zlibrary.core.money.Money -> org.geometerplus.zlibrary.core.money.a:
    org.geometerplus.zlibrary.core.money.Money ZERO -> a
    java.math.BigDecimal Amount -> b
    java.lang.String Currency -> c
    org.geometerplus.zlibrary.core.money.Money add(org.geometerplus.zlibrary.core.money.Money) -> a
    org.geometerplus.zlibrary.core.money.Money subtract(org.geometerplus.zlibrary.core.money.Money) -> b
    int compareTo(org.geometerplus.zlibrary.core.money.Money) -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.core.money.MoneyException -> org.geometerplus.zlibrary.core.money.MoneyException:
org.geometerplus.zlibrary.core.network.CookieDatabase -> org.geometerplus.zlibrary.core.network.a:
    org.geometerplus.zlibrary.core.network.CookieDatabase ourInstance -> a
    org.geometerplus.zlibrary.core.network.CookieDatabase getInstance() -> a
    void removeObsolete(java.util.Date) -> a
    void removeAll() -> b
    void saveCookies(java.util.List) -> a
    java.util.List loadCookies() -> c
org.geometerplus.zlibrary.core.network.ZLNetworkException -> org.geometerplus.zlibrary.core.network.ZLNetworkException:
    java.lang.String myCode -> a
    org.geometerplus.zlibrary.core.resources.ZLResource getResource() -> b
    java.lang.String errorMessage(java.lang.String) -> a
    java.lang.String errorMessage(java.lang.String,java.lang.String) -> a
    java.lang.String getCode() -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager -> org.geometerplus.zlibrary.core.network.b:
    org.geometerplus.zlibrary.core.network.ZLNetworkManager ourManager -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator myCredentialsCreator -> b
    org.apache.http.client.CookieStore myCookieStore -> c
    org.geometerplus.zlibrary.core.network.ZLNetworkManager Instance() -> a
    void setCredentialsCreator(org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator getCredentialsCreator() -> b
    void perform(org.geometerplus.zlibrary.core.network.ZLNetworkRequest) -> a
    void perform(java.util.List) -> a
    void downloadToFile(java.lang.String,java.io.File) -> a
    void downloadToFile(java.lang.String,java.lang.String,java.io.File,int) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator access$0(org.geometerplus.zlibrary.core.network.ZLNetworkManager) -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager$1 -> org.geometerplus.zlibrary.core.network.c:
    java.util.HashMap myCookies -> b
    org.geometerplus.zlibrary.core.network.ZLNetworkManager this$0 -> a
    void addCookie(org.apache.http.cookie.Cookie) -> addCookie
    void clear() -> clear
    boolean clearExpired(java.util.Date) -> clearExpired
    java.util.List getCookies() -> getCookies
org.geometerplus.zlibrary.core.network.ZLNetworkManager$2 -> org.geometerplus.zlibrary.core.network.d:
    org.geometerplus.zlibrary.core.network.ZLNetworkManager this$0 -> a
    java.io.File val$outFile -> f
    int val$bufferSize -> g
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager$AuthScopeKey -> org.geometerplus.zlibrary.core.network.e:
    org.apache.http.auth.AuthScope myScope -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator -> org.geometerplus.zlibrary.core.network.f:
    java.util.HashMap myCredentialsMap -> a
    java.lang.String myUsername -> b
    java.lang.String myPassword -> c
    void setCredentials(java.lang.String,java.lang.String) -> a
    void release() -> a
    org.apache.http.auth.Credentials createCredentials(java.lang.String,org.apache.http.auth.AuthScope,boolean) -> a
    boolean removeCredentials(org.geometerplus.zlibrary.core.network.ZLNetworkManager$AuthScopeKey) -> a
    void startAuthenticationDialog(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager$Key -> org.geometerplus.zlibrary.core.network.g:
    java.lang.String Domain -> a
    java.lang.String Path -> b
    java.lang.String Name -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.core.network.ZLNetworkManager$MyCredentialsProvider -> org.geometerplus.zlibrary.core.network.h:
    org.apache.http.client.methods.HttpUriRequest myRequest -> b
    boolean myQuietly -> c
    org.geometerplus.zlibrary.core.network.ZLNetworkManager this$0 -> a
    org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope) -> getCredentials
org.geometerplus.zlibrary.core.network.ZLNetworkRequest -> org.geometerplus.zlibrary.core.network.i:
    java.lang.String URL -> b
    java.lang.String SSLCertificate -> c
    java.lang.String PostData -> d
    java.util.Map PostParameters -> e
    boolean myIsQuiet -> a
    void addPostParameter(java.lang.String,java.lang.String) -> a
    java.lang.String getURL() -> a
    boolean isQuiet() -> b
    void doBefore() -> c
    void handleStream(java.io.InputStream,int) -> a
    void doAfter(boolean) -> a
org.geometerplus.zlibrary.core.options.ZLBoolean3Option -> org.geometerplus.zlibrary.core.i.a:
    org.geometerplus.zlibrary.core.util.ZLBoolean3 myValue -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 myDefaultValue -> b
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getValue() -> a
    void setValue(org.geometerplus.zlibrary.core.util.ZLBoolean3) -> a
org.geometerplus.zlibrary.core.options.ZLBooleanOption -> org.geometerplus.zlibrary.core.i.b:
    boolean myDefaultValue -> a
    boolean myValue -> b
    boolean getValue() -> a
    void setValue(boolean) -> a
org.geometerplus.zlibrary.core.options.ZLColorOption -> org.geometerplus.zlibrary.core.i.c:
    org.geometerplus.zlibrary.core.util.ZLColor myDefaultValue -> a
    org.geometerplus.zlibrary.core.util.ZLColor myValue -> b
    org.geometerplus.zlibrary.core.util.ZLColor getValue() -> a
    void setValue(org.geometerplus.zlibrary.core.util.ZLColor) -> a
org.geometerplus.zlibrary.core.options.ZLEnumOption -> org.geometerplus.zlibrary.core.i.d:
    java.lang.Enum myDefaultValue -> a
    java.lang.Enum myValue -> b
    java.lang.Enum getValue() -> a
    void setValue(java.lang.Enum) -> a
org.geometerplus.zlibrary.core.options.ZLIntegerOption -> org.geometerplus.zlibrary.core.i.e:
    int myDefaultValue -> a
    int myValue -> b
    int getValue() -> a
    void setValue(int) -> a
org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption -> org.geometerplus.zlibrary.core.i.f:
    int MinValue -> a
    int MaxValue -> b
    int myDefaultValue -> d
    int myValue -> e
    int getValue() -> a
    void setValue(int) -> a
org.geometerplus.zlibrary.core.options.ZLOption -> org.geometerplus.zlibrary.core.i.g:
    java.lang.String myGroup -> a
    java.lang.String myOptionName -> b
    boolean myIsSynchronized -> c
    java.lang.String getConfigValue(java.lang.String) -> a
    void setConfigValue(java.lang.String) -> b
    void unsetConfigValue() -> b
org.geometerplus.zlibrary.core.options.ZLStringListOption -> org.geometerplus.zlibrary.core.i.h:
    java.util.List myDefaultValue -> a
    java.util.List myValue -> b
    java.lang.String myDelimiter -> d
    java.util.List getValue() -> a
    void setValue(java.util.List) -> a
org.geometerplus.zlibrary.core.options.ZLStringOption -> org.geometerplus.zlibrary.core.i.i:
    java.lang.String myDefaultValue -> a
    java.lang.String myValue -> b
    java.lang.String getValue() -> a
    void setValue(java.lang.String) -> c
org.geometerplus.zlibrary.core.resources.ZLMissingResource -> org.geometerplus.zlibrary.core.j.a:
    org.geometerplus.zlibrary.core.resources.ZLMissingResource Instance -> a
    org.geometerplus.zlibrary.core.resources.ZLResource getResource(java.lang.String) -> a
    boolean hasValue() -> a
    java.lang.String getValue() -> b
    java.lang.String getValue(int) -> a
org.geometerplus.zlibrary.core.resources.ZLResource -> org.geometerplus.zlibrary.core.j.b:
    java.lang.String Name -> b
    org.geometerplus.zlibrary.core.resources.ZLResource resource(java.lang.String) -> b
    boolean hasValue() -> a
    java.lang.String getValue() -> b
    java.lang.String getValue(int) -> a
    org.geometerplus.zlibrary.core.resources.ZLResource getResource(java.lang.String) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource -> org.geometerplus.zlibrary.core.j.c:
    org.geometerplus.zlibrary.core.resources.ZLTreeResource ourRoot -> a
    long ourTimeStamp -> c
    java.lang.String ourLanguage -> d
    java.lang.String ourCountry -> e
    boolean myHasValue -> f
    java.lang.String myValue -> g
    java.util.HashMap myChildren -> h
    java.util.LinkedHashMap myConditionalValues -> i
    org.geometerplus.zlibrary.core.resources.ZLTreeResource$Condition parseCondition(java.lang.String) -> d
    void buildTree() -> c
    void updateLanguage() -> d
    void loadData(org.geometerplus.zlibrary.core.resources.ZLTreeResource$ResourceTreeReader,java.lang.String) -> a
    void loadData() -> e
    void setValue(java.lang.String) -> e
    boolean hasValue() -> a
    java.lang.String getValue() -> b
    java.lang.String getValue(int) -> a
    org.geometerplus.zlibrary.core.resources.ZLResource getResource(java.lang.String) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.core.resources.ZLTreeResource) -> a
    void access$1(org.geometerplus.zlibrary.core.resources.ZLTreeResource,java.util.HashMap) -> a
    void access$3(org.geometerplus.zlibrary.core.resources.ZLTreeResource,java.lang.String) -> a
    org.geometerplus.zlibrary.core.resources.ZLTreeResource$Condition access$4(java.lang.String) -> c
    java.util.LinkedHashMap access$5(org.geometerplus.zlibrary.core.resources.ZLTreeResource) -> b
    void access$6(org.geometerplus.zlibrary.core.resources.ZLTreeResource,java.util.LinkedHashMap) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource$Condition -> org.geometerplus.zlibrary.core.j.d:
    boolean accepts(int) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource$ModCondition -> org.geometerplus.zlibrary.core.j.e:
    int myMod -> a
    int myBase -> b
    boolean accepts(int) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource$RangeCondition -> org.geometerplus.zlibrary.core.j.f:
    int myMin -> a
    int myMax -> b
    boolean accepts(int) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource$ResourceTreeReader -> org.geometerplus.zlibrary.core.j.g:
    java.util.ArrayList myStack -> a
    void readDocument(org.geometerplus.zlibrary.core.resources.ZLTreeResource,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource$ValueCondition -> org.geometerplus.zlibrary.core.j.h:
    int myValue -> a
    boolean accepts(int) -> a
org.geometerplus.zlibrary.core.sqliteconfig.ZLSQLiteConfig -> org.geometerplus.zlibrary.core.k.a:
    android.database.sqlite.SQLiteDatabase myDatabase -> a
    android.database.sqlite.SQLiteStatement myGetValueStatement -> b
    android.database.sqlite.SQLiteStatement mySetValueStatement -> c
    android.database.sqlite.SQLiteStatement myUnsetValueStatement -> d
    android.database.sqlite.SQLiteStatement myDeleteGroupStatement -> e
    java.util.List listGroups() -> b
    java.util.List listNames(java.lang.String) -> a
    void removeGroup(java.lang.String) -> b
    java.lang.String getValue(java.lang.String,java.lang.String,java.lang.String) -> a
    void setValue(java.lang.String,java.lang.String,java.lang.String) -> b
    void unsetValue(java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.core.tree.ZLTree -> org.geometerplus.zlibrary.core.l.a:
    int mySize -> a
    org.geometerplus.zlibrary.core.tree.ZLTree Parent -> d
    int Level -> e
    java.util.List mySubTrees -> b
    int getSize() -> y
    boolean hasChildren() -> z
    java.util.List subTrees() -> e_
    org.geometerplus.zlibrary.core.tree.ZLTree getTreeByParagraphNumber(int) -> a
    void addSubTree(org.geometerplus.zlibrary.core.tree.ZLTree,int) -> a
    void removeSelf() -> A
    void clear() -> B
    org.geometerplus.zlibrary.core.tree.ZLTree$TreeIterator iterator() -> C
    java.lang.Iterable allSubTrees(int) -> b
    java.util.Iterator iterator() -> iterator
    java.util.List access$1(org.geometerplus.zlibrary.core.tree.ZLTree) -> a
org.geometerplus.zlibrary.core.tree.ZLTree$1 -> org.geometerplus.zlibrary.core.l.b:
    org.geometerplus.zlibrary.core.tree.ZLTree this$0 -> a
    int val$maxLevel -> b
    org.geometerplus.zlibrary.core.tree.ZLTree$TreeIterator iterator() -> a
    java.util.Iterator iterator() -> iterator
org.geometerplus.zlibrary.core.tree.ZLTree$TreeIterator -> org.geometerplus.zlibrary.core.l.c:
    org.geometerplus.zlibrary.core.tree.ZLTree myCurrentElement -> b
    java.util.LinkedList myIndexStack -> c
    int myMaxLevel -> d
    org.geometerplus.zlibrary.core.tree.ZLTree this$0 -> a
    boolean hasNext() -> hasNext
    org.geometerplus.zlibrary.core.tree.ZLTree next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
org.geometerplus.zlibrary.core.util.MimeType -> org.geometerplus.zlibrary.core.m.a:
    java.util.Map ourSimpleTypesMap -> q
    org.geometerplus.zlibrary.core.util.MimeType APP_FB2ZIP -> a
    org.geometerplus.zlibrary.core.util.MimeType APP_EPUB -> b
    org.geometerplus.zlibrary.core.util.MimeType APP_MOBI -> c
    org.geometerplus.zlibrary.core.util.MimeType APP_PDF -> d
    org.geometerplus.zlibrary.core.util.MimeType APP_ATOM -> e
    org.geometerplus.zlibrary.core.util.MimeType APP_OPENSEARCHDESCRIPTION -> f
    org.geometerplus.zlibrary.core.util.MimeType APP_LITRES -> g
    org.geometerplus.zlibrary.core.util.MimeType TEXT_HTML -> h
    org.geometerplus.zlibrary.core.util.MimeType TEXT_XHTML -> i
    org.geometerplus.zlibrary.core.util.MimeType TEXT_PLAIN -> j
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_PNG -> k
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_JPEG -> l
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_AUTO -> m
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_PALM -> n
    org.geometerplus.zlibrary.core.util.MimeType NULL -> o
    java.lang.String Name -> p
    java.util.Map myParameters -> r
    org.geometerplus.zlibrary.core.util.MimeType get(java.lang.String) -> a
    java.lang.String getParameter(java.lang.String) -> b
    boolean equals(java.lang.Object) -> equals
    boolean weakEquals(org.geometerplus.zlibrary.core.util.MimeType) -> a
    int hashCode() -> hashCode
org.geometerplus.zlibrary.core.util.SliceInputStream -> org.geometerplus.zlibrary.core.m.b:
    int myStart -> a
    int myLength -> b
    int available() -> available
    void reset() -> reset
org.geometerplus.zlibrary.core.util.ZLArrayUtils -> org.geometerplus.zlibrary.core.m.c:
    byte[] createCopy(byte[],int,int) -> a
    char[] createCopy(char[],int,int) -> a
    int[] createCopy(int[],int,int) -> a
    java.lang.String[] createCopy(java.lang.String[],int,int) -> a
org.geometerplus.zlibrary.core.util.ZLBoolean3 -> org.geometerplus.zlibrary.core.m.d:
    org.geometerplus.zlibrary.core.util.ZLBoolean3 B3_FALSE -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 B3_TRUE -> b
    org.geometerplus.zlibrary.core.util.ZLBoolean3 B3_UNDEFINED -> c
    java.lang.String Name -> d
    org.geometerplus.zlibrary.core.util.ZLBoolean3[] ENUM$VALUES -> e
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getByName(java.lang.String) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3[] values() -> values
    org.geometerplus.zlibrary.core.util.ZLBoolean3 valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.core.util.ZLCharacterUtil -> org.geometerplus.zlibrary.core.m.e:
    boolean isLetter(char) -> a
org.geometerplus.zlibrary.core.util.ZLColor -> org.geometerplus.zlibrary.core.m.f:
    short Red -> a
    short Green -> b
    short Blue -> c
    int getIntValue() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.core.util.ZLInputStreamWithOffset -> org.geometerplus.zlibrary.core.m.g:
    java.io.InputStream myDecoratedStream -> a
    int myOffset -> b
    int available() -> available
    long skip(long) -> skip
    int read() -> read
    void close() -> close
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    void reset() -> reset
    int offset() -> a
org.geometerplus.zlibrary.core.util.ZLMiscUtil -> org.geometerplus.zlibrary.core.m.h:
    boolean equals(java.lang.Object,java.lang.Object) -> a
    int hashCode(java.lang.Object) -> a
    boolean mapsEquals(java.util.Map,java.util.Map) -> a
    boolean matchesIgnoreCase(java.lang.String,java.lang.String) -> a
    java.lang.String listToString(java.util.List,java.lang.String) -> a
    java.util.List stringToList(java.lang.String,java.lang.String) -> b
org.geometerplus.zlibrary.core.util.ZLNetworkUtil -> org.geometerplus.zlibrary.core.m.i:
    java.lang.String url(java.lang.String,java.lang.String) -> a
    boolean hasParameter(java.lang.String,java.lang.String) -> b
    java.lang.String appendParameter(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String hostFromUrl(java.lang.String) -> a
    java.lang.String getUserAgent() -> a
org.geometerplus.zlibrary.core.util.ZLSearchPattern -> org.geometerplus.zlibrary.core.m.j:
    boolean IgnoreCase -> a
    char[] LowerCasePattern -> b
    char[] UpperCasePattern -> c
    int getLength() -> a
org.geometerplus.zlibrary.core.util.ZLSearchUtil -> org.geometerplus.zlibrary.core.m.k:
    int find(char[],int,int,org.geometerplus.zlibrary.core.util.ZLSearchPattern) -> a
    int find(char[],int,int,org.geometerplus.zlibrary.core.util.ZLSearchPattern,int) -> a
org.geometerplus.zlibrary.core.util.ZLTTFInfo -> org.geometerplus.zlibrary.core.m.l:
    java.lang.String FamilyName -> a
    java.lang.String SubFamilyName -> b
org.geometerplus.zlibrary.core.util.ZLTTFInfoDetector -> org.geometerplus.zlibrary.core.m.m:
    java.io.InputStream myStream -> a
    int myPosition -> b
    java.util.Map collectFonts(java.io.File[]) -> a
    org.geometerplus.zlibrary.core.util.ZLTTFInfo detectInfo(java.io.File) -> a
    int getInt16(byte[],int) -> b
    int getInt32(byte[],int) -> c
    byte[] readTable(org.geometerplus.zlibrary.core.util.ZLTTFInfoDetector$TableInfo) -> a
    org.geometerplus.zlibrary.core.util.ZLTTFInfo readFontInfo(org.geometerplus.zlibrary.core.util.ZLTTFInfoDetector$TableInfo) -> b
    int access$0(byte[],int) -> a
org.geometerplus.zlibrary.core.util.ZLTTFInfoDetector$TableInfo -> org.geometerplus.zlibrary.core.m.n:
    java.lang.String Name -> a
    int Offset -> b
    int Length -> c
org.geometerplus.zlibrary.core.view.DummyPaintContext -> org.geometerplus.zlibrary.core.n.a:
    void clear(org.geometerplus.zlibrary.core.filesystem.ZLFile,boolean) -> a
    void clear(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> a
    void setFontInternal(java.lang.String,int,boolean,boolean,boolean) -> a
    void setTextColor(org.geometerplus.zlibrary.core.util.ZLColor) -> b
    void setLineColor(org.geometerplus.zlibrary.core.util.ZLColor,int) -> a
    void setLineWidth(int) -> a
    void setFillColor(org.geometerplus.zlibrary.core.util.ZLColor,int,int) -> a
    int getWidth() -> b
    int getHeight() -> c
    int getStringWidth(char[],int,int) -> a
    int getSpaceWidthInternal() -> d
    int getStringHeightInternal() -> e
    int getDescentInternal() -> f
    void drawString(int,int,char[],int,int) -> a
    org.geometerplus.zlibrary.core.view.ZLPaintContext$Size imageSize(org.geometerplus.zlibrary.core.image.ZLImageData,org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    void drawImage(int,int,org.geometerplus.zlibrary.core.image.ZLImageData,org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    void drawLine(int,int,int,int) -> a
    void fillRectangle(int,int,int,int) -> b
    void fillPolygon(int[],int[]) -> a
    void drawPolygonalLine(int[],int[]) -> b
    void drawOutline(int[],int[]) -> c
org.geometerplus.zlibrary.core.view.ZLPaintContext -> org.geometerplus.zlibrary.core.n.b:
    java.util.ArrayList myFamilies -> a
    boolean myResetFont -> b
    java.lang.String myFontFamily -> c
    int myFontSize -> d
    boolean myFontIsBold -> e
    boolean myFontIsItalic -> f
    boolean myFontIsUnderlined -> g
    int mySpaceWidth -> h
    int myStringHeight -> i
    int myDescent -> j
    void clear(org.geometerplus.zlibrary.core.filesystem.ZLFile,boolean) -> a
    void clear(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> a
    void setFont(java.lang.String,int,boolean,boolean,boolean) -> b
    void setFontInternal(java.lang.String,int,boolean,boolean,boolean) -> a
    void setTextColor(org.geometerplus.zlibrary.core.util.ZLColor) -> b
    void setLineColor(org.geometerplus.zlibrary.core.util.ZLColor) -> c
    void setLineColor(org.geometerplus.zlibrary.core.util.ZLColor,int) -> a
    void setLineWidth(int) -> a
    void setFillColor(org.geometerplus.zlibrary.core.util.ZLColor,int) -> b
    void setFillColor(org.geometerplus.zlibrary.core.util.ZLColor) -> d
    void setFillColor(org.geometerplus.zlibrary.core.util.ZLColor,int,int) -> a
    int getWidth() -> b
    int getHeight() -> c
    int getStringWidth(java.lang.String) -> a
    int getStringWidth(char[],int,int) -> a
    int getSpaceWidth() -> g
    int getSpaceWidthInternal() -> d
    int getStringHeight() -> h
    int getStringHeightInternal() -> e
    int getDescent() -> i
    int getDescentInternal() -> f
    void drawString(int,int,java.lang.String) -> a
    void drawString(int,int,char[],int,int) -> a
    org.geometerplus.zlibrary.core.view.ZLPaintContext$Size imageSize(org.geometerplus.zlibrary.core.image.ZLImageData,org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    void drawImage(int,int,org.geometerplus.zlibrary.core.image.ZLImageData,org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    void drawLine(int,int,int,int) -> a
    void fillRectangle(int,int,int,int) -> b
    void drawPolygonalLine(int[],int[]) -> b
    void fillPolygon(int[],int[]) -> a
    void drawOutline(int[],int[]) -> c
org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType -> org.geometerplus.zlibrary.core.n.c:
    org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType OriginalSize -> a
    org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType IntegerCoefficient -> b
    org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType FitMaximum -> c
    org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType[] ENUM$VALUES -> d
    org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType[] values() -> values
    org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.core.view.ZLPaintContext$Size -> org.geometerplus.zlibrary.core.n.d:
    int Width -> a
    int Height -> b
    boolean equals(java.lang.Object) -> equals
org.geometerplus.zlibrary.core.view.ZLView -> org.geometerplus.zlibrary.core.n.e:
    org.geometerplus.zlibrary.core.application.ZLApplication Application -> a
    org.geometerplus.zlibrary.core.view.ZLPaintContext myContext -> b
    org.geometerplus.zlibrary.core.view.ZLView$FooterArea getFooterArea() -> q
    org.geometerplus.zlibrary.core.view.ZLView$Animation getAnimationType() -> p
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext,org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void onScrollingFinished(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    boolean onFingerPress(int,int) -> c
    boolean onFingerRelease(int,int) -> e
    boolean onFingerMove(int,int) -> d
    boolean onFingerLongPress(int,int) -> f
    boolean onFingerReleaseAfterLongPress(int,int) -> h
    boolean onFingerMoveAfterLongPress(int,int) -> g
    boolean onFingerSingleTap(int,int) -> a
    boolean onFingerDoubleTap(int,int) -> b
    boolean isDoubleTapSupported() -> a
    boolean onTrackballRotated(int,int) -> i
    boolean isScrollbarShown() -> s
    int getScrollbarFullSize() -> t
    int getScrollbarThumbPosition(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> b
    int getScrollbarThumbLength(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> c
    boolean canScroll(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> d
org.geometerplus.zlibrary.core.view.ZLView$Animation -> org.geometerplus.zlibrary.core.n.f:
    org.geometerplus.zlibrary.core.view.ZLView$Animation none -> a
    org.geometerplus.zlibrary.core.view.ZLView$Animation curl -> b
    org.geometerplus.zlibrary.core.view.ZLView$Animation slide -> c
    org.geometerplus.zlibrary.core.view.ZLView$Animation shift -> d
    org.geometerplus.zlibrary.core.view.ZLView$Animation[] ENUM$VALUES -> e
    org.geometerplus.zlibrary.core.view.ZLView$Animation[] values() -> values
    org.geometerplus.zlibrary.core.view.ZLView$Animation valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.core.view.ZLView$Direction -> org.geometerplus.zlibrary.core.n.g:
    org.geometerplus.zlibrary.core.view.ZLView$Direction leftToRight -> a
    org.geometerplus.zlibrary.core.view.ZLView$Direction rightToLeft -> b
    org.geometerplus.zlibrary.core.view.ZLView$Direction up -> c
    org.geometerplus.zlibrary.core.view.ZLView$Direction down -> d
    boolean IsHorizontal -> e
    org.geometerplus.zlibrary.core.view.ZLView$Direction[] ENUM$VALUES -> f
    org.geometerplus.zlibrary.core.view.ZLView$Direction[] values() -> values
    org.geometerplus.zlibrary.core.view.ZLView$Direction valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.core.view.ZLView$FooterArea -> org.geometerplus.zlibrary.core.n.h:
    int getHeight() -> a
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
org.geometerplus.zlibrary.core.view.ZLView$PageIndex -> org.geometerplus.zlibrary.core.n.i:
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex previous -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex current -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex next -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex -> d
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex[] ENUM$VALUES -> e
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getNext() -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPrevious() -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex[] values() -> values
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex valueOf(java.lang.String) -> valueOf
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex() -> c
org.geometerplus.zlibrary.core.view.ZLViewWidget -> org.geometerplus.zlibrary.core.n.j:
    void reset() -> a
    void repaint() -> b
    void startManualScrolling(int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction) -> a
    void scrollManuallyTo(int,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAnimatedScrolling(int,int,int) -> a
org.geometerplus.zlibrary.core.xml.ZLDTDParser -> org.geometerplus.zlibrary.core.o.a:
    void doIt(java.io.InputStream,java.util.HashMap) -> a
org.geometerplus.zlibrary.core.xml.ZLMutableString -> org.geometerplus.zlibrary.core.o.b:
    char[] myData -> a
    int myLength -> b
    void append(char[],int,int) -> a
    void clear() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.core.xml.ZLStringMap -> org.geometerplus.zlibrary.core.o.c:
    java.lang.String[] myKeys -> a
    java.lang.String[] myValues -> b
    int mySize -> c
    void put(java.lang.String,java.lang.String) -> a
    java.lang.String getValue(java.lang.String) -> a
    int getSize() -> a
    java.lang.String getKey(int) -> a
    java.lang.String getValue(int) -> b
    void clear() -> b
org.geometerplus.zlibrary.core.xml.ZLXMLParser -> org.geometerplus.zlibrary.core.o.d:
    java.io.InputStreamReader myStreamReader -> a
    org.geometerplus.zlibrary.core.xml.ZLXMLReader myXMLReader -> b
    boolean myProcessNamespaces -> c
    java.util.HashMap ourBufferPool -> d
    java.util.Queue ourStringPool -> e
    char[] myBuffer -> f
    int myBufferDescriptionLength -> g
    org.geometerplus.zlibrary.core.xml.ZLMutableString myTagName -> h
    org.geometerplus.zlibrary.core.xml.ZLMutableString myCData -> i
    org.geometerplus.zlibrary.core.xml.ZLMutableString myAttributeName -> j
    org.geometerplus.zlibrary.core.xml.ZLMutableString myAttributeValue -> k
    org.geometerplus.zlibrary.core.xml.ZLMutableString myEntityName -> l
    java.util.HashMap ourDTDMaps -> m
    java.lang.String convertToString(java.util.Map,org.geometerplus.zlibrary.core.xml.ZLMutableString) -> a
    char[] getBuffer(int) -> a
    void storeBuffer(char[]) -> a
    org.geometerplus.zlibrary.core.xml.ZLMutableString getMutableString() -> c
    void storeString(org.geometerplus.zlibrary.core.xml.ZLMutableString) -> a
    void finish() -> a
    char[] getEntityValue(java.util.HashMap,java.lang.String) -> a
    java.util.HashMap getDTDMap(java.util.List) -> a
    void doIt() -> b
    boolean processFullTag(org.geometerplus.zlibrary.core.xml.ZLXMLReader,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean processStartTag(org.geometerplus.zlibrary.core.xml.ZLXMLReader,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.util.HashMap) -> a
    boolean processEndTag(org.geometerplus.zlibrary.core.xml.ZLXMLReader,java.lang.String,java.util.HashMap) -> a
org.geometerplus.zlibrary.core.xml.ZLXMLProcessor -> org.geometerplus.zlibrary.core.o.e:
    java.util.Map getEntityMap(java.util.List) -> a
    boolean read(org.geometerplus.zlibrary.core.xml.ZLXMLReader,java.io.InputStream,int) -> a
    boolean read(org.geometerplus.zlibrary.core.xml.ZLXMLReader,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean read(org.geometerplus.zlibrary.core.xml.ZLXMLReader,org.geometerplus.zlibrary.core.filesystem.ZLFile,int) -> a
org.geometerplus.zlibrary.core.xml.ZLXMLReader -> org.geometerplus.zlibrary.core.o.f:
    boolean dontCacheAttributeValues() -> a
    void startDocumentHandler() -> b_
    void endDocumentHandler() -> e
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    void characterDataHandlerFinal(char[],int,int) -> b
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    void addExternalEntities(java.util.HashMap) -> a
    java.util.List externalDTDs() -> f
org.geometerplus.zlibrary.core.xml.ZLXMLReaderAdapter -> org.geometerplus.zlibrary.core.o.g:
    java.util.Map myNamespaceMap -> a
    boolean read(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    boolean read(java.io.InputStream) -> a
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    void characterDataHandlerFinal(char[],int,int) -> b
    void startDocumentHandler() -> b_
    void endDocumentHandler() -> e
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    java.lang.String getAttributeValue(org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String,java.lang.String) -> a
    void addExternalEntities(java.util.HashMap) -> a
    java.util.List externalDTDs() -> f
org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenationInfo -> org.geometerplus.zlibrary.text.a.a:
    boolean[] Mask -> a
    boolean isHyphenationPossible(int) -> a
org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenationReader -> org.geometerplus.zlibrary.text.a.b:
    org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenator myHyphenator -> a
    boolean myReadPattern -> b
    char[] myBuffer -> c
    int myBufferLength -> d
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenator -> org.geometerplus.zlibrary.text.a.c:
    org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenator ourInstance -> a
    org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenator Instance() -> a
    java.util.List languageCodes() -> b
    void load(java.lang.String) -> a
    org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenationInfo getInfo(org.geometerplus.zlibrary.text.view.ZLTextWord) -> a
    void hyphenate(char[],boolean[],int) -> a
org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenationPattern -> org.geometerplus.zlibrary.text.a.d:
    int myLength -> a
    char[] mySymbols -> b
    byte[] myValues -> d
    int myHashCode -> c
    void update(char[],int,int) -> a
    void apply(byte[],int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenator -> org.geometerplus.zlibrary.text.a.e:
    java.util.HashMap myPatternTable -> a
    java.lang.String myLanguage -> b
    java.util.List myLanguageCodes -> c
    void addPattern(org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenationPattern) -> a
    java.util.List languageCodes() -> b
    void load(java.lang.String) -> a
    void unload() -> c
    void hyphenate(char[],boolean[],int) -> a
org.geometerplus.zlibrary.text.model.CachedCharStorage -> org.geometerplus.zlibrary.text.model.a:
    int myBlockSize -> a
    java.util.ArrayList myArray -> b
    java.lang.String myDirectoryName -> c
    java.lang.String myFileExtension -> d
    java.lang.String fileName(int) -> c
    int size() -> a
    char[] block(int) -> a
    char[] createNewBlock(int) -> b
    void freezeLastBlock() -> b
org.geometerplus.zlibrary.text.model.CachedCharStorageException -> org.geometerplus.zlibrary.text.model.CachedCharStorageException:
org.geometerplus.zlibrary.text.model.CharStorage -> org.geometerplus.zlibrary.text.model.b:
    int size() -> a
    char[] block(int) -> a
    char[] createNewBlock(int) -> b
    void freezeLastBlock() -> b
org.geometerplus.zlibrary.text.model.ZLImageEntry -> org.geometerplus.zlibrary.text.model.c:
    org.geometerplus.zlibrary.core.image.ZLImageMap myImageMap -> d
    java.lang.String Id -> a
    short VOffset -> b
    boolean IsCover -> c
    org.geometerplus.zlibrary.core.image.ZLImage getImage() -> a
org.geometerplus.zlibrary.text.model.ZLTextForcedControlEntry -> org.geometerplus.zlibrary.text.model.d:
    short myMask -> a
    short myLeftIndent -> b
    short myRightIndent -> c
    byte myAlignmentType -> d
    void setLeftIndent(short) -> a
    void setRightIndent(short) -> b
    void setAlignmentType(byte) -> a
org.geometerplus.zlibrary.text.model.ZLTextMark -> org.geometerplus.zlibrary.text.model.e:
    int ParagraphIndex -> a
    int Offset -> b
    int Length -> c
    int compareTo(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.text.model.ZLTextModel -> org.geometerplus.zlibrary.text.model.f:
    java.lang.String getId() -> a
    java.lang.String getLanguage() -> b
    int getParagraphsNumber() -> c
    org.geometerplus.zlibrary.text.model.ZLTextParagraph getParagraph(int) -> a
    void removeAllMarks() -> d
    org.geometerplus.zlibrary.text.model.ZLTextMark getFirstMark() -> e
    org.geometerplus.zlibrary.text.model.ZLTextMark getLastMark() -> f
    org.geometerplus.zlibrary.text.model.ZLTextMark getNextMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    org.geometerplus.zlibrary.text.model.ZLTextMark getPreviousMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> b
    java.util.List getMarks() -> g
    int getTextLength(int) -> b
    int findParagraphByTextLength(int) -> c
    int search(java.lang.String,int,int,boolean) -> a
org.geometerplus.zlibrary.text.model.ZLTextParagraph -> org.geometerplus.zlibrary.text.model.g:
    org.geometerplus.zlibrary.text.model.ZLTextParagraph$EntryIterator iterator() -> a
    byte getKind() -> b
org.geometerplus.zlibrary.text.model.ZLTextParagraph$EntryIterator -> org.geometerplus.zlibrary.text.model.h:
    byte getType() -> a
    char[] getTextData() -> b
    int getTextOffset() -> c
    int getTextLength() -> d
    byte getControlKind() -> e
    boolean getControlIsStart() -> f
    byte getHyperlinkType() -> g
    java.lang.String getHyperlinkId() -> h
    org.geometerplus.zlibrary.text.model.ZLImageEntry getImageEntry() -> i
    short getFixedHSpaceLength() -> j
    boolean hasNext() -> k
    void next() -> l
org.geometerplus.zlibrary.text.model.ZLTextParagraphImpl -> org.geometerplus.zlibrary.text.model.i:
    org.geometerplus.zlibrary.text.model.ZLTextPlainModel myModel -> a
    int myIndex -> b
    org.geometerplus.zlibrary.text.model.ZLTextParagraph$EntryIterator iterator() -> a
    byte getKind() -> b
org.geometerplus.zlibrary.text.model.ZLTextPlainModel -> org.geometerplus.zlibrary.text.model.j:
    java.lang.String myId -> a
    java.lang.String myLanguage -> j
    int[] myStartEntryIndices -> b
    int[] myStartEntryOffsets -> c
    int[] myParagraphLengths -> d
    int[] myTextSizes -> e
    byte[] myParagraphKinds -> f
    int myParagraphsNumber -> g
    org.geometerplus.zlibrary.text.model.CharStorage myStorage -> h
    java.util.ArrayList myMarks -> k
    org.geometerplus.zlibrary.core.image.ZLImageMap myImageMap -> i
    java.lang.String getId() -> a
    java.lang.String getLanguage() -> b
    org.geometerplus.zlibrary.text.model.ZLTextMark getFirstMark() -> e
    org.geometerplus.zlibrary.text.model.ZLTextMark getLastMark() -> f
    org.geometerplus.zlibrary.text.model.ZLTextMark getNextMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    org.geometerplus.zlibrary.text.model.ZLTextMark getPreviousMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> b
    int search(java.lang.String,int,int,boolean) -> a
    java.util.List getMarks() -> g
    void removeAllMarks() -> d
    int getParagraphsNumber() -> c
    org.geometerplus.zlibrary.text.model.ZLTextParagraph getParagraph(int) -> a
    int getTextLength(int) -> b
    int binarySearch(int[],int,int) -> a
    int findParagraphByTextLength(int) -> c
org.geometerplus.zlibrary.text.model.ZLTextPlainModel$EntryIteratorImpl -> org.geometerplus.zlibrary.text.model.k:
    int myCounter -> d
    int myLength -> e
    byte myType -> f
    int myDataIndex -> a
    int myDataOffset -> b
    char[] myTextData -> g
    int myTextOffset -> h
    int myTextLength -> i
    byte myControlKind -> j
    boolean myControlIsStart -> k
    byte myHyperlinkType -> l
    java.lang.String myHyperlinkId -> m
    org.geometerplus.zlibrary.text.model.ZLImageEntry myImageEntry -> n
    org.geometerplus.zlibrary.text.model.ZLTextForcedControlEntry myForcedControlEntry -> o
    short myFixedHSpaceLength -> p
    org.geometerplus.zlibrary.text.model.ZLTextPlainModel this$0 -> c
    void reset(int) -> a
    byte getType() -> a
    char[] getTextData() -> b
    int getTextOffset() -> c
    int getTextLength() -> d
    byte getControlKind() -> e
    boolean getControlIsStart() -> f
    byte getHyperlinkType() -> g
    java.lang.String getHyperlinkId() -> h
    org.geometerplus.zlibrary.text.model.ZLImageEntry getImageEntry() -> i
    short getFixedHSpaceLength() -> j
    boolean hasNext() -> k
    void next() -> l
org.geometerplus.zlibrary.text.model.ZLTextSpecialParagraphImpl -> org.geometerplus.zlibrary.text.model.l:
    byte myKind -> a
    byte getKind() -> b
org.geometerplus.zlibrary.text.model.ZLTextWritableModel -> org.geometerplus.zlibrary.text.model.m:
    void createParagraph(byte) -> a
    void addControl(byte,boolean) -> a
    void addText(char[],int,int) -> a
    void addHyperlinkControl(byte,byte,java.lang.String) -> a
    void addImage(java.lang.String,short,boolean) -> a
    void addFixedHSpace(short) -> a
    void stopReading() -> h
org.geometerplus.zlibrary.text.model.ZLTextWritablePlainModel -> org.geometerplus.zlibrary.text.model.n:
    char[] myCurrentDataBlock -> j
    int myBlockOffset -> k
    void extend() -> i
    void createParagraph(byte) -> a
    char[] getDataBlock(int) -> d
    void addControl(byte,boolean) -> a
    void addText(char[],int,int) -> a
    void addHyperlinkControl(byte,byte,java.lang.String) -> a
    void addImage(java.lang.String,short,boolean) -> a
    void addFixedHSpace(short) -> a
    void stopReading() -> h
org.geometerplus.zlibrary.text.view.ZLTextAbstractHighlighting -> org.geometerplus.zlibrary.text.b.a:
    boolean isEmpty() -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getStartArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getEndArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> b
org.geometerplus.zlibrary.text.view.ZLTextControlElement -> org.geometerplus.zlibrary.text.b.b:
    org.geometerplus.zlibrary.text.view.ZLTextControlElement[] myStartElements -> f
    org.geometerplus.zlibrary.text.view.ZLTextControlElement[] myEndElements -> g
    byte Kind -> a
    boolean IsStart -> b
    org.geometerplus.zlibrary.text.view.ZLTextControlElement get(byte,boolean) -> a
org.geometerplus.zlibrary.text.view.ZLTextElement -> org.geometerplus.zlibrary.text.b.c:
    org.geometerplus.zlibrary.text.view.ZLTextElement HSpace -> c
    org.geometerplus.zlibrary.text.view.ZLTextElement AfterParagraph -> d
    org.geometerplus.zlibrary.text.view.ZLTextElement IndentElement -> e
org.geometerplus.zlibrary.text.view.ZLTextElementArea -> org.geometerplus.zlibrary.text.b.d:
    int XStart -> a
    int XEnd -> b
    int YStart -> c
    int YEnd -> d
    int Length -> e
    boolean AddHyphenationSign -> f
    boolean ChangeStyle -> g
    org.geometerplus.zlibrary.text.view.ZLTextStyle Style -> h
    org.geometerplus.zlibrary.text.view.ZLTextElement Element -> i
    boolean myIsLastInElement -> m
    boolean isFirstInElement() -> a
    boolean isLastInElement() -> b
org.geometerplus.zlibrary.text.view.ZLTextElementAreaVector -> org.geometerplus.zlibrary.text.b.e:
    java.util.List myAreas -> a
    java.util.List myElementRegions -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion myCurrentElementRegion -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> d
    void clear() -> a
    int size() -> b
    org.geometerplus.zlibrary.text.view.ZLTextElementArea get(int) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getFirstArea() -> c
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getLastArea() -> d
    boolean add(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getFirstAfter(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getLastBefore(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion getRegion(org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul) -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion findRegion(int,int,int,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion nextRegion(org.geometerplus.zlibrary.text.view.ZLTextRegion,org.geometerplus.zlibrary.core.view.ZLView$Direction,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> e
org.geometerplus.zlibrary.text.view.ZLTextFixedHSpaceElement -> org.geometerplus.zlibrary.text.b.f:
    org.geometerplus.zlibrary.text.view.ZLTextElement[] ourCollection -> b
    short Length -> a
    org.geometerplus.zlibrary.text.view.ZLTextElement getElement(short) -> a
org.geometerplus.zlibrary.text.view.ZLTextFixedPosition -> org.geometerplus.zlibrary.text.b.g:
    int ParagraphIndex -> j
    int ElementIndex -> k
    int CharIndex -> l
    int getParagraphIndex() -> k
    int getElementIndex() -> l
    int getCharIndex() -> m
org.geometerplus.zlibrary.text.view.ZLTextHighlighting -> org.geometerplus.zlibrary.text.b.h:
    org.geometerplus.zlibrary.text.view.ZLTextPosition myStartPosition -> a
    org.geometerplus.zlibrary.text.view.ZLTextPosition myEndPosition -> b
    void setup(org.geometerplus.zlibrary.text.view.ZLTextPosition,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    boolean clear() -> b
    boolean isEmpty() -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getStartArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getEndArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> b
org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull -> org.geometerplus.zlibrary.text.b.i:
    java.util.LinkedList myRectangles -> a
    void addArea(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    void normalize() -> a
    int distanceTo(int,int) -> a
    void draw(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull$Rectangle -> org.geometerplus.zlibrary.text.b.j:
    int Left -> a
    int Right -> b
    int Top -> c
    int Bottom -> d
org.geometerplus.zlibrary.text.view.ZLTextHyperlink -> org.geometerplus.zlibrary.text.b.k:
    byte Type -> a
    java.lang.String Id -> b
    java.util.List myElementIndexes -> d
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink NO_LINK -> c
    void addElementIndex(int) -> a
    java.util.List elementIndexes() -> a
org.geometerplus.zlibrary.text.view.ZLTextHyperlinkControlElement -> org.geometerplus.zlibrary.text.b.l:
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink Hyperlink -> f
org.geometerplus.zlibrary.text.view.ZLTextHyperlinkRegionSoul -> org.geometerplus.zlibrary.text.b.m:
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink Hyperlink -> a
    int startElementIndex(org.geometerplus.zlibrary.text.view.ZLTextHyperlink,int) -> a
    int endElementIndex(org.geometerplus.zlibrary.text.view.ZLTextHyperlink,int) -> b
org.geometerplus.zlibrary.text.view.ZLTextImageElement -> org.geometerplus.zlibrary.text.b.n:
    java.lang.String Id -> a
    org.geometerplus.zlibrary.core.image.ZLImageData ImageData -> b
    java.lang.String URI -> f
    boolean IsCover -> g
org.geometerplus.zlibrary.text.view.ZLTextImageRegionSoul -> org.geometerplus.zlibrary.text.b.o:
    org.geometerplus.zlibrary.text.view.ZLTextImageElement ImageElement -> a
org.geometerplus.zlibrary.text.view.ZLTextLineInfo -> org.geometerplus.zlibrary.text.b.p:
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor ParagraphCursor -> a
    int ParagraphCursorLength -> b
    int StartElementIndex -> c
    int StartCharIndex -> d
    int RealStartElementIndex -> e
    int RealStartCharIndex -> f
    int EndElementIndex -> g
    int EndCharIndex -> h
    boolean IsVisible -> i
    int LeftIndent -> j
    int Width -> k
    int Height -> l
    int Descent -> m
    int VSpaceAfter -> n
    int SpaceCounter -> o
    org.geometerplus.zlibrary.text.view.ZLTextStyle StartStyle -> p
    boolean isEndOfParagraph() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.text.view.ZLTextPage -> org.geometerplus.zlibrary.text.b.q:
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor StartCursor -> a
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor EndCursor -> b
    java.util.ArrayList LineInfos -> c
    int PaintState -> d
    org.geometerplus.zlibrary.text.view.ZLTextElementAreaVector TextElementMap -> e
    int OldWidth -> f
    int OldHeight -> g
    void reset() -> a
    void moveStartCursor(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor) -> a
    void moveStartCursor(int,int,int) -> a
    void moveEndCursor(int,int,int) -> b
    boolean isEmptyPage() -> b
    void findLineFromStart(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int) -> a
    void findLineFromEnd(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int) -> b
    void findPercentFromStart(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int,int) -> a
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor -> org.geometerplus.zlibrary.text.b.r:
    int Index -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel Model -> b
    java.util.ArrayList myElements -> c
    char[] SPACE_ARRAY -> d
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor cursor(org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
    void fill() -> a
    void clear() -> b
    boolean isFirst() -> c
    boolean isLast() -> d
    boolean isEndOfSection() -> e
    int getParagraphLength() -> f
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor previous() -> g
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor next() -> h
    org.geometerplus.zlibrary.text.view.ZLTextElement getElement(int) -> a
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor$Processor -> org.geometerplus.zlibrary.text.b.s:
    org.geometerplus.zlibrary.text.model.ZLTextParagraph myParagraph -> a
    org.vimgadgets.linebreak.LineBreaker myLineBreaker -> b
    java.util.ArrayList myElements -> c
    int myOffset -> d
    int myFirstMark -> e
    int myLastMark -> f
    java.util.List myMarks -> g
    byte[] ourBreaks -> h
    void fill() -> a
    void processTextEntry(char[],int,int,org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
    void addWord(char[],int,int,int,org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursorCache -> org.geometerplus.zlibrary.text.b.t:
    java.util.HashMap ourMap -> a
    void put(org.geometerplus.zlibrary.text.model.ZLTextModel,int,org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor) -> a
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor get(org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
    void clear() -> a
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursorCache$Key -> org.geometerplus.zlibrary.text.b.u:
    org.geometerplus.zlibrary.text.model.ZLTextModel myModel -> a
    int myIndex -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.text.view.ZLTextPosition -> org.geometerplus.zlibrary.text.b.v:
    int getParagraphIndex() -> k
    int getElementIndex() -> l
    int getCharIndex() -> m
    boolean samePositionAs(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    int compareTo(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.text.view.ZLTextRegion -> org.geometerplus.zlibrary.text.b.w:
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter AnyRegionFilter -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter HyperlinkFilter -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter ImageOrHyperlinkFilter -> c
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul mySoul -> d
    java.util.List myAreaList -> e
    org.geometerplus.zlibrary.text.view.ZLTextElementArea[] myAreas -> f
    int myFromIndex -> g
    int myToIndex -> h
    org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull myHull -> i
    void extend() -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul getSoul() -> b
    org.geometerplus.zlibrary.text.view.ZLTextElementArea[] textAreas() -> g
    org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull convexHull() -> h
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getFirstArea() -> c
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getLastArea() -> d
    int getTop() -> e
    int getBottom() -> f
    void draw(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
    int distanceTo(int,int) -> a
    boolean isAtRightOf(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
    boolean isAtLeftOf(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> b
    boolean isUnder(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> c
    boolean isOver(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> d
    boolean isExactlyUnder(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> e
    boolean isExactlyOver(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> f
org.geometerplus.zlibrary.text.view.ZLTextRegion$1 -> org.geometerplus.zlibrary.text.b.x:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$2 -> org.geometerplus.zlibrary.text.b.y:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$3 -> org.geometerplus.zlibrary.text.b.z:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter -> org.geometerplus.zlibrary.text.b.aa:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul -> org.geometerplus.zlibrary.text.b.ab:
    int ParagraphIndex -> b
    int StartElementIndex -> c
    int EndElementIndex -> d
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul) -> a
    int compareTo(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> b
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.text.view.ZLTextSelection -> org.geometerplus.zlibrary.text.b.ac:
    org.geometerplus.zlibrary.text.view.ZLTextView myView -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul myLeftMostRegionSoul -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul myRightMostRegionSoul -> c
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor myCursorInMovement -> d
    org.geometerplus.zlibrary.text.view.ZLTextSelection$Point myCursorInMovementPoint -> e
    org.geometerplus.zlibrary.text.view.ZLTextSelection$Scroller myScroller -> f
    boolean isEmpty() -> a
    boolean clear() -> b
    void setCursorInMovement(org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor,int,int) -> a
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor getCursorInMovement() -> c
    org.geometerplus.zlibrary.text.view.ZLTextSelection$Point getCursorInMovementPoint() -> d
    boolean start(int,int) -> a
    void stop() -> e
    void expandTo(int,int) -> b
    boolean isAreaSelected(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStartPosition() -> f
    org.geometerplus.zlibrary.text.view.ZLTextPosition getEndPosition() -> g
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getStartArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getEndArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> b
    boolean hasAPartBeforePage(org.geometerplus.zlibrary.text.view.ZLTextPage) -> c
    boolean hasAPartAfterPage(org.geometerplus.zlibrary.text.view.ZLTextPage) -> d
    org.geometerplus.zlibrary.text.view.ZLTextView access$0(org.geometerplus.zlibrary.text.view.ZLTextSelection) -> a
org.geometerplus.zlibrary.text.view.ZLTextSelection$Point -> org.geometerplus.zlibrary.text.b.ad:
    int X -> a
    int Y -> b
org.geometerplus.zlibrary.text.view.ZLTextSelection$Scroller -> org.geometerplus.zlibrary.text.b.ae:
    boolean myScrollForward -> b
    int myX -> c
    int myY -> d
    org.geometerplus.zlibrary.text.view.ZLTextSelection this$0 -> a
    boolean scrollsForward() -> a
    void setXY(int,int) -> a
    void run() -> run
    void stop() -> b
    void access$0(org.geometerplus.zlibrary.text.view.ZLTextSelection$Scroller) -> a
org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor -> org.geometerplus.zlibrary.text.b.af:
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor None -> a
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor Left -> b
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor Right -> c
    int ourHeight -> d
    int ourWidth -> e
    int ourAccent -> f
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor[] ENUM$VALUES -> g
    void init() -> d
    int getHeight() -> a
    int getWidth() -> b
    int getAccent() -> c
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor[] values() -> values
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.text.view.ZLTextStyle -> org.geometerplus.zlibrary.text.b.ag:
    org.geometerplus.zlibrary.text.view.ZLTextStyle Base -> a
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink Hyperlink -> b
    java.lang.String getFontFamily() -> a
    int getFontSize() -> b
    boolean isBold() -> c
    boolean isItalic() -> d
    boolean isUnderline() -> e
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getVerticalShift() -> j
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
org.geometerplus.zlibrary.text.view.ZLTextTraverser -> org.geometerplus.zlibrary.text.b.ah:
    org.geometerplus.zlibrary.text.view.ZLTextView myView -> a
    void processWord(org.geometerplus.zlibrary.text.view.ZLTextWord) -> a
    void processSpace() -> a
    void processEndOfParagraph() -> b
    void traverse(org.geometerplus.zlibrary.text.view.ZLTextPosition,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
org.geometerplus.zlibrary.text.view.ZLTextView -> org.geometerplus.zlibrary.text.b.ai:
    org.geometerplus.zlibrary.text.model.ZLTextModel myModel -> d
    int myScrollingMode -> e
    int myOverlappingValue -> f
    org.geometerplus.zlibrary.text.view.ZLTextPage myPreviousPage -> g
    org.geometerplus.zlibrary.text.view.ZLTextPage myCurrentPage -> c
    org.geometerplus.zlibrary.text.view.ZLTextPage myNextPage -> h
    java.util.HashMap myLineInfoCache -> i
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul mySelectedRegionSoul -> j
    boolean myHighlightSelectedRegion -> k
    org.geometerplus.zlibrary.text.view.ZLTextSelection mySelection -> l
    org.geometerplus.zlibrary.text.view.ZLTextHighlighting myHighlighting -> m
    char[] ourDefaultLetters -> n
    char[] myLettersBuffer -> o
    int myLettersBufferLength -> p
    org.geometerplus.zlibrary.text.model.ZLTextModel myLettersModel -> q
    float myCharWidth -> r
    char[] SPACE -> s
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex -> t
    void setModel(org.geometerplus.zlibrary.text.model.ZLTextModel) -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel getModel() -> u
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor getStartCursor() -> v
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor getEndCursor() -> w
    void gotoMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    int search(java.lang.String,boolean,boolean,boolean,boolean) -> a
    boolean canFindNext() -> x
    void findNext() -> y
    boolean canFindPrevious() -> z
    void findPrevious() -> A
    void clearFindResults() -> B
    boolean findResultsAreEmpty() -> C
    void onScrollingFinished(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void highlight(org.geometerplus.zlibrary.text.view.ZLTextPosition,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    void clearHighlighting() -> D
    void moveSelectionCursorTo(org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor,int,int) -> a
    void releaseSelectionCursor() -> l
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor getSelectionCursorInMovement() -> E
    org.geometerplus.zlibrary.text.view.ZLTextSelection$Point getSelectionCursorPoint(org.geometerplus.zlibrary.text.view.ZLTextPage,org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor) -> a
    int distanceToCursor(int,int,org.geometerplus.zlibrary.text.view.ZLTextSelection$Point) -> a
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor findSelectionCursor(int,int) -> j
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor findSelectionCursor(int,int,int) -> a
    void drawSelectionCursor(org.geometerplus.zlibrary.core.view.ZLPaintContext,org.geometerplus.zlibrary.text.view.ZLTextSelection$Point) -> a
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext,org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    org.geometerplus.zlibrary.text.view.ZLTextPage getPage(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> e
    int scrollbarType() -> o
    boolean isScrollbarShown() -> s
    int sizeOfTextBeforeParagraph(int) -> a
    int sizeOfFullText() -> F
    int getCurrentCharNumber(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,boolean) -> a
    int getScrollbarFullSize() -> t
    int getScrollbarThumbPosition(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> b
    int getScrollbarThumbLength(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> c
    int sizeOfTextBeforeCursor(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    float computeCharsPerPage() -> k
    int computeTextPageNumber(int) -> c
    float computeCharWidth() -> m
    float computeCharWidth(char[],int) -> a
    org.geometerplus.zlibrary.text.view.ZLTextView$PagePosition pagePosition() -> G
    void gotoPage(int) -> b
    void gotoHome() -> H
    void drawBackgroung(org.geometerplus.zlibrary.text.view.ZLTextAbstractHighlighting,org.geometerplus.zlibrary.core.util.ZLColor,org.geometerplus.zlibrary.text.view.ZLTextPage,org.geometerplus.zlibrary.text.view.ZLTextLineInfo,int,int,int) -> a
    void drawTextLine(org.geometerplus.zlibrary.text.view.ZLTextPage,org.geometerplus.zlibrary.text.view.ZLTextLineInfo,int,int,int) -> a
    void buildInfos(org.geometerplus.zlibrary.text.view.ZLTextPage,org.geometerplus.zlibrary.text.view.ZLTextWordCursor,org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    boolean isHyphenationPossible() -> n
    org.geometerplus.zlibrary.text.view.ZLTextLineInfo processTextLine(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor,int,int,int) -> a
    void prepareTextLine(org.geometerplus.zlibrary.text.view.ZLTextPage,org.geometerplus.zlibrary.text.view.ZLTextLineInfo,int) -> a
    void scrollPage(boolean,int,int) -> a
    void gotoPosition(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    void gotoPosition(int,int,int) -> b
    void gotoPositionByEnd(int,int,int) -> c
    void preparePaintInfo() -> I
    void preparePaintInfo(org.geometerplus.zlibrary.text.view.ZLTextPage) -> a
    void clearCaches() -> J
    void rebuildPaintInfo() -> K
    int infoSize(org.geometerplus.zlibrary.text.view.ZLTextLineInfo,int) -> a
    int paragraphSize(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,boolean,int) -> a
    void skip(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int,int) -> a
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor findStart(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int,int) -> b
    boolean onFingerMove(int,int) -> d
    boolean onFingerRelease(int,int) -> e
    void hideSelectedRegionBorder() -> L
    org.geometerplus.zlibrary.text.view.ZLTextRegion getSelectedRegion(org.geometerplus.zlibrary.text.view.ZLTextPage) -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion getSelectedRegion() -> M
    org.geometerplus.zlibrary.text.view.ZLTextRegion findRegion(int,int,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion findRegion(int,int,int,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    void selectRegion(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
    boolean initSelection(int,int) -> k
    void clearSelection() -> N
    int getSelectionStartY() -> O
    int getSelectionEndY() -> P
    org.geometerplus.zlibrary.text.view.ZLTextPosition getSelectionStartPosition() -> Q
    org.geometerplus.zlibrary.text.view.ZLTextPosition getSelectionEndPosition() -> R
    boolean isSelectionEmpty() -> S
    org.geometerplus.zlibrary.text.view.ZLTextRegion nextRegion(org.geometerplus.zlibrary.core.view.ZLView$Direction,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    boolean canScroll(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> d
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex() -> T
org.geometerplus.zlibrary.text.view.ZLTextView$PagePosition -> org.geometerplus.zlibrary.text.b.aj:
    int Current -> a
    int Total -> b
org.geometerplus.zlibrary.text.view.ZLTextViewBase -> org.geometerplus.zlibrary.text.b.ak:
    org.geometerplus.zlibrary.text.view.ZLTextStyle myTextStyle -> c
    int myWordHeight -> d
    char[] myWordPartArray -> e
    int getWordHeight() -> U
    int getLeftMargin() -> b
    int getRightMargin() -> c
    int getTopMargin() -> d
    int getBottomMargin() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLFile getWallpaperFile() -> f
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> g
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedBackgroundColor() -> h
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedForegroundColor() -> i
    org.geometerplus.zlibrary.core.util.ZLColor getTextColor(org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getHighlightingColor() -> j
    org.geometerplus.zlibrary.core.view.ZLPaintContext$Size getTextAreaSize() -> V
    int getTextAreaHeight() -> W
    int getTextAreaWidth() -> X
    int getBottomLine() -> Y
    int getRightLine() -> Z
    org.geometerplus.zlibrary.text.view.ZLTextStyle getTextStyle() -> aa
    void setTextStyle(org.geometerplus.zlibrary.text.view.ZLTextStyle) -> a
    void resetTextStyle() -> ab
    void applyControl(org.geometerplus.zlibrary.text.view.ZLTextControlElement) -> a
    void applyControls(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor,int,int) -> a
    int getElementWidth(org.geometerplus.zlibrary.text.view.ZLTextElement,int) -> a
    int getElementHeight(org.geometerplus.zlibrary.text.view.ZLTextElement) -> a
    int getElementDescent(org.geometerplus.zlibrary.text.view.ZLTextElement) -> b
    int getWordWidth(org.geometerplus.zlibrary.text.view.ZLTextWord,int) -> a
    int getWordWidth(org.geometerplus.zlibrary.text.view.ZLTextWord,int,int,boolean) -> a
    void drawWord(int,int,org.geometerplus.zlibrary.text.view.ZLTextWord,int,int,boolean,org.geometerplus.zlibrary.core.util.ZLColor) -> a
    void drawString(int,int,char[],int,int,org.geometerplus.zlibrary.text.view.ZLTextWord$Mark,int) -> a
org.geometerplus.zlibrary.text.view.ZLTextWord -> org.geometerplus.zlibrary.text.b.al:
    char[] Data -> a
    int Offset -> b
    int Length -> f
    int myWidth -> g
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark myMark -> h
    int myParagraphOffset -> i
    boolean isASpace() -> a
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark getMark() -> b
    int getParagraphOffset() -> c
    void addMark(int,int) -> a
    int getWidth(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.text.view.ZLTextWord$Mark -> org.geometerplus.zlibrary.text.b.am:
    int Start -> a
    int Length -> b
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark myNext -> d
    org.geometerplus.zlibrary.text.view.ZLTextWord this$0 -> c
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark getNext() -> a
    void setNext(org.geometerplus.zlibrary.text.view.ZLTextWord$Mark) -> a
    void access$1(org.geometerplus.zlibrary.text.view.ZLTextWord$Mark,org.geometerplus.zlibrary.text.view.ZLTextWord$Mark) -> a
org.geometerplus.zlibrary.text.view.ZLTextWordCursor -> org.geometerplus.zlibrary.text.b.an:
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor myParagraphCursor -> a
    int myElementIndex -> b
    int myCharIndex -> c
    void setCursor(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    void setCursor(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor) -> a
    boolean isNull() -> a
    boolean isStartOfParagraph() -> b
    boolean isStartOfText() -> c
    boolean isEndOfParagraph() -> d
    boolean isEndOfText() -> e
    int getParagraphIndex() -> k
    int getElementIndex() -> l
    int getCharIndex() -> m
    org.geometerplus.zlibrary.text.view.ZLTextElement getElement() -> f
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor getParagraphCursor() -> g
    org.geometerplus.zlibrary.text.model.ZLTextMark getMark() -> h
    void nextWord() -> i
    boolean nextParagraph() -> j
    boolean previousParagraph() -> n
    void moveToParagraphStart() -> o
    void moveToParagraphEnd() -> p
    void moveToParagraph(int) -> a
    void moveTo(int,int) -> a
    void setCharIndex(int) -> b
    void reset() -> q
    void rebuild() -> r
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.text.view.ZLTextWordRegionSoul -> org.geometerplus.zlibrary.text.b.ao:
    org.geometerplus.zlibrary.text.view.ZLTextWord Word -> a
org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle -> org.geometerplus.zlibrary.text.b.a.a:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption AutoHyphenationOption -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption BoldOption -> d
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ItalicOption -> e
    org.geometerplus.zlibrary.core.options.ZLBooleanOption UnderlineOption -> f
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption AlignmentOption -> g
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption LineSpaceOption -> h
    org.geometerplus.zlibrary.core.options.ZLStringOption FontFamilyOption -> i
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FontSizeOption -> j
    java.lang.String getFontFamily() -> a
    int getFontSize() -> b
    boolean isBold() -> c
    boolean isItalic() -> d
    boolean isUnderline() -> e
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getVerticalShift() -> j
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
org.geometerplus.zlibrary.text.view.style.ZLTextDecoratedStyle -> org.geometerplus.zlibrary.text.b.a.b:
    java.lang.String myFontFamily -> c
    int myFontSize -> d
    boolean myIsItalic -> e
    boolean myIsBold -> f
    boolean myIsUnderline -> g
    int myVerticalShift -> h
    boolean myIsNotCached -> i
    void initCache() -> u
    java.lang.String getFontFamily() -> a
    java.lang.String getFontFamilyInternal() -> o
    int getFontSize() -> b
    int getFontSizeInternal() -> p
    boolean isItalic() -> d
    boolean isItalicInternal() -> q
    boolean isBold() -> c
    boolean isBoldInternal() -> r
    boolean isUnderline() -> e
    boolean isUnderlineInternal() -> s
    int getVerticalShift() -> j
    int getVerticalShiftInternal() -> t
org.geometerplus.zlibrary.text.view.style.ZLTextFullDecoratedStyle -> org.geometerplus.zlibrary.text.b.a.c:
    org.geometerplus.zlibrary.text.view.style.ZLTextFullStyleDecoration myFullDecoration -> c
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
org.geometerplus.zlibrary.text.view.style.ZLTextFullStyleDecoration -> org.geometerplus.zlibrary.text.b.a.d:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption SpaceBeforeOption -> a
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption SpaceAfterOption -> b
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption LeftIndentOption -> c
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption RightIndentOption -> d
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FirstLineIndentDeltaOption -> e
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption AlignmentOption -> f
    org.geometerplus.zlibrary.core.options.ZLIntegerOption LineSpacePercentOption -> g
    org.geometerplus.zlibrary.text.view.ZLTextStyle createDecoratedStyle(org.geometerplus.zlibrary.text.view.ZLTextStyle,org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
org.geometerplus.zlibrary.text.view.style.ZLTextPartialDecoratedStyle -> org.geometerplus.zlibrary.text.b.a.e:
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration myDecoration -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> d
    java.lang.String getFontFamilyInternal() -> o
    int getFontSizeInternal() -> p
    boolean isBoldInternal() -> r
    boolean isItalicInternal() -> q
    boolean isUnderlineInternal() -> s
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getVerticalShiftInternal() -> t
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> u
org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection -> org.geometerplus.zlibrary.text.b.a.f:
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection ourInstance -> a
    org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle myBaseStyle -> b
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration[] myDecorationMap -> c
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection Instance() -> a
    org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle getBaseStyle() -> b
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration getDecoration(byte) -> a
    void access$0(org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection,org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle) -> a
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration[] access$1(org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection) -> a
org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection$TextStyleReader -> org.geometerplus.zlibrary.text.b.a.g:
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection myCollection -> a
    boolean dontCacheAttributeValues() -> a
    int intValue(org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String,int) -> a
    boolean booleanValue(org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 b3Value(org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration -> org.geometerplus.zlibrary.text.b.a.h:
    org.geometerplus.zlibrary.core.options.ZLStringOption FontFamilyOption -> h
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FontSizeDeltaOption -> i
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option BoldOption -> j
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option ItalicOption -> k
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option UnderlineOption -> l
    org.geometerplus.zlibrary.core.options.ZLIntegerOption VerticalShiftOption -> m
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option AllowHyphenationsOption -> n
    java.lang.String myName -> a
    org.geometerplus.zlibrary.text.view.ZLTextStyle createDecoratedStyle(org.geometerplus.zlibrary.text.view.ZLTextStyle) -> a
    org.geometerplus.zlibrary.text.view.ZLTextStyle createDecoratedStyle(org.geometerplus.zlibrary.text.view.ZLTextStyle,org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
    java.lang.String getName() -> a
org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow -> org.geometerplus.zlibrary.ui.android.a.a:
    java.util.HashMap myMenuItemMap -> a
    android.view.MenuItem$OnMenuItemClickListener myMenuListener -> b
    int myBatteryLevel -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> d
    android.view.Menu addSubMenu(android.view.Menu,java.lang.String) -> a
    void addMenuItem(android.view.Menu,java.lang.String,java.lang.Integer,java.lang.String) -> a
    void refreshMenu() -> b
    void wait(java.lang.String,java.lang.Runnable) -> a
    void setTitle(java.lang.String) -> a
    org.geometerplus.zlibrary.core.view.ZLViewWidget getViewWidget() -> c
    void close() -> d
    int getBatteryLevel() -> e
    void setBatteryLevel(int) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow) -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> f
org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow$1 -> org.geometerplus.zlibrary.ui.android.a.b:
    org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow$2 -> org.geometerplus.zlibrary.ui.android.a.c:
    org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow this$0 -> a
    android.app.Activity val$activity -> b
    java.lang.String val$title -> c
    void run() -> run
org.geometerplus.zlibrary.ui.android.image.InputStreamImageData -> org.geometerplus.zlibrary.ui.android.b.a:
    org.geometerplus.zlibrary.core.image.ZLSingleImage myImage -> a
    android.graphics.Bitmap decodeWithOptions(android.graphics.BitmapFactory$Options) -> a
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageData -> org.geometerplus.zlibrary.ui.android.b.b:
    android.graphics.Bitmap myBitmap -> a
    int myRealWidth -> b
    int myRealHeight -> c
    org.geometerplus.zlibrary.core.view.ZLPaintContext$Size myLastRequestedSize -> d
    org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType myLastRequestedScaling -> e
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLPaintContext$ScalingType -> f
    android.graphics.Bitmap decodeWithOptions(android.graphics.BitmapFactory$Options) -> a
    android.graphics.Bitmap getFullSizeBitmap() -> a
    android.graphics.Bitmap getBitmap(int,int) -> a
    android.graphics.Bitmap getBitmap(org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLPaintContext$ScalingType() -> b
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader -> org.geometerplus.zlibrary.ui.android.b.c:
    java.util.concurrent.ExecutorService myPool -> a
    java.util.concurrent.ExecutorService mySinglePool -> b
    java.util.HashMap myOnImageSyncRunnables -> c
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$ImageSynchronizedHandler myImageSynchronizedHandler -> d
    void startImageLoading(org.geometerplus.zlibrary.core.image.ZLLoadableImage,java.lang.Runnable) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader) -> a
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$ImageSynchronizedHandler access$1(org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader) -> b
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$1 -> org.geometerplus.zlibrary.ui.android.b.d:
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader this$0 -> a
    org.geometerplus.zlibrary.core.image.ZLLoadableImage val$image -> b
    void run() -> run
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$ImageSynchronizedHandler -> org.geometerplus.zlibrary.ui.android.b.e:
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    void fireMessage(java.lang.String) -> a
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$MinPriorityThreadFactory -> org.geometerplus.zlibrary.ui.android.b.f:
    java.util.concurrent.ThreadFactory myDefaultThreadFactory -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageManager -> org.geometerplus.zlibrary.ui.android.b.g:
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader myLoader -> b
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageData getImageData(org.geometerplus.zlibrary.core.image.ZLImage) -> b
    void startImageLoading(org.geometerplus.zlibrary.core.image.ZLLoadableImage,java.lang.Runnable) -> a
    org.geometerplus.zlibrary.core.image.ZLImageData getImageData(org.geometerplus.zlibrary.core.image.ZLImage) -> a
org.geometerplus.zlibrary.ui.android.library.BugReportActivity -> org.geometerplus.zlibrary.ui.android.library.BugReportActivity:
    java.lang.String getVersionName() -> a
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.zlibrary.ui.android.library.BugReportActivity$1 -> org.geometerplus.zlibrary.ui.android.library.a:
    org.geometerplus.zlibrary.ui.android.library.BugReportActivity this$0 -> a
    java.lang.StringBuilder val$reportText -> b
    java.lang.String val$versionName -> c
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.ui.android.library.BugReportActivity$2 -> org.geometerplus.zlibrary.ui.android.library.b:
    org.geometerplus.zlibrary.ui.android.library.BugReportActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.ui.android.library.UncaughtExceptionHandler -> org.geometerplus.zlibrary.ui.android.library.c:
    android.content.Context myContext -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity -> org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity:
    android.os.PowerManager$WakeLock myWakeLock -> b
    boolean myWakeLockToCreate -> c
    boolean myStartTimer -> d
    android.content.BroadcastReceiver myBatteryInfoReceiver -> a
    org.geometerplus.zlibrary.core.application.ZLApplication createApplication(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    void setScreenBrightnessAuto() -> a
    void setScreenBrightness(int) -> a
    int getScreenBrightness() -> e
    void setButtonLight(boolean) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile fileFromIntent(android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void createWakeLock() -> f
    void switchWakeLock(boolean) -> b
    void onResume() -> onResume
    void onPause() -> onPause
    void onLowMemory() -> onLowMemory
    void onNewIntent(android.content.Intent) -> onNewIntent
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary getLibrary() -> b
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary access$0() -> g
    void access$1(org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity,boolean) -> a
org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity$1 -> org.geometerplus.zlibrary.ui.android.library.d:
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.zlibrary.ui.android.library.ZLAndroidApplication -> org.geometerplus.zlibrary.ui.android.library.ZLAndroidApplication:
    org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow myMainWindow -> a
    void onCreate() -> onCreate
org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary -> org.geometerplus.zlibrary.ui.android.library.e:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowStatusBarOption -> b
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption BatteryLevelToTurnScreenOffOption -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption DontTurnScreenOffDuringChargingOption -> d
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption ScreenBrightnessLevelOption -> e
    org.geometerplus.zlibrary.core.options.ZLBooleanOption DisableButtonLightsOption -> f
    java.lang.Boolean myIsKindleFire -> g
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity myActivity -> h
    android.app.Application myApplication -> i
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget myWidget -> j
    boolean hasNoHardwareMenuButton() -> p
    boolean isKindleFire() -> i
    boolean hasButtonLightsBug() -> j
    void setActivity(org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity) -> a
    void finish() -> k
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity getActivity() -> l
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget getWidget() -> m
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(org.geometerplus.zlibrary.core.filesystem.ZLResourceFile,java.lang.String) -> a
    java.lang.String getVersionName() -> b
    java.lang.String getFullVersionName() -> n
    int getVersionCode() -> o
    java.lang.String getCurrentTimeString() -> c
    void setScreenBrightness(int) -> a
    int getScreenBrightness() -> d
    int getDisplayDPI() -> e
    java.util.Collection defaultLanguageCodes() -> f
    boolean supportsAllOrientations() -> g
    android.app.Application access$0(org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary) -> a
org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary$AndroidAssetsFile -> org.geometerplus.zlibrary.ui.android.library.f:
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary$AndroidAssetsFile myParent -> b
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary this$0 -> a
    java.util.List directoryEntries() -> n
    boolean isDirectory() -> b
    boolean exists() -> a
    long size() -> h
    java.io.InputStream getInputStream() -> i
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> e
org.geometerplus.zlibrary.ui.android.network.SQLiteCookieDatabase -> org.geometerplus.zlibrary.ui.android.c.a:
    android.database.sqlite.SQLiteDatabase myDatabase -> a
    android.database.sqlite.SQLiteStatement myInsertStatement -> b
    android.database.sqlite.SQLiteStatement myInsertPortsStatement -> c
    android.database.sqlite.SQLiteStatement myDeletePortsStatement -> d
    void init(android.content.Context) -> a
    void removeObsolete(java.util.Date) -> a
    void removeAll() -> b
    void saveCookies(java.util.List) -> a
    java.util.List loadCookies() -> c
org.geometerplus.zlibrary.ui.android.util.ZLAndroidColorUtil -> org.geometerplus.zlibrary.ui.android.d.a:
    int rgba(org.geometerplus.zlibrary.core.util.ZLColor,int) -> a
    int rgb(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getAverageColor(android.graphics.Bitmap) -> a
org.geometerplus.zlibrary.ui.android.view.AndroidFontUtil -> org.geometerplus.zlibrary.ui.android.view.a:
    java.lang.reflect.Method ourFontCreationMethod -> a
    java.util.Map ourFontMap -> b
    java.io.File[] ourFileList -> c
    long myTimeStamp -> d
    boolean areExternalFontsSupported() -> a
    android.graphics.Typeface createFontFromFile(java.io.File) -> a
    java.util.Map getFontMap(boolean) -> a
    java.lang.String realFontFamilyName(java.lang.String) -> a
    void fillFamiliesList(java.util.ArrayList,boolean) -> a
org.geometerplus.zlibrary.ui.android.view.AndroidFontUtil$1 -> org.geometerplus.zlibrary.ui.android.view.b:
    boolean accept(java.io.File,java.lang.String) -> accept
org.geometerplus.zlibrary.ui.android.view.AnimationProvider -> org.geometerplus.zlibrary.ui.android.view.c:
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode myMode -> i
    org.geometerplus.zlibrary.ui.android.view.BitmapManager myBitmapManager -> j
    int myStartX -> a
    int myStartY -> b
    int myEndX -> c
    int myEndY -> d
    org.geometerplus.zlibrary.core.view.ZLView$Direction myDirection -> e
    float mySpeed -> f
    int myWidth -> g
    int myHeight -> h
    java.util.List myDrawInfos -> k
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> l
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode getMode() -> a
    void terminate() -> b
    void startManualScrolling(int,int) -> a
    void scrollTo(int,int) -> b
    void startAnimatedScrolling(int,int,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,java.lang.Integer,java.lang.Integer,int) -> a
    void startAnimatedScrollingInternal(int) -> a
    void setupAnimatedScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    boolean inProgress() -> c
    int getScrollingShift() -> d
    void setup(org.geometerplus.zlibrary.core.view.ZLView$Direction,int,int) -> a
    void doStep() -> e
    int getScrolledPercent() -> f
    void draw(android.graphics.Canvas) -> a
    void drawInternal(android.graphics.Canvas) -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> c
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo() -> g
    android.graphics.Bitmap getBitmapFrom() -> h
    android.graphics.Bitmap getBitmapTo() -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> j
org.geometerplus.zlibrary.ui.android.view.AnimationProvider$DrawInfo -> org.geometerplus.zlibrary.ui.android.view.d:
    int X -> a
    int Y -> b
    long Start -> c
    int Duration -> d
org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode -> org.geometerplus.zlibrary.ui.android.view.e:
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode NoScrolling -> a
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode ManualScrolling -> b
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode AnimatedScrollingForward -> c
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode AnimatedScrollingBackward -> d
    boolean Auto -> e
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode[] ENUM$VALUES -> f
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode[] values() -> values
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.ui.android.view.BitmapManager -> org.geometerplus.zlibrary.ui.android.view.f:
    int SIZE -> a
    android.graphics.Bitmap[] myBitmaps -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex[] myIndexes -> c
    int myWidth -> d
    int myHeight -> e
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget myWidget -> f
    void setSize(int,int) -> a
    android.graphics.Bitmap getBitmap(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    int getInternalIndex(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> b
    void reset() -> a
    void shift(boolean) -> a
org.geometerplus.zlibrary.ui.android.view.CurlAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.g:
    android.graphics.Paint myPaint -> l
    android.graphics.Paint myBackPaint -> m
    android.graphics.Paint myEdgePaint -> n
    android.graphics.Path myFgPath -> i
    android.graphics.Path myEdgePath -> j
    android.graphics.Path myQuadPath -> k
    float mySpeedFactor -> o
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> p
    void drawInternal(android.graphics.Canvas) -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> c
    void startAnimatedScrollingInternal(int) -> a
    void setupAnimatedScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    void doStep() -> e
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> k
org.geometerplus.zlibrary.ui.android.view.NoneAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.h:
    android.graphics.Paint myPaint -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> j
    void drawInternal(android.graphics.Canvas) -> b
    void doStep() -> e
    void setupAnimatedScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    void startAnimatedScrollingInternal(int) -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> k
org.geometerplus.zlibrary.ui.android.view.ShiftAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.i:
    android.graphics.Paint myPaint -> i
    void drawInternal(android.graphics.Canvas) -> b
org.geometerplus.zlibrary.ui.android.view.SimpleAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.j:
    float mySpeedFactor -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> j
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> c
    void setupAnimatedScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    void startAnimatedScrollingInternal(int) -> a
    void doStep() -> e
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> k
org.geometerplus.zlibrary.ui.android.view.SlideAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.k:
    android.graphics.Paint myPaint -> i
    void drawInternal(android.graphics.Canvas) -> b
org.geometerplus.zlibrary.ui.android.view.ZLAndroidPaintContext -> org.geometerplus.zlibrary.ui.android.view.l:
    android.graphics.Canvas myCanvas -> a
    android.graphics.Paint myTextPaint -> b
    android.graphics.Paint myLinePaint -> c
    android.graphics.Paint myFillPaint -> d
    android.graphics.Paint myOutlinePaint -> e
    int myWidth -> f
    int myHeight -> g
    int myScrollbarWidth -> h
    org.geometerplus.zlibrary.core.util.ZLColor myBackgroundColor -> i
    java.util.HashMap myTypefaces -> j
    org.geometerplus.zlibrary.core.filesystem.ZLFile ourWallpaperFile -> k
    android.graphics.Bitmap ourWallpaper -> l
    void clear(org.geometerplus.zlibrary.core.filesystem.ZLFile,boolean) -> a
    void clear(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> a
    void fillPolygon(int[],int[]) -> a
    void drawPolygonalLine(int[],int[]) -> b
    void drawOutline(int[],int[]) -> c
    void setFontInternal(java.lang.String,int,boolean,boolean,boolean) -> a
    void setTextColor(org.geometerplus.zlibrary.core.util.ZLColor) -> b
    void setLineColor(org.geometerplus.zlibrary.core.util.ZLColor,int) -> a
    void setLineWidth(int) -> a
    void setFillColor(org.geometerplus.zlibrary.core.util.ZLColor,int,int) -> a
    int getWidth() -> b
    int getHeight() -> c
    int getStringWidth(char[],int,int) -> a
    int getSpaceWidthInternal() -> d
    int getStringHeightInternal() -> e
    int getDescentInternal() -> f
    void drawString(int,int,char[],int,int) -> a
    org.geometerplus.zlibrary.core.view.ZLPaintContext$Size imageSize(org.geometerplus.zlibrary.core.image.ZLImageData,org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    void drawImage(int,int,org.geometerplus.zlibrary.core.image.ZLImageData,org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    void drawLine(int,int,int,int) -> a
    void fillRectangle(int,int,int,int) -> b
    java.lang.String realFontFamilyName(java.lang.String) -> b
org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget -> org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget:
    android.graphics.Paint myPaint -> a
    org.geometerplus.zlibrary.ui.android.view.BitmapManager myBitmapManager -> b
    android.graphics.Bitmap myFooterBitmap -> c
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider myAnimationProvider -> d
    org.geometerplus.zlibrary.core.view.ZLView$Animation myAnimationType -> e
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$LongClickRunnable myPendingLongClickRunnable -> f
    boolean myLongClickPerformed -> g
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$ShortClickRunnable myPendingShortClickRunnable -> h
    boolean myPendingPress -> i
    boolean myPendingDoubleTap -> j
    int myPressedX -> k
    int myPressedY -> l
    boolean myScreenIsTouched -> m
    int myKeyUnderTracking -> n
    long myTrackingStartTime -> o
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Animation -> p
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$ui$android$view$AnimationProvider$Mode -> q
    void init() -> e
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider getAnimationProvider() -> f
    void onDrawInScrolling(android.graphics.Canvas) -> a
    void reset() -> a
    void repaint() -> b
    void startManualScrolling(int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction) -> a
    void scrollManuallyTo(int,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAnimatedScrolling(int,int,int) -> a
    void drawOnBitmap(android.graphics.Bitmap,org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void drawFooter(android.graphics.Canvas) -> b
    void onDrawStatic(android.graphics.Canvas) -> c
    boolean onTrackballEvent(android.view.MotionEvent) -> onTrackballEvent
    void postLongClickRunnable() -> g
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onLongClick(android.view.View) -> onLongClick
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    int computeVerticalScrollExtent() -> computeVerticalScrollExtent
    int computeVerticalScrollOffset() -> computeVerticalScrollOffset
    int computeVerticalScrollRange() -> computeVerticalScrollRange
    int getMainAreaHeight() -> h
    void access$0(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget,boolean) -> a
    int access$1(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> a
    int access$2(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> b
    void access$3(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget,boolean) -> b
    void access$4(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget,org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$ShortClickRunnable) -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Animation() -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$ui$android$view$AnimationProvider$Mode() -> d
org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$LongClickRunnable -> org.geometerplus.zlibrary.ui.android.view.m:
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget this$0 -> a
    void run() -> run
org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$ShortClickRunnable -> org.geometerplus.zlibrary.ui.android.view.n:
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget this$0 -> a
    void run() -> run
org.vimgadgets.linebreak.LineBreaker -> org.vimgadgets.linebreak.LineBreaker:
    java.lang.String myLanguage -> a
    void init() -> init
    void setLineBreaksForCharArray(char[],int,int,java.lang.String,byte[]) -> setLineBreaksForCharArray
    void setLineBreaks(char[],int,int,byte[]) -> a
